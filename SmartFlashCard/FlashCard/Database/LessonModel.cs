//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using FlashCard.Models;
using System.Linq;
using FlashCard.Database;
using System.ComponentModel;


namespace FlashCard.Database
{
    /// <summary>
    /// Model for table Lesson 
    /// </summary>
    public partial class LessonModel : ViewModelBase, IDataErrorInfo
    {
        #region Ctor

        // Default contructor
        public LessonModel()
        {
            this.IsNew = true;
            this.Lesson = new Lesson();
        }

        // Default contructor that set entity to field
        public LessonModel(Lesson lesson)
        {
            this.Lesson = lesson;
        }

        #endregion

        #region Entity Properties

        public Lesson Lesson { get; private set; }

        public bool IsNew { get; private set; }
        public bool IsDirty { get; private set; }
        public bool Deleted { get; set; }
        public bool Checked { get; set; }

        public void EndUpdate()
        {
            IsNew = false;
            IsDirty = false;
        }


        #endregion

        #region Primitive Properties

        public string LessonID
        {
            get { return this.Lesson.LessonID; }
            set
            {
                if (this.Lesson.LessonID != value)
                {
                    this.IsDirty = true;
                    this.Lesson.LessonID = value;
                    RaisePropertyChanged(() => LessonID);
                }
            }
        }
        public string LessonName
        {
            get { return this.Lesson.LessonName; }
            set
            {
                if (this.Lesson.LessonName != value)
                {
                    this.IsDirty = true;
                    this.Lesson.LessonName = value;
                    RaisePropertyChanged(() => LessonName);
                }
            }
        }
        public string Description
        {
            get { return this.Lesson.Description; }
            set
            {
                if (this.Lesson.Description != value)
                {
                    this.IsDirty = true;
                    this.Lesson.Description = value;
                    RaisePropertyChanged(() => Description);
                }
            }
        }
        public string CategoryID
        {
            get { return this.Lesson.CategoryID; }
            set
            {
                if (this.Lesson.CategoryID != value)
                {
                    this.IsDirty = true;
                    this.Lesson.CategoryID = value;
                    RaisePropertyChanged(() => CategoryID);
                }
            }
        }
        public string CardID
        {
            get { return this.Lesson.CardID; }
            set
            {
                if (this.Lesson.CardID != value)
                {
                    this.IsDirty = true;
                    this.Lesson.CardID = value;
                    RaisePropertyChanged(() => CardID);
                }
            }
        }

        #endregion

        #region all the custom code

        #region Properties


        private bool _isBackSide;
        /// <summary>
        /// This is Extend Properties
        ///<para> Gets or sets the property value.</para>
        /// </summary>
        public bool IsBackSide
        {
            get { return _isBackSide; }
            set
            {
                if (_isBackSide != value)
                {
                    _isBackSide = value;
                    RaisePropertyChanged(() => IsBackSide);

                }
            }
        }


        private ObservableCollection<BackSideModel> _backSideCollection;
        /// <summary>
        /// Extention property.
        /// </summary>
        public ObservableCollection<BackSideModel> BackSideCollection
        {
            get
            {

                return _backSideCollection;

            }
            set
            {
                if (_backSideCollection != value)
                {
                    _backSideCollection = value;
                    RaisePropertyChanged(() => BackSideCollection);
                }
            }
        }


        #endregion

        #region DataErrorInfo
        public string Error
        {
            get { throw new NotImplementedException(); }
        }
        private Dictionary<string, string> _errors = new Dictionary<string, string>();
        public Dictionary<string, string> Errors
        {
            get
            {
                return _errors;
            }
            set
            {
                if (_errors != value)
                {
                    _errors = value;
                    RaisePropertyChanged(() => Errors);
                }
            }
        }
        public string this[string columnName]
        {
            get
            {
                string message = String.Empty;
                this.Errors.Remove(columnName);
                switch (columnName)
                {
                    case "LessonName":
                        if (string.IsNullOrWhiteSpace(LessonName))
                            message = "Lesson Name is required!";
                        break;
                    case "Description":
                        if (string.IsNullOrWhiteSpace(Description))
                            message = "Description is required!";


                        break;

                }
                if (!String.IsNullOrEmpty(message))
                {
                    this.Errors.Add(columnName, message);
                }
                return message;
            }
        }
        #endregion
        #endregion
    }
}

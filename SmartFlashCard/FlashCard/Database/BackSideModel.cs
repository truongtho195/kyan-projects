//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using FlashCard.Models;
using FlashCard.Database;
using System.ComponentModel;


namespace FlashCard.Database
{
    /// <summary>
    /// Model for table BackSide 
    /// </summary>
    public partial class BackSideModel : ViewModelBase, IDataErrorInfo
    {
        #region Ctor

        // Default contructor
        public BackSideModel()
        {
            this.IsNew = true;
            this.BackSide = new BackSide();
        }

        // Default contructor that set entity to field
        public BackSideModel(BackSide backside)
        {
            this.BackSide = backside;
        }

        #endregion

        #region Entity Properties

        public BackSide BackSide { get; private set; }

        public bool IsNew { get; private set; }
        public bool IsDirty { get; private set; }
        //public bool Deleted { get; set; }
        public bool Checked { get; set; }


        private bool _deleted;
        /// <summary>
        /// Gets or sets the Deleted.
        /// </summary>
        public bool Deleted
        {
            get { return _deleted; }
            set
            {
                if (_deleted != value)
                {
                    _deleted = value;
                    RaisePropertyChanged(() => Deleted);
                }
            }
        }


        public void EndUpdate()
        {
            IsNew = false;
            IsDirty = false;
        }
        

        #endregion

        #region Primitive Properties

        public string BackSideID
        {
            get { return this.BackSide.BackSideID; }
            set
            {
                if (this.BackSide.BackSideID != value)
                {
                    this.IsDirty = true;
                    this.BackSide.BackSideID = value;
                    RaisePropertyChanged(() => BackSideID);
                }
            }
        }
        public string LessonID
        {
            get { return this.BackSide.LessonID; }
            set
            {
                if (this.BackSide.LessonID != value)
                {
                    this.IsDirty = true;
                    this.BackSide.LessonID = value;
                    RaisePropertyChanged(() => LessonID);
                }
            }
        }
        public string Content
        {
            get { return this.BackSide.Content; }
            set
            {
                if (this.BackSide.Content != value)
                {
                    this.IsDirty = true;
                    this.BackSide.Content = value;
                    RaisePropertyChanged(() => Content);
                }
            }
        }
        public string BackSideName
        {
            get { return this.BackSide.BackSideName; }
            set
            {
                if (this.BackSide.BackSideName != value)
                {
                    this.IsDirty = true;
                    this.BackSide.BackSideName = value;
                    RaisePropertyChanged(() => BackSideName);
                }
            }
        }
        public Nullable<byte> IsMain
        {
            get { return this.BackSide.IsMain; }
            set
            {
                if (this.BackSide.IsMain != value)
                {
                    this.IsDirty = true;
                    this.BackSide.IsMain = value;
                    RaisePropertyChanged(() => IsMain);
                }
            }
        }

        #endregion

        #region all the custom code
        #region DataErrorInfo
        public string Error
        {
            get { throw new NotImplementedException(); }
        }
        private Dictionary<string, string> _errors = new Dictionary<string, string>();
        public Dictionary<string, string> Errors
        {
            get
            {
                return _errors;
            }
            set
            {
                if (_errors != value)
                {
                    _errors = value;
                    RaisePropertyChanged(() => Errors);
                }
            }
        }
        public string this[string columnName]
        {
            get
            {
                string message = String.Empty;
                this.Errors.Remove(columnName);
                switch (columnName)
                {
                    case "BackSideName":
                        if (string.IsNullOrWhiteSpace(this.BackSideName))
                            message = "Back side name is required!";
                        break;
                    case "Content":
                        if (string.IsNullOrWhiteSpace(this.Content))
                            message = "Content is require";
                        break;
                }
                if (!String.IsNullOrEmpty(message))
                {
                    this.Errors.Add(columnName, message);
                }
                return message;
            }
        }
        #endregion

        #endregion
    }
}

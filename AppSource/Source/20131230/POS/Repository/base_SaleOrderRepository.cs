//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq;
using System.Linq.Expressions;
using CPC.POS.Database;
using CPC.POS.Model;
using System.Collections.ObjectModel;
using CPC.Helper;
using System.ComponentModel;

namespace CPC.POS.Repository
{
    /// <summary>
    /// Repository for table base_SaleOrder 
    /// </summary>
    public partial class base_SaleOrderRepository
    {
        #region Auto Generate Code

        #region Constructors

        // Default constructor
        public base_SaleOrderRepository()
        {
        }

        #endregion

        #region Basic C.R.U.D. Operations

        /// <summary>
        /// Add new base_SaleOrder.
        /// </summary>
        /// <param name="base_SaleOrder">base_SaleOrder to add.</param>
        /// <returns>base_SaleOrder have been added.</returns>
        public base_SaleOrder Add(base_SaleOrder base_SaleOrder)
        {
            UnitOfWork.Add<base_SaleOrder>(base_SaleOrder);
            return base_SaleOrder;
        }

        /// <summary>
        /// Adds a sequence of new base_SaleOrder.
        /// </summary>
        /// <param name="base_SaleOrder">Sequence of new base_SaleOrder to add.</param>
        /// <returns>Sequence of new base_SaleOrder have been added.</returns>
        public IEnumerable<base_SaleOrder> Add(IEnumerable<base_SaleOrder> base_SaleOrder)
        {
            UnitOfWork.Add<base_SaleOrder>(base_SaleOrder);
            return base_SaleOrder;
        }

        /// <summary>
        /// Delete a existed base_SaleOrder.
        /// </summary>
        /// <param name="base_SaleOrder">base_SaleOrder to delete.</param>
        public void Delete(base_SaleOrder base_SaleOrder)
        {
            Refresh(base_SaleOrder);
            if (base_SaleOrder.EntityState != System.Data.EntityState.Detached)
                UnitOfWork.Delete<base_SaleOrder>(base_SaleOrder);
        }

        /// <summary>
        /// Delete a sequence of existed base_SaleOrder.
        /// </summary>
        /// <param name="base_SaleOrder">Sequence of existed base_SaleOrder to delete.</param>
        public void Delete(IEnumerable<base_SaleOrder> base_SaleOrder)
        {
            int total = base_SaleOrder.Count();
            for (int i = total - 1; i >= 0; i--)
                Delete(base_SaleOrder.ElementAt(i));
        }

        /// <summary>
        /// Returns the first base_SaleOrder of a sequence that satisfies a specified condition or 
        /// a default value if no such base_SaleOrder is found.
        /// </summary>
        /// <param name="expression">A function to test each base_SaleOrder for a condition.</param>
        /// <returns>    
        /// Null if source is empty or if no base_SaleOrder passes the test specified by expression; 
        /// otherwise, the first base_SaleOrder in source that passes the test specified by expression.
        /// </returns>
        public base_SaleOrder Get(Expression<Func<base_SaleOrder, bool>> expression)
        {
            return UnitOfWork.Get<base_SaleOrder>(expression);
        }

        /// <summary>
        /// Get all base_SaleOrder.
        /// </summary>
        /// <returns>The new IList&lt;base_SaleOrder&gt; instance.</returns>
        public IList<base_SaleOrder> GetAll()
        {
            return UnitOfWork.GetAll<base_SaleOrder>();
        }

        /// <summary>
        /// Get all base_SaleOrder that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each base_SaleOrder for a condition.</param>
        /// <returns>The new IList&lt;base_SaleOrder&gt; instance.</returns>
        public IList<base_SaleOrder> GetAll(Expression<Func<base_SaleOrder, bool>> expression)
        {
            return UnitOfWork.GetAll<base_SaleOrder>(expression);
        }

        /// <summary>
        /// Get all base_SaleOrder.
        /// </summary>
        /// <returns>The new IEnumerable&lt;base_SaleOrder&gt; instance.</returns>
        public IEnumerable<base_SaleOrder> GetIEnumerable()
        {
            return UnitOfWork.GetIEnumerable<base_SaleOrder>();
        }

        /// <summary>
        /// Get all base_SaleOrder that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each base_SaleOrder for a condition.</param>
        /// <returns>The new IEnumerable&lt;base_SaleOrder&gt; instance.</returns>
        public IEnumerable<base_SaleOrder> GetIEnumerable(Expression<Func<base_SaleOrder, bool>> expression)
        {
            return UnitOfWork.GetIEnumerable<base_SaleOrder>(expression);
        }

        /// <summary>
        /// Get all base_SaleOrder.
        /// </summary>
        /// <returns>The new IQueryable&lt;base_SaleOrder&gt; instance.</returns>
        public IQueryable<base_SaleOrder> GetIQueryable()
        {
            return UnitOfWork.GetIQueryable<base_SaleOrder>();
        }

        /// <summary>
        /// Get all base_SaleOrder that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each base_SaleOrder for a condition.</param>
        /// <returns>The new IQueryable&lt;base_SaleOrder&gt; instance.</returns>
        public IQueryable<base_SaleOrder> GetIQueryable(Expression<Func<base_SaleOrder, bool>> expression)
        {
            return UnitOfWork.GetIQueryable<base_SaleOrder>(expression);
        }

        /// <summary>
        /// Take a few base_SaleOrder in a sequence was sorted on server.
        /// </summary>
        /// <param name="ignoreCount">Number of base_SaleOrder will ignore.</param>
        /// <param name="takeCount">Number of base_SaleOrder will take.</param>
        /// <param name="keys">The key columns by which to order the results.</param>
        /// <returns>The new IList&lt;base_SaleOrder&gt; instance.</returns>
        public IList<base_SaleOrder> GetRange(int ignoreCount, int takeCount, string keys)
        {
            return UnitOfWork.GetRange<base_SaleOrder>(ignoreCount, takeCount, keys);
        }

        /// <summary>
        /// Take a few base_SaleOrder in a sequence was sorted on server.
        /// </summary>
        /// <param name="ignoreCount">Number of base_SaleOrder will ignore.</param>
        /// <param name="takeCount">Number of base_SaleOrder will take.</param>
        /// <param name="keys">The key columns by which to order the results.</param>
        /// <param name="expression">A function to test each base_SaleOrder for a condition.</param>
        /// <returns>The new IList&lt;base_SaleOrder&gt; instance.</returns>
        public IList<base_SaleOrder> GetRange(int ignoreCount, int takeCount, string keys, Expression<Func<base_SaleOrder, bool>> expression)
        {
            return UnitOfWork.GetRange<base_SaleOrder>(ignoreCount, takeCount, keys, expression);
        }

        /// <summary>
        /// Take a few base_SaleOrder in sequence was sorted by descending on server.
        /// </summary>
        /// <typeparam name="TKey">Type of base_SaleOrder to sort</typeparam>
        /// <param name="ignoreCount">Number of base_SaleOrder will ignore.</param>
        /// <param name="takeCount">Number of base_SaleOrder will take.</param>
        /// <param name="keySelector">The key columns by which to order the results.</param>
        /// <returns>The new IList&lt;base_SaleOrder&gt; instance.</returns>
        public IList<base_SaleOrder> GetRangeDescending<TKey>(int ignoreCount, int takeCount, Expression<Func<base_SaleOrder, TKey>> keySelector)
        {
            return UnitOfWork.GetRangeDescending(ignoreCount, takeCount, keySelector);
        }

        /// <summary>
        /// Take a few base_SaleOrder in sequence was sorted by descending on server.
        /// </summary>
        /// <typeparam name="TKey">Type of base_SaleOrder to sort</typeparam>
        /// <param name="ignoreCount">Number of base_SaleOrder will ignore.</param>
        /// <param name="takeCount">Number of base_SaleOrder will take.</param>
        /// <param name="keySelector">The key columns by which to order the results.</param>
        /// <param name="expression">A function to test each object for a condition.</param>
        /// <returns>The new IList&lt;base_SaleOrder&gt; instance.</returns>
        public IList<base_SaleOrder> GetRangeDescending<TKey>(int ignoreCount, int takeCount, Expression<Func<base_SaleOrder, TKey>> keySelector, Expression<Func<base_SaleOrder, bool>> expression)
        {
            return UnitOfWork.GetRangeDescending(ignoreCount, takeCount, keySelector, expression);
        }

        /// <summary>
        /// Updates an base_SaleOrder in the object context with data from the data source.
        /// </summary>
        /// <param name="base_SaleOrder">The base_SaleOrder to be refreshed.</param>
        public base_SaleOrder Refresh(base_SaleOrder base_SaleOrder)
        {
            UnitOfWork.Refresh<base_SaleOrder>(base_SaleOrder);
            if (base_SaleOrder.EntityState != System.Data.EntityState.Detached)
                return base_SaleOrder;
            return null;
        }

        /// <summary>
        /// Updates a sequence of base_SaleOrder in the object context with data from the data source.
        /// </summary>
        /// <typeparam name="base_SaleOrder">Type of object in a sequence to refresh.</typeparam>
        /// <param name="base_SaleOrder">Object collection to be refreshed.</param>
        public void Refresh(IEnumerable<base_SaleOrder> base_SaleOrder)
        {
            UnitOfWork.Refresh<base_SaleOrder>(base_SaleOrder);
        }

        /// <summary>
        /// Updates a sequence of base_SaleOrder in the object context with data from the data source.
        /// </summary>
        public void Refresh()
        {
            UnitOfWork.Refresh<base_SaleOrder>();
        }

        /// <summary>
        /// Persists all updates to the data source and resets change tracking in the object context.
        /// </summary>
        public void Commit()
        {
            UnitOfWork.Commit();
        }

        /// <summary>
        /// Persists all updates to the data source with the specified System.Data.Objects.SaveOptions.
        /// </summary>
        /// <param name="options">A System.Data.Objects.SaveOptions value that determines the behavior of the operation.</param>
        public void Commit(SaveOptions options)
        {
            UnitOfWork.Commit(options);
        }

        /// <summary>
        /// Starts a database transaction.
        /// </summary>
        public void BeginTransaction()
        {
            UnitOfWork.BeginTransaction();
        }

        /// <summary>
        /// Commits the database transaction.
        /// </summary>
        public void CommitTransaction()
        {
            UnitOfWork.CommitTransaction();
        }

        /// <summary>
        /// Rolls back a transaction from a pending state.
        /// </summary>
        public void RollbackTransaction()
        {
            UnitOfWork.RollbackTransaction();
        }

        #endregion

        #endregion

        #region Custom Code

        /// <summary>
        /// Take a few objects in sequence was sorted by descending on server
        /// </summary>
        /// <typeparam name="T">Type of object in a sequence.<</typeparam>
        /// <typeparam name="TKey">Type of object to sort</typeparam>
        /// <param name="ignoreCount">Number of objects will ignore.</param>
        /// <param name="takeCount">Number of objects will take.</param>
        /// <param name="keySelector">The key columns by which to order the results.</param>
        /// <param name="expression">A function to test each object for a condition.</param>
        /// <returns>The new IList<T> instance.</returns>
        public IList<base_SaleOrder> GetRange<TKey>(int ignoreCount, int takeCount, Expression<Func<base_SaleOrder, TKey>> keySelector, Expression<Func<base_SaleOrder, bool>> expression)
        {
            return UnitOfWork.GetRangeDescending<base_SaleOrder, TKey>(ignoreCount, takeCount, keySelector, expression);
        }

        #region SaleOrder Support Methods
        /// <summary>
        /// Set Address From customer
        /// </summary>
        /// <param name="saleOrderModel"></param>
        public void SetBillShipAddress(CPC.POS.Model.base_GuestModel guestModel, CPC.POS.Model.base_SaleOrderModel saleOrderModel)
        {
            if (guestModel == null)
                return;

            //Set Address To Bill or Ship
            if (guestModel.base_Guest.base_GuestAddress.Any(x => x.AddressTypeId == (int)AddressType.Billing))
            {
                base_GuestAddress billAdress = guestModel.base_Guest.base_GuestAddress.SingleOrDefault(x => x.AddressTypeId == (int)AddressType.Billing);
                saleOrderModel.BillAddressModel = new CPC.POS.Model.base_GuestAddressModel(billAdress);
                saleOrderModel.BillAddress = saleOrderModel.BillAddressModel.Text;
            }
            else
            {
                saleOrderModel.BillAddressModel = new CPC.POS.Model.base_GuestAddressModel() { AddressTypeId = (int)AddressType.Billing };
                saleOrderModel.BillAddress = string.Empty;
            }
            if (guestModel.base_Guest.base_GuestAddress.Any(x => x.AddressTypeId == (int)AddressType.Shipping))
            {
                base_GuestAddress shippAdress = guestModel.base_Guest.base_GuestAddress.SingleOrDefault(x => x.AddressTypeId == (int)AddressType.Shipping);
                saleOrderModel.ShipAddressModel = new CPC.POS.Model.base_GuestAddressModel(shippAdress);
                saleOrderModel.ShipAddress = saleOrderModel.ShipAddressModel.Text;
            }
            else
            {
                saleOrderModel.ShipAddressModel = new CPC.POS.Model.base_GuestAddressModel() { AddressTypeId = (int)AddressType.Shipping };
                saleOrderModel.ShipAddress = string.Empty;
            }
        }

        /// <summary>
        /// Set Customer Additional model for customer
        /// </summary>
        /// <param name="saleOrderModel"></param>
        public void SetGuestAdditionalModel(CPC.POS.Model.base_SaleOrderModel saleOrderModel)
        {
            if (saleOrderModel.GuestModel != null)
            {
                base_GuestAdditional customerAdditional = saleOrderModel.GuestModel.base_Guest.base_GuestAdditional.FirstOrDefault();
                if (customerAdditional != null && saleOrderModel != null)
                {
                    saleOrderModel.GuestModel.AdditionalModel = new CPC.POS.Model.base_GuestAdditionalModel(customerAdditional);

                    //Set value for radiobutton "Pricing Level" (No discount / Fixed Discount / Markdown Price Level)
                    if (saleOrderModel.GuestModel.AdditionalModel.PriceSchemeId > 0)
                        saleOrderModel.GuestModel.AdditionalModel.PriceLevelType = (int)PriceLevelType.MarkdownPriceLevel;//Set radio button is Mark down Price Level
                    else if (saleOrderModel.GuestModel.AdditionalModel.FixDiscount != null && saleOrderModel.GuestModel.AdditionalModel.FixDiscount > 0)
                        saleOrderModel.GuestModel.AdditionalModel.PriceLevelType = (int)PriceLevelType.FixedDiscountOnAllItems;//Set radio button is Fixed Discount
                    else
                        saleOrderModel.GuestModel.AdditionalModel.PriceLevelType = (int)PriceLevelType.NoDiscount;//Set radio Button is No Discount

                }
            }
        }

        /// <summary>
        /// show datagridrow when 
        /// <para>1/. This Product has Serial tracking (IsSerialTracking=true)</para>
        /// <para>2/. SaleOrder Detail has changed price</para>
        /// <para>3/. SaleOrder Detail has apply discount</para>
        /// <para>4/. SaleOrder Detail has apply Reward</para>
        /// </summary>
        /// <param name="saleOrderDetailModel"></param>
        public void CheckToShowDatagridRowDetail(CPC.POS.Model.base_SaleOrderDetailModel saleOrderDetailModel)
        {
            saleOrderDetailModel.IsVisibleRowDetail = false;
            //HasSerial
            saleOrderDetailModel.IsVisibleRowDetail |= saleOrderDetailModel.ProductModel.IsSerialTracking;
            //Coupon
            saleOrderDetailModel.IsVisibleRowDetail |= saleOrderDetailModel.ProductModel.IsCoupon;
            //Sale p
            saleOrderDetailModel.IsVisibleRowDetail |= saleOrderDetailModel.RegularPrice > saleOrderDetailModel.SalePrice && saleOrderDetailModel.DiscountPercent > 0;
        }

        /// <summary>
        /// UpdateQuantity To SaleOrder QtyOrdered,QtyReceived,QtyDue
        /// </summary>
        public void UpdateQtyOrderNRelate(CPC.POS.Model.base_SaleOrderModel saleOrderModel)
        {
            decimal totalQuantityBaseUom = 0;
            decimal totalPickQtyUom = 0;
            foreach (CPC.POS.Model.base_SaleOrderDetailModel saleOrderDetail in saleOrderModel.SaleOrderDetailCollection)
            {
                if (saleOrderDetail.ProductModel != null && !saleOrderDetail.ProductModel.IsCoupon)
                {
                    decimal quantityBaseUnit = saleOrderDetail.ProductUOMCollection.Single(x => x.UOMId.Equals(saleOrderDetail.UOMId)).BaseUnitNumber;
                    totalQuantityBaseUom += quantityBaseUnit * saleOrderDetail.Quantity;
                }
            }

            //if (saleOrderModel.SaleOrderShippedCollection != null)
            //{
            //    foreach (CPC.POS.Model.base_SaleOrderDetailModel saleOrderDetail in saleOrderModel.SaleOrderShippedCollection)
            //    {
            //        if (!saleOrderDetail.ProductModel.IsCoupon && !saleOrderDetail.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group))
            //        {
            //            decimal quantityBaseUnit = saleOrderDetail.ProductUOMCollection.Single(x => x.UOMId.Equals(saleOrderDetail.UOMId)).BaseUnitNumber;
            //            totalPickQtyUom += quantityBaseUnit * saleOrderDetail.PickQty;
            //        }
            //    }
            //}

            if (saleOrderModel.SaleOrderShipDetailCollection != null)
            {
                foreach (CPC.POS.Model.base_SaleOrderShipDetailModel saleOrderShipDetailModel in saleOrderModel.SaleOrderShipDetailCollection)
                {
                    //Get SaleOrderDetailModel 
                    base_SaleOrderDetailModel saleOrderDetailModel = saleOrderModel.SaleOrderDetailCollection.SingleOrDefault(x => x.Resource.ToString().Equals(saleOrderShipDetailModel.SaleOrderDetailResource));

                    if (!saleOrderDetailModel.ProductModel.IsCoupon && !saleOrderDetailModel.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group))
                    {
                        decimal quantityBaseUnit = saleOrderDetailModel.ProductUOMCollection.Single(x => x.UOMId.Equals(saleOrderDetailModel.UOMId)).BaseUnitNumber;
                        totalPickQtyUom += quantityBaseUnit * saleOrderShipDetailModel.PackedQty;
                    }
                }
            }



            saleOrderModel.QtyOrdered = totalQuantityBaseUom;
            saleOrderModel.QtyReceived = totalPickQtyUom;
            saleOrderModel.CalcDueQty();
            saleOrderModel.CalUnfill();
        }

        /// <summary>
        /// Get UOM Collection For sale order detail
        /// </summary>
        /// <param name="salesOrderDetailModel"></param>
        /// <param name="SetPrice"> True : Set price after set Product Unit</param>
        public void GetProductUOMforSaleOrderDetail(CPC.POS.Model.base_SaleOrderDetailModel salesOrderDetailModel, bool SetPrice = true)
        {
            salesOrderDetailModel.ProductUOMCollection = new System.Collections.ObjectModel.ObservableCollection<CPC.POS.Model.base_ProductUOMModel>();

            CPC.POS.Model.base_ProductUOMModel productUOM;

            base_ProductStore productStore = salesOrderDetailModel.ProductModel.base_Product.base_ProductStore.SingleOrDefault(x => x.StoreCode.Equals(Define.StoreCode));
            if (productStore != null)
                UnitOfWork.Refresh<base_ProductStore>(productStore);

            // Add base unit in UOMCollection.
            base_UOM UOM = UnitOfWork.Get<base_UOM>(x => x.Id == salesOrderDetailModel.ProductModel.BaseUOMId);

            if (UOM != null)
            {
                salesOrderDetailModel.ProductUOMCollection.Add(new CPC.POS.Model.base_ProductUOMModel
                {
                    //ProductId = salesOrderDetailModel.ProductModel.Id,
                    UOMId = UOM.Id,
                    Name = UOM.Name,
                    QuantityOnHand = productStore != null ? productStore.QuantityOnHand : 0,
                    RegularPrice = salesOrderDetailModel.ProductModel.RegularPrice,
                    Price1 = salesOrderDetailModel.ProductModel.Price1,
                    Price2 = salesOrderDetailModel.ProductModel.Price2,
                    Price3 = salesOrderDetailModel.ProductModel.Price3,
                    Price4 = salesOrderDetailModel.ProductModel.Price4,
                    BaseUnitNumber = 1,
                    IsNew = false,
                    IsDirty = false
                });
            }

            if (productStore != null)
            {

                // Gets the remaining units.
                foreach (base_ProductUOM item in productStore.base_ProductUOM)
                {
                    UnitOfWork.Refresh<base_ProductUOM>(item);
                    salesOrderDetailModel.ProductUOMCollection.Add(new CPC.POS.Model.base_ProductUOMModel(item)
                    {
                        Name = item.base_UOM.Name,
                        IsDirty = false
                    });
                }
                if (SetPrice)
                {
                    if (!string.IsNullOrWhiteSpace(salesOrderDetailModel.ParentResource) && salesOrderDetailModel.ProductGroupItem != null)
                    {
                        //Get Product UOM Default follow product in group
                        productUOM = salesOrderDetailModel.ProductUOMCollection.FirstOrDefault(x => x.UOMId == salesOrderDetailModel.ProductGroupItem.UOMId);
                    }
                    else if (salesOrderDetailModel.ProductModel.SellUOMId.HasValue)
                    {
                        productUOM = salesOrderDetailModel.ProductUOMCollection.FirstOrDefault(x => x.UOMId == salesOrderDetailModel.ProductModel.SellUOMId);
                    }
                    else
                    {
                        productUOM = salesOrderDetailModel.ProductUOMCollection.FirstOrDefault(x => x.UOMId == salesOrderDetailModel.ProductModel.BaseUOMId);
                    }

                    if (productUOM != null)
                    {
                        salesOrderDetailModel.UOMId = productUOM.UOMId;
                        salesOrderDetailModel.UnitName = productUOM.Name;
                        salesOrderDetailModel.UOM = productUOM.Name;
                        salesOrderDetailModel.RegularPrice = productUOM.RegularPrice;
                        if (salesOrderDetailModel.RegularPrice > 0)
                            salesOrderDetailModel.SalePrice = productUOM.RegularPrice;
                    }
                }
            }
        }


        #region Support Calculate Tax
        /// <summary>
        /// Calculate Product Item with Multi Tax
        /// </summary>
        /// <param name="saleOrderModel"></param>
        /// <param name="subtotal">Total Amount(SubTotal = Qty + SalePrice)</param>
        /// <param name="valueCompare">salePrice</param>
        /// <returns></returns>
        public decimal CalcMultiTaxForItem(System.Collections.ObjectModel.ObservableCollection<CPC.POS.Model.base_SaleTaxLocationOptionModel> saleTaxOptionCollection, decimal subtotal, decimal valueCompare)
        {
            decimal taxAmount = 0;
            //Calculate Tax for saleOrderDetail
            foreach (var saleTaxLocationOptionModel in saleTaxOptionCollection)
            {
                if (!saleTaxLocationOptionModel.IsAllowAmountItemPriceRange)//Not check Allow ItemPrice Range=false
                {
                    //taxAmount += subTotal * TaxRate
                    taxAmount += subtotal * saleTaxLocationOptionModel.TaxRate / 100;
                }
                else //Check Allow ItemPriceRange = true
                {
                    if (saleTaxLocationOptionModel.PriceFrom > 0 && saleTaxLocationOptionModel.PriceTo > 0) //has Range
                    {
                        if (saleTaxLocationOptionModel.IsAllowSpecificItemPriceRange)
                        {
                            //SalePrice In Range (Ex: [10,12] subtotal =11) => (Subtotal - Min)*Taxrate
                            if (valueCompare >= saleTaxLocationOptionModel.PriceFrom && valueCompare <= saleTaxLocationOptionModel.PriceTo)
                            {
                                //taxAmount += (Subtotal - PriceFrom)* TaxRate
                                taxAmount += (subtotal - saleTaxLocationOptionModel.PriceFrom) * saleTaxLocationOptionModel.TaxRate / 100;
                            }
                            //Out Of Range grather max value (Ex: [10,12] subtotal =14) => (Max-min) * TaxRate
                            else if (valueCompare >= saleTaxLocationOptionModel.PriceTo)
                            {
                                // taxAmount += = ( PriceTo -PriceFrom)* TaxRate
                                taxAmount += (saleTaxLocationOptionModel.PriceTo - saleTaxLocationOptionModel.PriceFrom) * saleTaxLocationOptionModel.TaxRate / 100;
                            }
                            //else Out Of Range(smaller than min value)(Ex: [10,12] subtotal =9) => taxAmount =0 :  +=0

                        }
                        else
                        {
                            //SalePrice In Range (Ex: [10,12] subtotal =11)=> Subtotal * TaxRate
                            if (valueCompare >= saleTaxLocationOptionModel.PriceFrom && valueCompare <= saleTaxLocationOptionModel.PriceTo)
                            {
                                //taxAmount +=  subTotal* TaxRate

                                taxAmount += subtotal * saleTaxLocationOptionModel.TaxRate / 100;
                            }

                        }
                    }
                    else if (saleTaxLocationOptionModel.PriceFrom > 0 && saleTaxLocationOptionModel.PriceTo == 0)//Above
                    {
                        if (saleTaxLocationOptionModel.IsAllowSpecificItemPriceRange)
                        {
                            //SalePrice greather than PriceFrom (Ex: [10,~] subtotal =11)=>(Subtotal - Min)* TaxRate
                            if (valueCompare >= saleTaxLocationOptionModel.PriceFrom)
                            {
                                //taxAmount += (SubTotal - FriceFrom) * TaxRate
                                taxAmount += (subtotal - saleTaxLocationOptionModel.PriceFrom) * saleTaxLocationOptionModel.TaxRate / 100;
                            }
                            //SalePrice smaller than PriceFrom (Ex: [10,~] subtotal =9)+0
                        }
                        else
                        {
                            //SalePrice greather than PriceFrom (Ex: [10,~] subtotal =11)=>Subtotal* TaxRate
                            if (valueCompare >= saleTaxLocationOptionModel.PriceFrom)
                            {
                                //taxAmount += subtotal * TaxRate
                                taxAmount += subtotal * saleTaxLocationOptionModel.TaxRate / 100;
                            }
                            // else Subtotal Smaller than PriceFrom (Ex: [10,~] subtotal = 9) => TaxAmout +=0

                        }
                    }
                    else if (saleTaxLocationOptionModel.PriceFrom == 0 && saleTaxLocationOptionModel.PriceTo > 0) //Below
                    {
                        if (saleTaxLocationOptionModel.IsAllowSpecificItemPriceRange)
                        {
                            //Subtotal greather than PriceTo (Ex: [~,10] subtotal =11)=>Max * TaxRate
                            if (valueCompare >= saleTaxLocationOptionModel.PriceTo)
                            {

                                taxAmount += saleTaxLocationOptionModel.PriceTo * saleTaxLocationOptionModel.TaxRate / 100;
                            }
                            else//Subtotal smaller than PriceTo (Ex: [~,10] subtotal =9)=>Subtotal * TaxRate
                            {
                                taxAmount += subtotal * saleTaxLocationOptionModel.TaxRate / 100;
                            }
                        }
                        else
                        {

                            if (valueCompare < saleTaxLocationOptionModel.PriceTo)
                            //Subtotal smaller than PriceTo (Ex: [~,10] subtotal =9)=>Subtotal * TaxRate
                            {
                                taxAmount += subtotal * saleTaxLocationOptionModel.TaxRate / 100;
                            }
                            //Subtotal greather than PriceTo (Ex: [~,10] subtotal =11)=>TaxAmout +=0
                        }
                    }

                }
            }
            return taxAmount;
        }

        /// <summary>
        /// Calculate TaxPreice dependent for item. 
        /// Using for Shipping Tax & SaleOrderTax
        /// </summary>
        /// <param name="subTotal"></param>
        /// <param name="compareValue"></param>
        /// <param name="saleTaxLocationOptionModel"></param>
        /// <returns></returns>
        public decimal CalcPriceDependentItem(decimal subTotal, decimal compareValue, CPC.POS.Model.base_SaleTaxLocationOptionModel saleTaxLocationOptionModel)
        {
            decimal taxAmountResult = 0;
            if (saleTaxLocationOptionModel.IsApplyAmountOver)//Apply Sale Tax Only the amount over the unit price
            {
                if (compareValue > saleTaxLocationOptionModel.TaxCondition) //Subtotal over TaxCondition
                {
                    taxAmountResult = (subTotal - saleTaxLocationOptionModel.TaxCondition) * saleTaxLocationOptionModel.TaxRate / 100;
                    //saleOrderModel.TaxAmount = (saleOrderModel.SubTotal - saleTaxLocationOptionModel.TaxCondition) * saleTaxLocationOptionModel.TaxRate / 100;
                }
            }
            else
            {
                taxAmountResult = subTotal * saleTaxLocationOptionModel.TaxRate / 100;
                //saleOrderModel.TaxAmount = saleOrderModel.SubTotal * saleTaxLocationOptionModel.TaxRate / 100;
            }
            return taxAmountResult;
        }

        /// <summary>
        /// Calculator Tax Amount & Percent with Subtotal
        /// </summary>
        /// <param name="saleOrderModel"></param>
        public void CalcSingleTax(CPC.POS.Model.base_SaleOrderModel saleOrderModel, decimal subTotal, out decimal taxPercent, out decimal taxAmount)
        {
            if (saleOrderModel.IsTaxExemption == true)
            {
                taxAmount = 0;
                taxPercent = 0;
            }
            else
            {
                if (saleOrderModel.TaxLocationModel != null && Convert.ToInt32(saleOrderModel.TaxLocationModel.TaxCodeModel.TaxOption).Is(SalesTaxOption.Single))
                {
                    base_SaleTaxLocationOptionModel taxOptionModel = saleOrderModel.TaxLocationModel.TaxCodeModel.SaleTaxLocationOptionCollection.FirstOrDefault();
                    if (taxOptionModel != null)
                        taxPercent = taxOptionModel.TaxRate;
                    else
                        taxPercent = 0;

                    if (saleOrderModel.TaxLocationModel.TaxCodeModel.IsTaxAfterDiscount)
                        taxAmount = (subTotal - saleOrderModel.DiscountAmount) * taxPercent / 100;
                    else
                        taxAmount = subTotal * taxPercent / 100;

                }
                else
                {
                    taxAmount = 0;
                    taxPercent = 0;
                }
            }
        }



        /// <summary>
        /// Calculate Return Detail Tax 
        /// </summary>
        /// <param name="returnDetailModel"></param>
        /// <param name="saleOrderModel"></param>
        /// <returns></returns>
        public decimal CalculateReturnDetailTax(base_ResourceReturnDetailModel returnDetailModel, base_SaleOrderModel saleOrderModel)
        {
            decimal result = 0;

            if (saleOrderModel.IsTaxExemption)
            {
                result = 0;
            }
            else if (saleOrderModel.TaxLocationModel != null && saleOrderModel.TaxLocationModel.TaxCodeModel!=null)
            {
                if (Convert.ToInt32(saleOrderModel.TaxLocationModel.TaxCodeModel.TaxOption).Is((int)SalesTaxOption.Multi))
                {
                    if (!returnDetailModel.SaleOrderDetailModel.ProductModel.IsCoupon)//18/06/2013: not calculate tax for coupon
                        result = CalcMultiTaxForItem(saleOrderModel.TaxLocationModel.SaleTaxLocationOptionCollection, returnDetailModel.Amount, returnDetailModel.SaleOrderDetailModel.SalePrice);

                }
                else if (Convert.ToInt32(saleOrderModel.TaxLocationModel.TaxCodeModel.TaxOption).Is((int)SalesTaxOption.Price))
                {
                    base_SaleTaxLocationOptionModel saleTaxLocationOptionModel = saleOrderModel.TaxLocationModel.TaxCodeModel.SaleTaxLocationOptionCollection.FirstOrDefault();

                    if (returnDetailModel.SaleOrderDetailModel != null && !returnDetailModel.SaleOrderDetailModel.ProductModel.IsCoupon)
                        result = CalcPriceDependentItem(returnDetailModel.Amount, returnDetailModel.SaleOrderDetailModel.SalePrice, saleTaxLocationOptionModel);

                }
                else
                {
                    base_SaleTaxLocationOptionModel taxOptionModel = saleOrderModel.TaxLocationModel.TaxCodeModel.SaleTaxLocationOptionCollection.FirstOrDefault();
                    if (taxOptionModel != null)
                        result = returnDetailModel.Amount * taxOptionModel.TaxRate / 100;
                }
            }

            return result;
        }

        /// <summary>
        /// Calculate tax for item saleOrder Detail
        /// </summary>
        /// <param name="saleOrderDetailModel">Using for get Product,SalePrice</param>
        /// <param name="saleOrderModel">for get taxLocation</param>
        /// <param name="amount">amount of saleOrder detail will be collected tax</param>
        /// <returns></returns>
        public decimal CalculateSaleOrderDetailTax(base_SaleOrderDetailModel saleOrderDetailModel, base_SaleOrderModel saleOrderModel, decimal amount)
        {
            decimal result = 0;

            if (saleOrderModel.IsTaxExemption)
            {
                result = 0;
            }
            else if (saleOrderModel.TaxLocationModel != null)
            {
                if (Convert.ToInt32(saleOrderModel.TaxLocationModel.TaxCodeModel.TaxOption).Is((int)SalesTaxOption.Multi))
                {
                    if (!saleOrderDetailModel.ProductModel.IsCoupon)//not calculate tax for coupon
                        result = CalcMultiTaxForItem(saleOrderModel.TaxLocationModel.SaleTaxLocationOptionCollection, amount, saleOrderDetailModel.SalePrice);

                }
                else if (Convert.ToInt32(saleOrderModel.TaxLocationModel.TaxCodeModel.TaxOption).Is((int)SalesTaxOption.Price))
                {
                    base_SaleTaxLocationOptionModel saleTaxLocationOptionModel = saleOrderModel.TaxLocationModel.TaxCodeModel.SaleTaxLocationOptionCollection.FirstOrDefault();

                    if (!saleOrderDetailModel.ProductModel.IsCoupon)
                        result = CalcPriceDependentItem(amount, saleOrderDetailModel.SalePrice, saleTaxLocationOptionModel);
                }
                else
                {
                    base_SaleTaxLocationOptionModel taxOptionModel = saleOrderModel.TaxLocationModel.TaxCodeModel.SaleTaxLocationOptionCollection.FirstOrDefault();
                    if (taxOptionModel != null)
                        result = amount * taxOptionModel.TaxRate / 100;
                }
            }


            return result;
        }
        #endregion


        #region Discounts


        /// <summary>
        /// Using for not apply discount to saleorderdetail
        /// </summary>
        /// <param name="saleOderDetailModel"></param>
        public void ResetProductDiscount(base_SaleOrderModel saleOrderModel, base_SaleOrderDetailModel saleOderDetailModel)
        {
            saleOderDetailModel.DiscountPercent = 0;
            saleOderDetailModel.UnitDiscount = Math.Round(saleOderDetailModel.RegularPrice * saleOderDetailModel.DiscountPercent, 0);
            saleOderDetailModel.SalePrice = saleOderDetailModel.RegularPrice;
            saleOderDetailModel.DiscountAmount = saleOderDetailModel.SalePrice;
            saleOderDetailModel.TotalDiscount = Math.Round(saleOderDetailModel.UnitDiscount * saleOderDetailModel.Quantity, 0);
            HandleOnSaleOrderDetailModel(saleOrderModel, saleOderDetailModel);
        }

        /// <summary>
        /// Handle what relation with saleoder detail
        /// <para>Check Need to show row detail</para>
        /// <para>Calculate Subtotal</para>
        /// <para>Calculate Onhand store</para>
        /// </summary>
        /// <param name="replaceItem"></param>
        public void HandleOnSaleOrderDetailModel(base_SaleOrderModel saleOrderModel, base_SaleOrderDetailModel saleOrderDetailModel)
        {
            CheckToShowDatagridRowDetail(saleOrderDetailModel);
            saleOrderDetailModel.CalcSubTotal();
            saleOrderDetailModel.CalcDueQty();
            saleOrderDetailModel.CalUnfill();
            CalcOnHandStore(saleOrderModel, saleOrderDetailModel);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="saleOrderDetailModel"></param>
        public void CalcOnHandStore(base_SaleOrderModel saleOrderModel, base_SaleOrderDetailModel saleOrderDetailModel)
        {
            if (Define.CONFIGURATION.IsAllowNegativeStore.HasValue && !Define.CONFIGURATION.IsAllowNegativeStore.Value && !saleOrderDetailModel.ProductModel.IsCoupon)
            {
                decimal totalQuantityBaseUom = 0;
                //Sum all of products in salesOrderDetail with baseUnit to "totalQuantityBaseUom"
                foreach (base_SaleOrderDetailModel saleOrderDetail in saleOrderModel.SaleOrderDetailCollection.Where(x => x.ProductResource.Equals(saleOrderDetailModel.ProductResource)))
                {
                    decimal quantityBaseUnit = saleOrderDetail.ProductUOMCollection.Single(x => x.UOMId.Equals(saleOrderDetail.UOMId)).BaseUnitNumber;
                    totalQuantityBaseUom += quantityBaseUnit * saleOrderDetail.DueQty;
                }
                decimal quantityOnHand = GetUpdateProduct(saleOrderModel.StoreCode, saleOrderDetailModel.ProductModel);

                saleOrderDetailModel.OnHandQty = quantityOnHand;
                if (totalQuantityBaseUom > quantityOnHand)
                    saleOrderDetailModel.IsQuantityAccepted = false;
                else
                    saleOrderDetailModel.IsQuantityAccepted = true;
            }
            else
                saleOrderDetailModel.IsQuantityAccepted = true;

            if (saleOrderModel.SaleOrderDetailCollection != null)
                saleOrderModel.IsHiddenErrorColumn = !saleOrderModel.SaleOrderDetailCollection.Any(x => !x.IsQuantityAccepted);
        }

        /// <summary>
        /// Calculate product discount
        /// <remarks>Using for auto apply discount or cashier choice</remarks>
        /// </summary>
        /// <param name="saleOrderDetailModel"></param>
        /// <param name="promotionModel"></param>
        public void CalcProductDiscount(base_SaleOrderModel saleOrderModel, base_SaleOrderDetailModel salesOrderDetailModel)
        {
            if (salesOrderDetailModel.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group) && (salesOrderDetailModel.RegularPrice < salesOrderDetailModel.SalePrice || salesOrderDetailModel.ProductModel.IsCoupon))
                return;

            //group Product relation with saleoderDetailModel.product & Promotion id
            var saleOrderDetailGroup = saleOrderModel.SaleOrderDetailCollection.Where(x => x.ProductResource.Equals(salesOrderDetailModel.ProductResource) && !x.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group) && string.IsNullOrWhiteSpace(salesOrderDetailModel.ParentResource)).GroupBy(x => x.PromotionId);
            foreach (var saleOrderDetailCollection in saleOrderDetailGroup)
            {
                int promotionId = saleOrderDetailCollection.Key.Value;
                base_Promotion promotion = UnitOfWork.Get<base_Promotion>(x => x.Id.Equals(promotionId));

                if (promotion == null)
                    continue;

                //Sum the same of Product & all of them more than quantity of Promotion
                decimal sumOfItem = saleOrderDetailCollection.Where(x => string.IsNullOrWhiteSpace(x.ParentResource) && !x.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group) && x.UOMId.Equals(salesOrderDetailModel.ProductModel.BaseUOMId) && !x.IsManual).Sum(x => x.Quantity);

                switch (promotion.PromotionTypeId)
                {
                    case 1: //% off
                        foreach (base_SaleOrderDetailModel saleOrderDetailModel in saleOrderDetailCollection)
                        {
                            if (IsAcceptedPromotion(promotion, saleOrderModel, saleOrderDetailModel))
                            {
                                if (saleOrderDetailModel.UOMId.Equals(saleOrderDetailModel.ProductModel.BaseUOMId) && !saleOrderDetailModel.IsManual)
                                {
                                    //saleOrderDetailModel.IsManual = false;
                                    //so tien giảm trên 1 đơn vi
                                    saleOrderDetailModel.UnitDiscount = (saleOrderDetailModel.RegularPrice * promotion.TakeOff / 100);
                                    saleOrderDetailModel.DiscountPercent = promotion.TakeOff;
                                    //So tien dc giam trên 1 đợn vi
                                    saleOrderDetailModel.DiscountAmount = saleOrderDetailModel.RegularPrice - saleOrderDetailModel.UnitDiscount;
                                    saleOrderDetailModel.SalePrice = saleOrderDetailModel.DiscountAmount;
                                    //Tổng số tiền dc giảm trên tổng số sản phẩm
                                    saleOrderDetailModel.TotalDiscount = saleOrderDetailModel.UnitDiscount * saleOrderDetailModel.Quantity;
                                    HandleOnSaleOrderDetailModel(saleOrderModel, saleOrderDetailModel);
                                }
                            }
                            else
                            {
                                if (!saleOrderDetailModel.IsManual)
                                    ResetProductDiscount(saleOrderModel, saleOrderDetailModel);
                            }

                        }
                        break;
                    case 2://$ off
                        foreach (base_SaleOrderDetailModel saleOrderDetailModel in saleOrderDetailCollection)
                        {
                            if (IsAcceptedPromotion(promotion, saleOrderModel, saleOrderDetailModel))
                            {
                                if (saleOrderDetailModel.UOMId.Equals(saleOrderDetailModel.ProductModel.BaseUOMId) && !saleOrderDetailModel.IsManual)
                                {
                                    if (saleOrderDetailModel.RegularPrice > promotion.TakeOff)
                                    {
                                        //saleOrderDetailModel.PromotionId = promotionModel.Id;
                                        //saleOrderDetailModel.IsManual = false;
                                        //so tien giảm trên 1 đơn vi
                                        saleOrderDetailModel.UnitDiscount = promotion.TakeOff;
                                        //So tien dc giam trên 1 đợn vi
                                        saleOrderDetailModel.DiscountAmount = saleOrderDetailModel.RegularPrice - saleOrderDetailModel.UnitDiscount;
                                        saleOrderDetailModel.SalePrice = saleOrderDetailModel.DiscountAmount;
                                        saleOrderDetailModel.DiscountPercent = Math.Round((saleOrderDetailModel.RegularPrice - saleOrderDetailModel.SalePrice) / saleOrderDetailModel.RegularPrice * 100, 2);
                                        //Tổng số tiền dc giảm trên tổng số sản phẩm
                                        saleOrderDetailModel.TotalDiscount = saleOrderDetailModel.UnitDiscount * saleOrderDetailModel.Quantity;
                                        HandleOnSaleOrderDetailModel(saleOrderModel, saleOrderDetailModel);
                                    }
                                    else
                                        ResetProductDiscount(saleOrderModel, saleOrderDetailModel);
                                }
                            }
                            else
                            {
                                if (!saleOrderDetailModel.IsManual)
                                    ResetProductDiscount(saleOrderModel, saleOrderDetailModel);
                            }
                        }
                        break;
                    case 3://Buy X for $Y
                        #region Buy x for $Y
                        decimal sumOfMoney = saleOrderDetailCollection.Where(x => string.IsNullOrWhiteSpace(x.ParentResource) && !x.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group) && x.UOMId.Equals(salesOrderDetailModel.ProductModel.BaseUOMId) && !x.IsManual).Sum(x => x.RegularPrice * x.Quantity);
                        if (IsAcceptedPromotion(promotion, saleOrderModel, salesOrderDetailModel) && sumOfItem >= promotion.BuyingQty && salesOrderDetailModel.RegularPrice >= promotion.TakeOff)
                        {
                            if (promotion.IsApplyToAboveQuantities) //apply discount when user buy more than "promotionModel.BuyingQty" 
                            {
                                foreach (base_SaleOrderDetailModel saleOrderDetailModel in saleOrderDetailCollection.Where(x => string.IsNullOrWhiteSpace(x.ParentResource) && !x.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group)))
                                {
                                    if (saleOrderDetailModel.UOMId == saleOrderDetailModel.ProductModel.BaseUOMId && !saleOrderDetailModel.IsManual)//apply only base Units
                                    {
                                        //saleOrderDetailModel.PromotionId = promotionModel.Id;
                                        //saleOrderDetailModel.IsManual = false;
                                        //////Calculate Discount
                                        //so tien giảm trên 1 đơn vi
                                        saleOrderDetailModel.UnitDiscount = Math.Round(saleOrderDetailModel.RegularPrice - promotion.TakeOff, 2);
                                        saleOrderDetailModel.DiscountPercent = saleOrderDetailModel.UnitDiscount / saleOrderDetailModel.RegularPrice;

                                        //Tổng số tiền dc giảm trên tổng số sản phẩm
                                        saleOrderDetailModel.TotalDiscount = Math.Round(saleOrderDetailModel.UnitDiscount * saleOrderDetailModel.Quantity, 2);

                                        //So tien dc giam trên 1 đợn vi
                                        saleOrderDetailModel.DiscountAmount = saleOrderDetailModel.RegularPrice - saleOrderDetailModel.UnitDiscount;
                                        saleOrderDetailModel.SalePrice = saleOrderDetailModel.DiscountAmount;
                                        saleOrderDetailModel.CalcSubTotal();
                                        saleOrderDetailModel.CalcDueQty();
                                        saleOrderDetailModel.CalUnfill();
                                    }
                                }
                            }
                            else //IsApplyToAboveQuantities=false && seperate multi part with  promotionModel.BuyingQty
                            {
                                decimal numberOfItemDiscount = sumOfItem - (sumOfItem % promotion.BuyingQty);

                                foreach (base_SaleOrderDetailModel saleOrderDetailModel in saleOrderDetailCollection.Where(x => string.IsNullOrWhiteSpace(x.ParentResource) && !x.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group)))
                                {
                                    decimal quantityRemain = saleOrderDetailModel.Quantity;//back up first quantity when item remove will be lost
                                    if (numberOfItemDiscount > 0)
                                    {
                                        if (saleOrderDetailModel.UOMId != saleOrderDetailModel.ProductModel.BaseUOMId || saleOrderDetailModel.Quantity == 0 || saleOrderDetailModel.IsManual)
                                        {
                                            if (!saleOrderDetailModel.IsManual) // not reset discount is manual
                                                ResetProductDiscount(saleOrderModel, saleOrderDetailModel);
                                            continue;
                                        }

                                        if (saleOrderDetailModel.Quantity <= numberOfItemDiscount)
                                        {
                                            //saleOrderDetailModel.PromotionId = promotionModel.Id;
                                            //saleOrderDetailModel.IsManual = false;
                                            //////Calculate Discount
                                            //so tien giảm trên 1 đơn vi
                                            saleOrderDetailModel.UnitDiscount = Math.Round(Math.Round(saleOrderDetailModel.RegularPrice - promotion.TakeOff, 2) - 0.01M, MidpointRounding.AwayFromZero);
                                            saleOrderDetailModel.DiscountPercent = Math.Round(saleOrderDetailModel.UnitDiscount * 100 / saleOrderDetailModel.RegularPrice, 2);

                                            //Tổng số tiền dc giảm trên tổng số sản phẩm
                                            saleOrderDetailModel.TotalDiscount = Math.Round(saleOrderDetailModel.UnitDiscount * saleOrderDetailModel.Quantity, 2);

                                            //So tien dc giam trên 1 đợn vi
                                            saleOrderDetailModel.DiscountAmount = saleOrderDetailModel.RegularPrice - saleOrderDetailModel.UnitDiscount;
                                            saleOrderDetailModel.SalePrice = saleOrderDetailModel.DiscountAmount;
                                            HandleOnSaleOrderDetailModel(saleOrderModel, saleOrderDetailModel);
                                        }
                                        else
                                        {
                                            base_SaleOrderDetailModel replaceItem = CopyNewSaleOrderDetail(saleOrderDetailModel);
                                            //replaceItem.PromotionId = promotionModel.Id;
                                            //replaceItem.IsManual = false;
                                            replaceItem.Quantity = numberOfItemDiscount;
                                            //////Calculate Discount
                                            //so tien giảm trên 1 đơn vi
                                            replaceItem.UnitDiscount = Math.Round(replaceItem.RegularPrice - promotion.TakeOff, 2);
                                            replaceItem.DiscountPercent = Math.Round(Math.Round(replaceItem.UnitDiscount * 100 / replaceItem.RegularPrice, 2) - 0.01M, MidpointRounding.AwayFromZero);
                                            //Math.Round(replaceItem.UnitDiscount / replaceItem.RegularPrice); ;

                                            //Tổng số tiền dc giảm trên tổng số sản phẩm
                                            replaceItem.TotalDiscount = Math.Round(replaceItem.UnitDiscount * replaceItem.Quantity, 2);

                                            //So tien dc giam trên 1 đợn vi
                                            replaceItem.DiscountAmount = replaceItem.RegularPrice - replaceItem.UnitDiscount;
                                            replaceItem.SalePrice = replaceItem.DiscountAmount;

                                            //Set Serial
                                            if (!string.IsNullOrWhiteSpace(replaceItem.SerialTracking) && replaceItem.ProductModel.IsSerialTracking)
                                            {
                                                IEnumerable<string> remainSerial = replaceItem.SerialTracking.Split(',').Take((int)replaceItem.Quantity);
                                                replaceItem.SerialTracking = string.Join(", ", remainSerial);
                                            }

                                            HandleOnSaleOrderDetailModel(saleOrderModel, replaceItem);


                                            var deleteItem = saleOrderModel.SaleOrderDetailCollection.SingleOrDefault(x => x.Resource == saleOrderDetailModel.Resource);
                                            if (deleteItem != null)
                                            {
                                                saleOrderModel.SaleOrderDetailCollection.Remove(deleteItem);
                                            }
                                            saleOrderModel.SaleOrderDetailCollection.Add(replaceItem);
                                            decimal remainItem = quantityRemain - numberOfItemDiscount;
                                            if (remainItem > 0)
                                            {
                                                base_SaleOrderDetailModel remainSaleOrderDetail = CopyNewSaleOrderDetail(saleOrderDetailModel);
                                                //remainSaleOrderDetail.PromotionId = promotionModel.Id;
                                                //remainSaleOrderDetail.IsManual = false;
                                                remainSaleOrderDetail.Quantity = remainItem;
                                                //Reset Discount
                                                remainSaleOrderDetail.DiscountPercent = 0;
                                                remainSaleOrderDetail.UnitDiscount = Math.Round(remainSaleOrderDetail.RegularPrice * remainSaleOrderDetail.DiscountPercent, 0);
                                                remainSaleOrderDetail.SalePrice = remainSaleOrderDetail.RegularPrice;
                                                remainSaleOrderDetail.DiscountAmount = remainSaleOrderDetail.SalePrice;
                                                remainSaleOrderDetail.TotalDiscount = Math.Round(remainSaleOrderDetail.UnitDiscount * remainSaleOrderDetail.Quantity, 0);
                                                if (!string.IsNullOrWhiteSpace(remainSaleOrderDetail.SerialTracking) && saleOrderDetailModel.ProductModel.IsSerialTracking)
                                                {
                                                    int skipItem = (int)replaceItem.Quantity;
                                                    IEnumerable<string> remainSerial = remainSaleOrderDetail.SerialTracking.Split(',').Skip(skipItem).Take((int)remainSaleOrderDetail.Quantity);
                                                    remainSaleOrderDetail.SerialTracking = string.Join(", ", remainSerial);
                                                }

                                                HandleOnSaleOrderDetailModel(saleOrderModel, remainSaleOrderDetail);

                                                saleOrderModel.SaleOrderDetailCollection.Add(remainSaleOrderDetail);
                                            }
                                        }
                                        numberOfItemDiscount -= quantityRemain;
                                    }
                                    else
                                    {
                                        if (!saleOrderDetailModel.IsManual)
                                            ResetProductDiscount(saleOrderModel, saleOrderDetailModel);
                                    }

                                }
                            }
                        }
                        else //! (sumOfItem >= promotionModel.BuyingQty && salesOrderDetailModel.RegularPrice >= promotionModel.TakeOff)
                        {
                            foreach (base_SaleOrderDetailModel saleOrderDetailModel in saleOrderDetailCollection.Where(x => !x.IsManual))
                                ResetProductDiscount(saleOrderModel, saleOrderDetailModel);
                        }
                        #endregion
                        break;
                    case 4:
                        #region Buy X And Get Y % Off
                        if (IsAcceptedPromotion(promotion, saleOrderModel, salesOrderDetailModel) && sumOfItem >= promotion.BuyingQty)
                        {
                            if (promotion.IsApplyToAboveQuantities)
                            {
                                foreach (base_SaleOrderDetailModel saleOrderDetailModel in saleOrderDetailCollection.Where(x => string.IsNullOrWhiteSpace(x.ParentResource) && !x.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group)))
                                {
                                    if (saleOrderDetailModel.UOMId == saleOrderDetailModel.ProductModel.BaseUOMId && !saleOrderDetailModel.IsManual)//apply only base Units
                                    {
                                        //////Calculate Discount
                                        //so tien giảm trên 1 đơn vi
                                        saleOrderDetailModel.UnitDiscount = saleOrderDetailModel.RegularPrice * promotion.TakeOff / 100;
                                        saleOrderDetailModel.DiscountPercent = promotion.TakeOff;

                                        //Tổng số tiền dc giảm trên tổng số sản phẩm
                                        saleOrderDetailModel.TotalDiscount = saleOrderDetailModel.UnitDiscount * saleOrderDetailModel.Quantity;

                                        //So tien dc giam trên 1 đợn vi
                                        saleOrderDetailModel.DiscountAmount = saleOrderDetailModel.RegularPrice - saleOrderDetailModel.UnitDiscount;
                                        saleOrderDetailModel.SalePrice = saleOrderDetailModel.DiscountAmount;
                                        CheckToShowDatagridRowDetail(saleOrderDetailModel);
                                        saleOrderDetailModel.CalcSubTotal();
                                        saleOrderDetailModel.CalcDueQty();
                                        saleOrderDetailModel.CalUnfill();

                                    }
                                }
                            }
                            else//Seperate multi item
                            {
                                decimal numberOfItemDiscount = sumOfItem - (sumOfItem % promotion.BuyingQty);
                                foreach (base_SaleOrderDetailModel saleOrderDetailModel in saleOrderDetailCollection.Where(x => string.IsNullOrWhiteSpace(x.ParentResource) && !x.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group)))
                                {
                                    decimal quantityRemain = saleOrderDetailModel.Quantity;
                                    if (numberOfItemDiscount > 0)
                                    {
                                        if (saleOrderDetailModel.UOMId != saleOrderDetailModel.ProductModel.BaseUOMId || saleOrderDetailModel.Quantity == 0 || saleOrderDetailModel.IsManual)
                                        {
                                            if (!saleOrderDetailModel.IsManual) // not reset discount is manual
                                                ResetProductDiscount(saleOrderModel, saleOrderDetailModel);
                                            continue;
                                        }

                                        if (saleOrderDetailModel.Quantity <= numberOfItemDiscount) //update salePrice discount for this item
                                        {

                                            //////Calculate Discount
                                            //so tien giảm trên 1 đơn vi
                                            saleOrderDetailModel.UnitDiscount = saleOrderDetailModel.RegularPrice * promotion.TakeOff / 100;
                                            saleOrderDetailModel.DiscountPercent = promotion.TakeOff;

                                            //Tổng số tiền dc giảm trên tổng số sản phẩm
                                            saleOrderDetailModel.TotalDiscount = Math.Round(saleOrderDetailModel.UnitDiscount * saleOrderDetailModel.Quantity, 2);

                                            //So tien dc giam trên 1 đợn vi
                                            saleOrderDetailModel.DiscountAmount = saleOrderDetailModel.RegularPrice - saleOrderDetailModel.UnitDiscount;
                                            saleOrderDetailModel.SalePrice = saleOrderDetailModel.DiscountAmount;

                                            HandleOnSaleOrderDetailModel(saleOrderModel, saleOrderDetailModel);
                                            numberOfItemDiscount -= quantityRemain;

                                        }
                                        else //Separate multi item to apply discount
                                        {
                                            base_SaleOrderDetailModel replaceItem = CopyNewSaleOrderDetail(saleOrderDetailModel).Clone();
                                            replaceItem.Quantity = numberOfItemDiscount;
                                            //////Calculate Discount
                                            //so tien giảm trên 1 đơn vi
                                            replaceItem.UnitDiscount = Math.Round(replaceItem.RegularPrice * promotion.TakeOff / 100, 1);
                                            replaceItem.DiscountPercent = promotion.TakeOff;

                                            //Tổng số tiền dc giảm trên tổng số sản phẩm
                                            replaceItem.TotalDiscount = Math.Round(replaceItem.UnitDiscount * replaceItem.Quantity, 1);

                                            //So tien dc giam trên 1 đợn vi
                                            replaceItem.DiscountAmount = replaceItem.RegularPrice - replaceItem.UnitDiscount;
                                            replaceItem.SalePrice = replaceItem.DiscountAmount;

                                            //Set Serial
                                            if (!string.IsNullOrWhiteSpace(replaceItem.SerialTracking) && replaceItem.ProductModel.IsSerialTracking)
                                            {
                                                IEnumerable<string> remainSerial = replaceItem.SerialTracking.Split(',').Take((int)replaceItem.Quantity);
                                                replaceItem.SerialTracking = string.Join(", ", remainSerial);
                                            }

                                            var deleteItem = saleOrderModel.SaleOrderDetailCollection.SingleOrDefault(x => x.Resource == saleOrderDetailModel.Resource);
                                            if (deleteItem != null)
                                            {

                                                saleOrderModel.SaleOrderDetailCollection.Remove(deleteItem);
                                            }
                                            HandleOnSaleOrderDetailModel(saleOrderModel, replaceItem);
                                            saleOrderModel.SaleOrderDetailCollection.Add(replaceItem);
                                            decimal remainItem = quantityRemain - numberOfItemDiscount;
                                            if (remainItem > 0)
                                            {
                                                base_SaleOrderDetailModel remainSaleOrderDetail = CopyNewSaleOrderDetail(saleOrderDetailModel);
                                                remainSaleOrderDetail.Quantity = remainItem;
                                                //Reset Discount
                                                remainSaleOrderDetail.DiscountPercent = 0;
                                                remainSaleOrderDetail.UnitDiscount = Math.Round(remainSaleOrderDetail.RegularPrice * remainSaleOrderDetail.DiscountPercent, 0);
                                                remainSaleOrderDetail.SalePrice = remainSaleOrderDetail.RegularPrice;
                                                remainSaleOrderDetail.DiscountAmount = remainSaleOrderDetail.SalePrice;
                                                remainSaleOrderDetail.TotalDiscount = Math.Round(remainSaleOrderDetail.UnitDiscount * remainSaleOrderDetail.Quantity, 0);

                                                if (!string.IsNullOrWhiteSpace(remainSaleOrderDetail.SerialTracking) && saleOrderDetailModel.ProductModel.IsSerialTracking)
                                                {
                                                    int skipItem = (int)replaceItem.Quantity;
                                                    IEnumerable<string> remainSerial = remainSaleOrderDetail.SerialTracking.Split(',').Skip(skipItem).Take((int)remainSaleOrderDetail.Quantity);
                                                    remainSaleOrderDetail.SerialTracking = string.Join(", ", remainSerial);
                                                }
                                                HandleOnSaleOrderDetailModel(saleOrderModel, remainSaleOrderDetail);


                                                saleOrderModel.SaleOrderDetailCollection.Add(remainSaleOrderDetail);
                                            }
                                            numberOfItemDiscount -= quantityRemain;
                                        }
                                    }
                                    else // Item not apply discount (not in number of item accecpt apply)
                                    {
                                        if (!salesOrderDetailModel.IsManual)
                                            ResetProductDiscount(saleOrderModel, saleOrderDetailModel);
                                    }
                                }
                            }
                        }
                        else
                        {
                            foreach (base_SaleOrderDetailModel saleOrderDetailModel in saleOrderDetailCollection.Where(x => !x.IsManual))
                                ResetProductDiscount(saleOrderModel, saleOrderDetailModel);
                        }
                        #endregion
                        break;
                    case 5://Coupon
                        break;
                }
            }
        }
        #endregion


        #region Update Value Methods

        /// <summary>
        /// Get Product From server
        /// </summary>
        /// <param name="productModel"></param>
        /// <returns></returns>
        public decimal GetUpdateProduct(int storeCode, base_ProductModel productModel)
        {
            decimal quantityOnHand = 0;
            decimal quantityOnCustomer = 0;

            if (!productModel.ItemTypeId.Equals((short)ItemTypes.Group))//Product is not product Group(ProductGroup not stockable)
            {
                base_Product productQtyOnHand = UnitOfWork.Get<base_Product>(x => x.Id.Equals(productModel.Id));

                base_ProductStore productStore = UnitOfWork.Get<base_ProductStore>(x => x.ProductId.Equals(productModel.Id) && x.StoreCode.Equals(storeCode));
                if (productStore != null)
                    quantityOnCustomer = productStore.QuantityOnCustomer;

                if (productQtyOnHand != null)
                {
                    //Update Onhand Store
                    productModel.OnHandStore1 = productQtyOnHand.OnHandStore1;
                    productModel.OnHandStore2 = productQtyOnHand.OnHandStore2;
                    productModel.OnHandStore3 = productQtyOnHand.OnHandStore3;
                    productModel.OnHandStore4 = productQtyOnHand.OnHandStore4;
                    productModel.OnHandStore5 = productQtyOnHand.OnHandStore5;
                    productModel.OnHandStore6 = productQtyOnHand.OnHandStore6;
                    productModel.OnHandStore7 = productQtyOnHand.OnHandStore7;
                    productModel.OnHandStore8 = productQtyOnHand.OnHandStore8;
                    productModel.OnHandStore9 = productQtyOnHand.OnHandStore9;
                    productModel.OnHandStore10 = productQtyOnHand.OnHandStore10;
                    productModel.QuantityOnHand = productQtyOnHand.QuantityOnHand;

                    switch (storeCode)
                    {
                        case 0:
                            quantityOnHand = productQtyOnHand.OnHandStore1;
                            break;
                        case 1:
                            quantityOnHand = productQtyOnHand.OnHandStore2;
                            break;
                        case 2:
                            quantityOnHand = productQtyOnHand.OnHandStore3;
                            break;
                        case 3:
                            quantityOnHand = productQtyOnHand.OnHandStore4;
                            break;
                        case 4:
                            quantityOnHand = productQtyOnHand.OnHandStore5;
                            break;
                        case 5:
                            quantityOnHand = productQtyOnHand.OnHandStore6;
                            break;
                        case 6:
                            quantityOnHand = productQtyOnHand.OnHandStore7;
                            break;
                        case 7:
                            quantityOnHand = productQtyOnHand.OnHandStore8;
                            break;
                        case 8:
                            quantityOnHand = productQtyOnHand.OnHandStore9;
                            break;
                        case 9:
                            quantityOnHand = productQtyOnHand.OnHandStore10;
                            break;

                        default:
                            break;
                    }
                }
            }
            return quantityOnHand - quantityOnCustomer;
        }

        /// <summary>
        /// Get Product UOM of Product In group
        /// </summary>
        /// <param name="productGroup"></param>
        /// <returns></returns>
        public base_ProductUOM GetProductUomOfProductInGroup(int storeCode, base_ProductGroup productGroup)
        {
            //Get Product From ProductCollection (child product)
            base_Product productInGroup = UnitOfWork.Get<base_Product>(x => x.Id.Equals(productGroup.base_Product.Id));
            //Get Unit Of Product

            base_ProductUOM productGroupUOM = null;
            base_ProductStore productStore;
            if (productInGroup != null)
            {
                productStore = productInGroup.base_ProductStore.SingleOrDefault(x => x.StoreCode.Equals(storeCode));

                //Check ProductInGroup with default uom is a base Uom?
                if (productGroup.UOMId.Equals(productInGroup.BaseUOMId))
                {
                    base_UOM UOM = UnitOfWork.Get<base_UOM>(x => x.Id == productInGroup.BaseUOMId);
                    productGroupUOM = new base_ProductUOM()
                    {
                        BaseUnitNumber = 1,
                        QuantityOnHand = productStore != null ? productStore.QuantityOnHand : 0,
                    };
                }
                else
                {
                    //Get product UOM with default product Item group
                    productGroupUOM = productStore.base_ProductUOM.SingleOrDefault(x => x.UOMId.Equals(productGroup.UOMId));
                }
            }

            return productGroupUOM;
        }


        /// <summary>
        /// Update QuantityOnCustomer 
        /// <para>Need to call respository commit outside this methods</para>
        /// </summary>
        /// <param name="saleOrderDetailModel">using for get UOM & baseUnitNumber</param>
        /// <param name="storeCode">Store need to add or subtract</param>
        /// <param name="productQuantity">Quantity is added or subtracted</param>
        /// <param name="Inscrease">true : added ; false : subtract</param>
        /// 
        public void UpdateCustomerQuantityChanged(base_SaleOrderDetailModel saleOrderDetailModel, int storeCode)
        {
            if (saleOrderDetailModel.ProductModel.IsCoupon || saleOrderDetailModel.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group))
                return;

            base_ProductRepository productRepository = new base_ProductRepository();
            //Check Quantity Or Unit changed => subtract or add quantity oncustomer
            base_ProductUOMModel unitModel = saleOrderDetailModel.ProductUOMCollection.SingleOrDefault(x => x.UOMId.Equals(saleOrderDetailModel.UOMId));
            decimal baseUnitNumber = unitModel.BaseUnitNumber;
            decimal newQuantity = saleOrderDetailModel.Quantity * baseUnitNumber;
            if (unitModel != null)
            {
                base_ProductUOMModel oldUnitModel = saleOrderDetailModel.ProductUOMCollection.SingleOrDefault(x => x.UOMId.Equals(saleOrderDetailModel.base_SaleOrderDetail.UOMId));
                if (oldUnitModel != null)
                {
                    decimal oldQty = saleOrderDetailModel.base_SaleOrderDetail.Quantity * oldUnitModel.BaseUnitNumber;
                    if (oldQty != newQuantity)
                    {
                        decimal quantity = newQuantity - oldQty;
                        productRepository.UpdateQuantityOnCustomer(saleOrderDetailModel.ProductResource, storeCode, quantity);
                        productRepository.Commit();
                    }
                }
            }


        }

        /// <summary>
        /// Update QuantityOnCustomer 
        /// <para>Need to call respository commit outside this methods</para>
        /// </summary>
        /// <param name="saleOrderDetailModel">using for get UOM & baseUnitNumber</param>
        /// <param name="storeCode">Store need to add or subtract</param>
        /// <param name="productQuantity">Quantity is added or subtracted</param>
        /// <param name="Inscrease">true : added ; false : subtract</param>
        /// 
        public void UpdateCustomerQuantity(base_SaleOrderDetailModel saleOrderDetailModel, int storeCode, decimal productQuantity, bool Inscrease = true)
        {
            if (saleOrderDetailModel.ProductModel == null || saleOrderDetailModel.ProductModel.IsCoupon || saleOrderDetailModel.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group))
                return;

            //Is Not A Product in Group
            base_ProductRepository productRepository = new base_ProductRepository();
            base_ProductUOMModel unitModel = saleOrderDetailModel.ProductUOMCollection.SingleOrDefault(x => x.UOMId.Equals(saleOrderDetailModel.UOMId));
            if (unitModel != null)
            {
                decimal baseUnitNumber = unitModel.BaseUnitNumber;
                decimal quantity = productQuantity * baseUnitNumber;
                if (!Inscrease)
                    quantity *= -1;
                productRepository.UpdateQuantityOnCustomer(saleOrderDetailModel.ProductResource, storeCode, quantity);
                productRepository.Commit();
            }


        }
        #endregion



        #endregion

        #region Util Saleorder
        /// <summary>
        /// Generate Barcode with EAN13 Format (13 digit numberic)
        /// </summary>
        /// <param name="idCard">Require 12 digit Numberic</param>
        /// <param name="saleOrderModel">Using Update SOCardImg & SOCard after generate barcode</param>
        /// <returns></returns>
        public void SOCardGenerate(base_SaleOrderModel saleOrderModel, string sOCard)
        {
            try
            {
                using (BarcodeLib.Barcode barCode = new BarcodeLib.Barcode())
                {
                    barCode.IncludeLabel = true;
                    barCode.Encode(BarcodeLib.TYPE.EAN13, sOCard, 200, 70);
                    saleOrderModel.SOCardImg = barCode.Encoded_Image_Bytes;
                    saleOrderModel.SOCard = barCode.RawData;
                }
            }
            catch
            {
            }
        }


        /// <summary>
        /// Create new SaleOrderDetail from the same SaleOrderDetail
        /// </summary>
        /// <param name="saleOrderdetail"></param>
        /// <returns></returns>
        private base_SaleOrderDetailModel CopyNewSaleOrderDetail(base_SaleOrderDetailModel saleOrderdetail)
        {
            base_SaleOrderDetailModel newSaleOrderDetail = new base_SaleOrderDetailModel();
            newSaleOrderDetail.Resource = Guid.NewGuid();
            newSaleOrderDetail.ProductModel = saleOrderdetail.ProductModel;
            newSaleOrderDetail.ProductResource = saleOrderdetail.ProductResource;
            newSaleOrderDetail.ItemSize = saleOrderdetail.ItemSize;
            newSaleOrderDetail.ItemAtribute = saleOrderdetail.ItemAtribute;
            newSaleOrderDetail.ItemCode = saleOrderdetail.ItemCode;
            newSaleOrderDetail.ItemName = saleOrderdetail.ItemName;
            newSaleOrderDetail.SerialTracking = saleOrderdetail.SerialTracking;
            //SEt UOM
            newSaleOrderDetail.UOMId = saleOrderdetail.UOMId;
            newSaleOrderDetail.UnitName = saleOrderdetail.UnitName;
            newSaleOrderDetail.UOM = saleOrderdetail.UOM;
            newSaleOrderDetail.PromotionId = saleOrderdetail.PromotionId;
            newSaleOrderDetail.RegularPrice = saleOrderdetail.RegularPrice;
            newSaleOrderDetail.OnHandQty = saleOrderdetail.OnHandQty;
            newSaleOrderDetail.SalePrice = saleOrderdetail.SalePrice;
            newSaleOrderDetail.ProductUOMCollection = saleOrderdetail.ProductUOMCollection;
            newSaleOrderDetail.Quantity = 1;
            newSaleOrderDetail.CalcSubTotal();
            return newSaleOrderDetail;
        }


        /// <summary>
        /// Accepted Promotion
        /// </summary>
        /// <param name="promotionModel"></param>
        /// <param name="saleOrderDetailModel"></param>
        /// <returns></returns>
        private bool IsAcceptedPromotion(base_Promotion promotion, base_SaleOrderModel saleOrderModel, base_SaleOrderDetailModel saleOrderDetailModel)
        {
            bool result = true;
            if (promotion == null)
                return false;

            if (promotion.AffectDiscount == 0)//All Item
            {
                result = true;
            }
            else if (promotion.AffectDiscount == 1)//All Item Category
            {
                result = saleOrderDetailModel.ProductModel.ProductCategoryId == promotion.CategoryId;
            }
            else if (promotion.AffectDiscount == 2)//All item Vendor
            {
                result = saleOrderDetailModel.ProductModel.VendorId == promotion.VendorId;
            }
            else if (promotion.AffectDiscount == 3)//Custom 
            {
                result = promotion.base_PromotionAffect.Any(x => x.Id == saleOrderDetailModel.ProductModel.Id);
            }
            return result && Convert.ToInt32(saleOrderModel.PriceSchemaId).In(promotion.PriceSchemaRange.Value) && !saleOrderDetailModel.ProductModel.ItemTypeId.Equals((short)ItemTypes.Group) && string.IsNullOrWhiteSpace(saleOrderDetailModel.ParentResource);
        }
        #endregion

        #endregion
    }
}

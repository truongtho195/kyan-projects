//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using CPC.Helper;
using CPC.POS.Database;
using CPC.Toolkit.Base;
using System.Xml.Serialization;

namespace CPC.POS.Model
{
    /// <summary>
    /// Model for table tims_TimeLog
    /// </summary>
    [Serializable]
    public partial class tims_TimeLogModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public tims_TimeLogModel()
        {
            this.IsNew = true;
            this.tims_TimeLog = new tims_TimeLog();
        }

        // Default constructor that set entity to field
        public tims_TimeLogModel(tims_TimeLog tims_timelog, bool isRaiseProperties = false)
        {
            this.tims_TimeLog = tims_timelog;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public tims_TimeLog tims_TimeLog { get; private set; }

        #endregion

        #region Primitive Properties

        protected int _id;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Id</param>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected Nullable<int> _workScheduleId;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the WorkScheduleId</param>
        /// </summary>
        public Nullable<int> WorkScheduleId
        {
            get { return this._workScheduleId; }
            set
            {
                if (this._workScheduleId != value)
                {
                    this.IsDirty = true;
                    this._workScheduleId = value;
                    OnPropertyChanged(() => WorkScheduleId);
                    PropertyChangedCompleted(() => WorkScheduleId);
                }
            }
        }

        protected Nullable<int> _payrollId;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the PayrollId</param>
        /// </summary>
        public Nullable<int> PayrollId
        {
            get { return this._payrollId; }
            set
            {
                if (this._payrollId != value)
                {
                    this.IsDirty = true;
                    this._payrollId = value;
                    OnPropertyChanged(() => PayrollId);
                    PropertyChangedCompleted(() => PayrollId);
                }
            }
        }

        protected System.DateTime _clockIn;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the ClockIn</param>
        /// </summary>
        public System.DateTime ClockIn
        {
            get { return this._clockIn; }
            set
            {
                if (this._clockIn != value)
                {
                    this.IsDirty = true;
                    this._clockIn = value;
                    OnPropertyChanged(() => ClockIn);
                    PropertyChangedCompleted(() => ClockIn);
                }
            }
        }

        protected Nullable<System.DateTime> _clockOut;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the ClockOut</param>
        /// </summary>
        public Nullable<System.DateTime> ClockOut
        {
            get { return this._clockOut; }
            set
            {
                if (this._clockOut != value)
                {
                    this.IsDirty = true;
                    this._clockOut = value;
                    OnPropertyChanged(() => ClockOut);
                    PropertyChangedCompleted(() => ClockOut);
                }
            }
        }

        protected bool _manualClockInFlag;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the ManualClockInFlag</param>
        /// </summary>
        public bool ManualClockInFlag
        {
            get { return this._manualClockInFlag; }
            set
            {
                if (this._manualClockInFlag != value)
                {
                    this.IsDirty = true;
                    this._manualClockInFlag = value;
                    OnPropertyChanged(() => ManualClockInFlag);
                    PropertyChangedCompleted(() => ManualClockInFlag);
                }
            }
        }

        protected bool _manualClockOutFlag;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the ManualClockOutFlag</param>
        /// </summary>
        public bool ManualClockOutFlag
        {
            get { return this._manualClockOutFlag; }
            set
            {
                if (this._manualClockOutFlag != value)
                {
                    this.IsDirty = true;
                    this._manualClockOutFlag = value;
                    OnPropertyChanged(() => ManualClockOutFlag);
                    PropertyChangedCompleted(() => ManualClockOutFlag);
                }
            }
        }

        protected float _workTime;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the WorkTime</param>
        /// </summary>
        public float WorkTime
        {
            get { return this._workTime; }
            set
            {
                if (this._workTime != value)
                {
                    this.IsDirty = true;
                    this._workTime = value;
                    OnPropertyChanged(() => WorkTime);
                    PropertyChangedCompleted(() => WorkTime);
                }
            }
        }

        protected float _lunchTime;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the LunchTime</param>
        /// </summary>
        public float LunchTime
        {
            get { return this._lunchTime; }
            set
            {
                if (this._lunchTime != value)
                {
                    this.IsDirty = true;
                    this._lunchTime = value;
                    OnPropertyChanged(() => LunchTime);
                    PropertyChangedCompleted(() => LunchTime);
                }
            }
        }

        protected float _overtimeBefore;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the OvertimeBefore</param>
        /// </summary>
        public float OvertimeBefore
        {
            get { return this._overtimeBefore; }
            set
            {
                if (this._overtimeBefore != value)
                {
                    this.IsDirty = true;
                    this._overtimeBefore = value;
                    OnPropertyChanged(() => OvertimeBefore);
                    PropertyChangedCompleted(() => OvertimeBefore);
                }
            }
        }

        protected string _reason;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Reason</param>
        /// </summary>
        public string Reason
        {
            get { return this._reason; }
            set
            {
                if (this._reason != value)
                {
                    this.IsDirty = true;
                    this._reason = value;
                    OnPropertyChanged(() => Reason);
                    PropertyChangedCompleted(() => Reason);
                }
            }
        }

        protected bool _deductLunchTimeFlag;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the DeductLunchTimeFlag</param>
        /// </summary>
        public bool DeductLunchTimeFlag
        {
            get { return this._deductLunchTimeFlag; }
            set
            {
                if (this._deductLunchTimeFlag != value)
                {
                    this.IsDirty = true;
                    this._deductLunchTimeFlag = value;
                    OnPropertyChanged(() => DeductLunchTimeFlag);
                    PropertyChangedCompleted(() => DeductLunchTimeFlag);
                }
            }
        }

        protected Nullable<float> _lateTime;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the LateTime</param>
        /// </summary>
        public Nullable<float> LateTime
        {
            get { return this._lateTime; }
            set
            {
                if (this._lateTime != value)
                {
                    this.IsDirty = true;
                    this._lateTime = value;
                    OnPropertyChanged(() => LateTime);
                    PropertyChangedCompleted(() => LateTime);
                }
            }
        }

        protected Nullable<float> _leaveEarlyTime;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the LeaveEarlyTime</param>
        /// </summary>
        public Nullable<float> LeaveEarlyTime
        {
            get { return this._leaveEarlyTime; }
            set
            {
                if (this._leaveEarlyTime != value)
                {
                    this.IsDirty = true;
                    this._leaveEarlyTime = value;
                    OnPropertyChanged(() => LeaveEarlyTime);
                    PropertyChangedCompleted(() => LeaveEarlyTime);
                }
            }
        }

        protected bool _activeFlag;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the ActiveFlag</param>
        /// </summary>
        public bool ActiveFlag
        {
            get { return this._activeFlag; }
            set
            {
                if (this._activeFlag != value)
                {
                    this.IsDirty = true;
                    this._activeFlag = value;
                    OnPropertyChanged(() => ActiveFlag);
                    PropertyChangedCompleted(() => ActiveFlag);
                }
            }
        }

        protected Nullable<System.DateTime> _dateUpdated;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the DateUpdated</param>
        /// </summary>
        public Nullable<System.DateTime> DateUpdated
        {
            get { return this._dateUpdated; }
            set
            {
                if (this._dateUpdated != value)
                {
                    this.IsDirty = true;
                    this._dateUpdated = value;
                    OnPropertyChanged(() => DateUpdated);
                    PropertyChangedCompleted(() => DateUpdated);
                }
            }
        }

        protected float _overtimeAfter;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the OvertimeAfter</param>
        /// </summary>
        public float OvertimeAfter
        {
            get { return this._overtimeAfter; }
            set
            {
                if (this._overtimeAfter != value)
                {
                    this.IsDirty = true;
                    this._overtimeAfter = value;
                    OnPropertyChanged(() => OvertimeAfter);
                    PropertyChangedCompleted(() => OvertimeAfter);
                }
            }
        }

        protected float _overtimeLunch;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the OvertimeLunch</param>
        /// </summary>
        public float OvertimeLunch
        {
            get { return this._overtimeLunch; }
            set
            {
                if (this._overtimeLunch != value)
                {
                    this.IsDirty = true;
                    this._overtimeLunch = value;
                    OnPropertyChanged(() => OvertimeLunch);
                    PropertyChangedCompleted(() => OvertimeLunch);
                }
            }
        }

        protected float _overtimeDayOff;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the OvertimeDayOff</param>
        /// </summary>
        public float OvertimeDayOff
        {
            get { return this._overtimeDayOff; }
            set
            {
                if (this._overtimeDayOff != value)
                {
                    this.IsDirty = true;
                    this._overtimeDayOff = value;
                    OnPropertyChanged(() => OvertimeDayOff);
                    PropertyChangedCompleted(() => OvertimeDayOff);
                }
            }
        }

        protected int _overtimeOptions;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the OvertimeOptions</param>
        /// </summary>
        public int OvertimeOptions
        {
            get { return this._overtimeOptions; }
            set
            {
                if (this._overtimeOptions != value)
                {
                    this.IsDirty = true;
                    this._overtimeOptions = value;
                    OnPropertyChanged(() => OvertimeOptions);
                    PropertyChangedCompleted(() => OvertimeOptions);
                }
            }
        }

        protected string _guestResource;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the GuestResource</param>
        /// </summary>
        public string GuestResource
        {
            get { return this._guestResource; }
            set
            {
                if (this._guestResource != value)
                {
                    this.IsDirty = true;
                    this._guestResource = value;
                    OnPropertyChanged(() => GuestResource);
                    PropertyChangedCompleted(() => GuestResource);
                }
            }
        }

        protected bool _isHoliday;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the IsHoliday</param>
        /// </summary>
        public bool IsHoliday
        {
            get { return this._isHoliday; }
            set
            {
                if (this._isHoliday != value)
                {
                    this.IsDirty = true;
                    this._isHoliday = value;
                    OnPropertyChanged(() => IsHoliday);
                    PropertyChangedCompleted(() => IsHoliday);
                }
            }
        }

        protected string _holidayDescription;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the HolidayDescription</param>
        /// </summary>
        public string HolidayDescription
        {
            get { return this._holidayDescription; }
            set
            {
                if (this._holidayDescription != value)
                {
                    this.IsDirty = true;
                    this._holidayDescription = value;
                    OnPropertyChanged(() => HolidayDescription);
                    PropertyChangedCompleted(() => HolidayDescription);
                }
            }
        }

        protected string _userUpdated;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the UserUpdated</param>
        /// </summary>
        public string UserUpdated
        {
            get { return this._userUpdated; }
            set
            {
                if (this._userUpdated != value)
                {
                    this.IsDirty = true;
                    this._userUpdated = value;
                    OnPropertyChanged(() => UserUpdated);
                    PropertyChangedCompleted(() => UserUpdated);
                }
            }
        }

        protected Nullable<long> _employeeId;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the EmployeeId</param>
        /// </summary>
        public Nullable<long> EmployeeId
        {
            get { return this._employeeId; }
            set
            {
                if (this._employeeId != value)
                {
                    this.IsDirty = true;
                    this._employeeId = value;
                    OnPropertyChanged(() => EmployeeId);
                    PropertyChangedCompleted(() => EmployeeId);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <param>Public Method</param>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set PropertyModel to Entity</param>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.tims_TimeLog.Id = this.Id;
            this.tims_TimeLog.WorkScheduleId = this.WorkScheduleId;
            this.tims_TimeLog.PayrollId = this.PayrollId;
            this.tims_TimeLog.ClockIn = this.ClockIn;
            this.tims_TimeLog.ClockOut = this.ClockOut;
            this.tims_TimeLog.ManualClockInFlag = this.ManualClockInFlag;
            this.tims_TimeLog.ManualClockOutFlag = this.ManualClockOutFlag;
            this.tims_TimeLog.WorkTime = this.WorkTime;
            this.tims_TimeLog.LunchTime = this.LunchTime;
            this.tims_TimeLog.OvertimeBefore = this.OvertimeBefore;
            if (this.Reason != null)
                this.tims_TimeLog.Reason = this.Reason.Trim();
            this.tims_TimeLog.DeductLunchTimeFlag = this.DeductLunchTimeFlag;
            this.tims_TimeLog.LateTime = this.LateTime;
            this.tims_TimeLog.LeaveEarlyTime = this.LeaveEarlyTime;
            this.tims_TimeLog.ActiveFlag = this.ActiveFlag;
            this.tims_TimeLog.DateUpdated = this.DateUpdated;
            this.tims_TimeLog.OvertimeAfter = this.OvertimeAfter;
            this.tims_TimeLog.OvertimeLunch = this.OvertimeLunch;
            this.tims_TimeLog.OvertimeDayOff = this.OvertimeDayOff;
            this.tims_TimeLog.OvertimeOptions = this.OvertimeOptions;
            if (this.GuestResource != null)
                this.tims_TimeLog.GuestResource = this.GuestResource.Trim();
            this.tims_TimeLog.IsHoliday = this.IsHoliday;
            if (this.HolidayDescription != null)
                this.tims_TimeLog.HolidayDescription = this.HolidayDescription.Trim();
            if (this.UserUpdated != null)
                this.tims_TimeLog.UserUpdated = this.UserUpdated.Trim();
            this.tims_TimeLog.EmployeeId = this.EmployeeId;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set Entity to PropertyModel</param>
        /// </summary
        public void ToModel()
        {
            this._id = this.tims_TimeLog.Id;
            this._workScheduleId = this.tims_TimeLog.WorkScheduleId;
            this._payrollId = this.tims_TimeLog.PayrollId;
            this._clockIn = this.tims_TimeLog.ClockIn;
            this._clockOut = this.tims_TimeLog.ClockOut;
            this._manualClockInFlag = this.tims_TimeLog.ManualClockInFlag;
            this._manualClockOutFlag = this.tims_TimeLog.ManualClockOutFlag;
            this._workTime = this.tims_TimeLog.WorkTime;
            this._lunchTime = this.tims_TimeLog.LunchTime;
            this._overtimeBefore = this.tims_TimeLog.OvertimeBefore;
            this._reason = this.tims_TimeLog.Reason;
            this._deductLunchTimeFlag = this.tims_TimeLog.DeductLunchTimeFlag;
            this._lateTime = this.tims_TimeLog.LateTime;
            this._leaveEarlyTime = this.tims_TimeLog.LeaveEarlyTime;
            this._activeFlag = this.tims_TimeLog.ActiveFlag;
            this._dateUpdated = this.tims_TimeLog.DateUpdated;
            this._overtimeAfter = this.tims_TimeLog.OvertimeAfter;
            this._overtimeLunch = this.tims_TimeLog.OvertimeLunch;
            this._overtimeDayOff = this.tims_TimeLog.OvertimeDayOff;
            this._overtimeOptions = this.tims_TimeLog.OvertimeOptions;
            this._guestResource = this.tims_TimeLog.GuestResource;
            this._isHoliday = this.tims_TimeLog.IsHoliday;
            this._holidayDescription = this.tims_TimeLog.HolidayDescription;
            this._userUpdated = this.tims_TimeLog.UserUpdated;
            this._employeeId = this.tims_TimeLog.EmployeeId;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set Entity to PropertyModel</param>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.tims_TimeLog.Id;
            this.WorkScheduleId = this.tims_TimeLog.WorkScheduleId;
            this.PayrollId = this.tims_TimeLog.PayrollId;
            this.ClockIn = this.tims_TimeLog.ClockIn;
            this.ClockOut = this.tims_TimeLog.ClockOut;
            this.ManualClockInFlag = this.tims_TimeLog.ManualClockInFlag;
            this.ManualClockOutFlag = this.tims_TimeLog.ManualClockOutFlag;
            this.WorkTime = this.tims_TimeLog.WorkTime;
            this.LunchTime = this.tims_TimeLog.LunchTime;
            this.OvertimeBefore = this.tims_TimeLog.OvertimeBefore;
            this.Reason = this.tims_TimeLog.Reason;
            this.DeductLunchTimeFlag = this.tims_TimeLog.DeductLunchTimeFlag;
            this.LateTime = this.tims_TimeLog.LateTime;
            this.LeaveEarlyTime = this.tims_TimeLog.LeaveEarlyTime;
            this.ActiveFlag = this.tims_TimeLog.ActiveFlag;
            this.DateUpdated = this.tims_TimeLog.DateUpdated;
            this.OvertimeAfter = this.tims_TimeLog.OvertimeAfter;
            this.OvertimeLunch = this.tims_TimeLog.OvertimeLunch;
            this.OvertimeDayOff = this.tims_TimeLog.OvertimeDayOff;
            this.OvertimeOptions = this.tims_TimeLog.OvertimeOptions;
            this.GuestResource = this.tims_TimeLog.GuestResource;
            this.IsHoliday = this.tims_TimeLog.IsHoliday;
            this.HolidayDescription = this.tims_TimeLog.HolidayDescription;
            this.UserUpdated = this.tims_TimeLog.UserUpdated;
            this.EmployeeId = this.tims_TimeLog.EmployeeId;
        }

        #endregion

        #region Custom Code

        #region Properties

        /// <summary>
        /// Unique TimeLogModel
        /// </summary>
        /// 
        [XmlIgnore]
        private Guid GuidID { get; set; }

        /// <summary>
        ///True : ClockIn & ClockOut is changed from TimeClock Correction & set ManualClockOutFlag or ManualClockInFlag To true
        ///False :     
        /// 
        /// </summary>
        [XmlIgnore]
        public bool IsManual { get; set; }

        /// <summary>
        /// Work week of Employee 
        /// <para>Extension Property</para>
        /// <para>Required for Calculate LunchTime/WorkTime/OverTime</para>
        /// </summary>
        [XmlIgnore]
        public tims_WorkWeek WorkWeek
        {
            get
            {
                return GetWorkWeek();
            }
        }

        [NonSerialized]
        private DateRange _timeLogRange;

        [XmlIgnore]
        public bool IsDuplicated { get; set; }

        [XmlIgnore]
        public bool TempItem { get; set; }

        /// <summary>
        /// Temp item for Set workSchedule in ClockIn & Out Changed
        /// </summary>
        [XmlIgnore]
        public base_GuestModel EmployeeTemp { get; set; }

        [XmlIgnore]
        public base_GuestSchedule EmployeeSchedule { get; set; }

        [XmlIgnore]
        public base_GuestSchedule PreviousEmployeeSchedule { get; set; }

        public bool IsFixClockOutNull
        {
            get;
            set;
        }

        #region ClockDate
        private DateTime _clockInDate;
        /// <summary>
        /// Gets or sets the ClockDate.
        /// </summary>
        [XmlIgnore]
        public DateTime ClockInDate
        {
            get
            {
                return _clockInDate;
            }
            set
            {
                if (_clockInDate != value)
                {
                    _clockInDate = value;
                    if (ClockIn.Date != value.Date)
                    {
                        var delta = _clockInDate.Date.Subtract(ClockIn.Date);
                        //Editing = true;
                        _clockIn = ClockIn.Add(delta);
                        if (ClockOut.HasValue)
                        {
                            var deltaOut = _clockInDate.Date.Subtract(ClockOut.Value.Date);
                            _clockOut = ClockOut.Value.Add(deltaOut);
                        }
                        //Editing = false;
                    }
                    OnPropertyChanged(() => ClockInDate);
                    PropertyChangedCompleted(() => ClockInDate);
                }
            }
        }
        #endregion

        #region Duration & DurationText
        private TimeSpan _duration = new TimeSpan(0, 0, 0);
        /// <summary>
        /// Gets or sets the Duration.
        /// </summary>
        [XmlIgnore]
        public TimeSpan Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                if (_duration != value)
                {
                    _duration = value;
                    OnPropertyChanged(() => Duration);
                    OnPropertyChanged(() => DurationText);
                }
            }
        }



        /// <summary>
        /// Gets or sets the DurationText.
        /// </summary>
        public string DurationText
        {
            get
            {
                return Duration.ToHours();
            }
        }

        #endregion

        #region UnscheduleHour
        private TimeSpan _unScheduleHour;
        /// <summary>
        /// Extension Property
        ///<para> Gets or sets the UnscheduleHour.</para>
        /// </summary>
        [XmlIgnore]
        public TimeSpan UnscheduleHour
        {
            get
            {
                return _unScheduleHour;
            }
            set
            {
                if (_unScheduleHour != value)
                {
                    _unScheduleHour = value;
                    OnPropertyChanged(() => UnscheduleHour);
                }
            }
        }
        #endregion

        #region OverTime & OverTimeExt
        private TimeSpan _overTime;
        /// <summary>
        /// Gets or sets the OverTime.
        /// </summary>
        [XmlIgnore]
        public TimeSpan OverTime
        {
            get { return _overTime; }
            set
            {
                if (_overTime != value)
                {
                    _overTime = value;
                    OnPropertyChanged(() => OverTime);
                    OnPropertyChanged(() => OverTimeExt);
                }
            }
        }

        ///// <summary>

        ///// Gets the OverTimeExt convert from OverTime double type to TimeSpan.
        ///// </summary>
        [XmlIgnore]
        public string OverTimeExt
        {
            get
            {
                return OverTime.ToHours();
            }
        }
        #endregion

        #region LateTimeExt
        /// <summary>
        /// Gets the LateTimeExt convert from LateTime double type to TimeSpan..
        /// </summary>
        [XmlIgnore]
        public string LateTimeExt
        {
            get
            {
                if (LateTime.HasValue)
                {
                    return LateTime.Value.ToHours();
                }
                return "0:00";
            }
        }
        #endregion

        #region LeaveEarlyTimeExt

        /// <summary>
        /// Gets or sets the LeaveEarlyTimeExt.
        /// </summary>
        [XmlIgnore]
        public string LeaveEarlyTimeExt
        {
            get
            {
                if (LeaveEarlyTime.HasValue)
                    return LeaveEarlyTime.Value.ToHours();
                //return string.Format("{0:00}:{1:00}", Math.Truncate(TimeSpan.FromHours(LeaveEarlyTime.Value).TotalHours), TimeSpan.FromHours(LeaveEarlyTime.Value).Minutes);
                return "00:00";
            }
        }


        #endregion

        #region WorkPermissionOT
        private Overtime _workPermissionOT;
        /// <summary>
        /// Gets the WorkPermissionOT.
        /// <remarks>
        /// This varialble is set of  EmployeeWorkPermissions.
        /// to compare with OverTimeOption in TimeLogModel , if OverTimeOption is existed with WorkpermssionOT , disabled that control.
        /// </remarks>
        /// </summary>

        [XmlIgnore]
        public Overtime WorkPermissionOT
        {
            get
            {
                return _workPermissionOT;
            }
            set
            {
                if (_workPermissionOT != value)
                {
                    _workPermissionOT = value;
                    OnPropertyChanged(() => WorkPermissionOT);
                }
            }
        }
        #endregion

        #region WorkPermissionCollection
        private ObservableCollection<tims_WorkPermissionModel> _workpermissionCollection;
        /// <summary>
        /// Gets or sets the WorkPermissionCollection.
        /// </summary>
        [XmlIgnore]
        public ObservableCollection<tims_WorkPermissionModel> WorkPermissionCollection
        {
            get { return _workpermissionCollection; }
            set
            {
                if (_workpermissionCollection != value)
                {
                    _workpermissionCollection = value;
                    OnPropertyChanged(() => WorkPermissionCollection);
                }
            }
        }
        #endregion

        #region WorkPermissionText
        /// <summary>
        /// Gets the WorkPermissionText.
        /// </summary>
        public string WorkPermissionText
        {
            get { return AllWorkPermission(); }
        }
        #endregion

        #region WorkScheduleGroup
        private string _workScheduleGroup;
        /// <summary>
        /// Gets or sets the WorkScheduleGroup.
        /// </summary>
        public string WorkScheduleGroup
        {
            get
            {
                return _workScheduleGroup;
            }
            set
            {
                if (_workScheduleGroup != value)
                {
                    _workScheduleGroup = value;
                    OnPropertyChanged(() => WorkScheduleGroup);
                }
            }
        }
        #endregion

        #endregion

        #region Methods

        public tims_WorkWeek GetWorkWeek()
        {
            tims_WorkWeek workWeek = null;
            int dayOfWeek = (int)this.ClockIn.DayOfWeek == 0 ? 7 : (int)this.ClockIn.DayOfWeek;
            if (this.EmployeeSchedule != null)
            {
                int week = (this.ClockIn.Subtract(this.EmployeeSchedule.StartDate.AddDays(-(int)this.EmployeeSchedule.StartDate.DayOfWeek)).Days / 7 % this.EmployeeSchedule.tims_WorkSchedule.Rotate) + 1;
                if (this.EmployeeSchedule.tims_WorkSchedule.WorkScheduleType == 1 || this.EmployeeSchedule.tims_WorkSchedule.WorkScheduleType == 2)
                    workWeek = this.EmployeeSchedule.tims_WorkSchedule.tims_WorkWeek.Where(x => x.Day == dayOfWeek).SingleOrDefault();
                else
                    workWeek = this.EmployeeSchedule.tims_WorkSchedule.tims_WorkWeek.Where(x => x.Week == week && x.Day == dayOfWeek).SingleOrDefault();

                if (workWeek != null)
                {
                    workWeek.WorkIn = new DateTime(this.ClockIn.Year, this.ClockIn.Month, this.ClockIn.Day, workWeek.WorkIn.Hour, workWeek.WorkIn.Minute, workWeek.WorkIn.Second);
                    workWeek.WorkOut = new DateTime(this.ClockIn.Year, this.ClockIn.Month, this.ClockIn.Day, workWeek.WorkOut.Hour, workWeek.WorkOut.Minute, workWeek.WorkOut.Second);
                    workWeek.LunchIn = new DateTime(this.ClockIn.Year, this.ClockIn.Month, this.ClockIn.Day, workWeek.LunchIn.Value.Hour, workWeek.LunchIn.Value.Minute, workWeek.LunchIn.Value.Second);
                    workWeek.LunchOut = new DateTime(this.ClockIn.Year, this.ClockIn.Month, this.ClockIn.Day, workWeek.LunchOut.Value.Hour, workWeek.LunchOut.Value.Minute, workWeek.LunchOut.Value.Second);
                }
            }

            return workWeek;
        }

        /// <summary>
        /// Calculate Duration when Clock in & Clock Out Changed
        /// </summary> 
        private void CalculateDuration()
        {
            if (this.ClockOut.HasValue)
                Duration = TimeSpan.FromMinutes((this.ClockOut.Value - this.ClockIn).TotalMinutes);
        }

        /// <summary>
        /// Calculate Unschedule time with formular = (Clock Out - ClockIn) - WorkTime - Overtime -  if(Deduct=true:LunchTime:0)
        /// Overtime has Deducted Lunch If DeductLunchTimeFlag=true
        /// </summary>
        private void CalculateUnScheduleTime()
        {
            UnscheduleHour = TimeSpan.FromMinutes(Duration.TotalMinutes - WorkTime - OverTime.TotalMinutes);
        }

        /// <summary>
        /// Set Time Log for Check Duplicate TimeLog
        /// </summary>
        private void SetForTimeLogRange()
        {
            if (this.ClockOut.HasValue && this.ClockIn <= this.ClockOut)
                this._timeLogRange = new DateRange(this.ClockIn, this.ClockOut);
            else
                this._timeLogRange = null;
        }

        /// <summary>
        /// Calculate Overtime 
        /// </summary>
        private void SumOfOvertime()
        {
            if (this.OvertimeDayOff > 0)
                OverTime = TimeSpan.FromMinutes(this.OvertimeDayOff);
            else
                OverTime = TimeSpan.FromMinutes(this.OvertimeBefore + this.OvertimeAfter + this.OvertimeLunch);
        }

        /// <summary>
        /// Set Over time option from workpermission 
        /// Call From new timeLog
        /// </summary>
        public void SetOverTimeFromEmployee()
        {
            if (IsNew &&  this.EmployeeTemp!=null)
            {
                var workPermission = this.EmployeeTemp.base_Guest.tims_WorkPermission.Where(x => this.ClockIn.Date >= x.FromDate.Date && this.ClockOut.HasValue && this.ClockOut.Value.Date <= x.ToDate);
                if (workPermission != null && workPermission.Count() == 0)
                {
                    if (!((Overtime)this.OvertimeOptions).HasFlag(Overtime.Before) && ((Overtime)EmployeeTemp.OvertimeOption).HasFlag(Overtime.Before))
                    {
                        this.OvertimeOptions |= (int)Overtime.Before;
                    }

                    if (!((Overtime)this.OvertimeOptions).HasFlag(Overtime.Break) && ((Overtime)EmployeeTemp.OvertimeOption).HasFlag(Overtime.Break))
                    {
                        this.OvertimeOptions |= (int)Overtime.Break;
                    }

                    if (!((Overtime)this.OvertimeOptions).HasFlag(Overtime.After) && ((Overtime)EmployeeTemp.OvertimeOption).HasFlag(Overtime.After))
                    {
                        this.OvertimeOptions |= (int)Overtime.After;
                    }

                    if (!((Overtime)this.OvertimeOptions).HasFlag(Overtime.Holiday) && ((Overtime)EmployeeTemp.OvertimeOption).HasFlag(Overtime.Holiday))
                    {
                        this.OvertimeOptions |= (int)Overtime.Holiday;
                    }

                }
                var setDeduct = EmployeeTemp.IsDeductLunchTime;
                var test = EmployeeTemp.TimeLogCollection.Where(x => x.ClockIn.Date == this.ClockIn.Date && !x.IsNew);
                if (EmployeeTemp != null && EmployeeTemp.TimeLogCollection.Where(x => x.ClockIn.Date == this.ClockIn.Date && !x.IsNew).Count() > 0)
                    setDeduct = EmployeeTemp.TimeLogCollection.Last(x => x.ClockIn.Date == this.ClockIn.Date && !x.IsNew).DeductLunchTimeFlag;
                this.DeductLunchTimeFlag = setDeduct;
            }
        }

        /// <summary>
        /// Set Deduct for The same date
        /// </summary>
        private void SetToDeduct()
        {
            if (this.EmployeeTemp != null && this.EmployeeTemp.TimeLogCollection != null)
            {
                foreach (var item in this.EmployeeTemp.TimeLogCollection.Where(x => x.ClockIn.Date == this.ClockIn.Date))
                {
                    item.DeductLunchTimeFlag = this.DeductLunchTimeFlag;
                }
            }
        }

        /// <summary>
        /// Set date of Clock in to ClockOutNullable when user changed
        /// </summary>
        private void SetClockOutNullable()
        {
            if (ClockOut.HasValue && ClockOut.Value.Year == 1)
            {
                ClockOut = new DateTime(ClockIn.Year, ClockIn.Month, ClockIn.Day, ClockOut.Value.Hour, ClockOut.Value.Minute, ClockOut.Value.Second);
            }
        }

        /// <summary>
        /// Method find employeeSchedule when ClockIn & clockOut change
        /// </summary>
        private void SetEmployeeSchedule()
        {
            if (this.IsNew && this.EmployeeTemp!=null && this.EmployeeTemp.base_Guest.base_GuestSchedule.Count > 0)
            {
                this.EmployeeSchedule = this.EmployeeTemp.base_Guest.base_GuestSchedule.Where(x => x.StartDate.Date <= this.ClockIn.Date).OrderBy(x => x.StartDate).ThenBy(x => x.AssignDate).LastOrDefault();
                var test = this.EmployeeTemp.base_Guest.base_GuestSchedule.Where(x => x.StartDate.Date <= this.ClockIn.Date).OrderBy(x => x.StartDate).ThenBy(x => x.AssignDate);
                if (this.EmployeeSchedule != null)
                {
                    PreviousEmployeeSchedule = this.EmployeeTemp.base_Guest.base_GuestSchedule.Where(x => x.StartDate.Date < EmployeeSchedule.StartDate.Date && x.Status > (int)EmployeeScheduleStatuses.Inactive).OrderBy(x => x.StartDate).ThenBy(x => x.AssignDate).LastOrDefault();

                    //Set Employee Schedule for TimeLog
                    //Set Id For Employee Schedule when ClockIn & ClockOut Changed
                    this.WorkScheduleId = EmployeeSchedule.WorkScheduleId;
                    //this.TimeLog.WorkSchedule = this.EmployeeSchedule.WorkSchedule;

                    //27/11/2012 : Editd Set Previous EmployeeSchedule when save data in viewmodel
                    // Set last schedule to InActive
                    //if (lastSchedule != null)
                    //    lastSchedule.Status = (int)EmployeeScheduleStatuses.Inactive;
                }

            }
            else if (this.tims_TimeLog.base_Guest != null && this.tims_TimeLog.base_Guest.base_GuestSchedule.Count > 0)
            {
                this.EmployeeSchedule = this.tims_TimeLog.base_Guest.base_GuestSchedule.Where(x => x.StartDate <= this.ClockIn.Date).OrderBy(x => x.StartDate).ThenBy(x => x.AssignDate).LastOrDefault();
            }

        }

        #endregion

        #region Public Methods

        /// <summary>
        /// WorkTime not include OverTime or LunchTime
        /// </summary>
        /// <returns></returns>
        public TimeSpan GetWorkTime()
        {
            TimeSpan result = new TimeSpan();

            if (this.WorkWeek != null && this.tims_TimeLog != null && this.ClockOut.HasValue)
            {
                CPC.Helper.DateRange clockRange = new CPC.Helper.DateRange(this.ClockIn, this.ClockOut);
                CPC.Helper.DateRange workRange = new CPC.Helper.DateRange(this.WorkWeek.WorkIn, this.WorkWeek.WorkOut);
                CPC.Helper.DateRange lunchRange = new Helper.DateRange();
                CPC.Helper.DateRange workInLunchOut = new Helper.DateRange();
                CPC.Helper.DateRange lunchInWorkOut = new Helper.DateRange();
                if (this.WorkWeek.LunchBreakFlag)
                {
                    lunchRange = new CPC.Helper.DateRange(this.WorkWeek.LunchOut, this.WorkWeek.LunchIn);
                    workInLunchOut = new CPC.Helper.DateRange(this.WorkWeek.WorkIn, this.WorkWeek.LunchOut);
                    lunchInWorkOut = new CPC.Helper.DateRange(this.WorkWeek.LunchIn, this.WorkWeek.WorkOut);
                }

                if (!this.WorkWeek.LunchBreakFlag)//WorkTime with not LunchBreak Time
                {
                    if (clockRange.Intersects(workRange))
                        result = result.Add(clockRange.GetIntersection(workRange).TimeSpan);
                }
                else //if (this.ClockIn < workWeek.LunchOut && this.ClockOut > workWeek.LunchOut)// WorkTime with OutOf LunchOut
                {
                    if (clockRange.Intersects(workInLunchOut))//Get Work time with Intersection time of WorkIn & LunchOut
                        result = result.Add(clockRange.GetIntersection(workInLunchOut).TimeSpan);

                    if (clockRange.Intersects(lunchInWorkOut))//Get WorkTime with Intersection time of LunchIn & WorkOut
                        result = result.Add(clockRange.GetIntersection(lunchInWorkOut).TimeSpan);
                }
            }
            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public TimeSpan GetLunchTime()
        {
            TimeSpan result = new TimeSpan();

            //if (this.WorkWeek != null)
            //    workWeek = this.WorkWeek;
            //else

            if (this.WorkWeek != null && this.tims_TimeLog != null && this.ClockOut.HasValue)
            {
                DateRange clockRange = new DateRange(this.ClockIn, this.ClockOut);
                DateRange lunchRange = new DateRange();
                DateRange workInLunchOut = new DateRange();
                DateRange lunchInWorkOut = new DateRange();
                if (this.WorkWeek.LunchBreakFlag)
                {
                    lunchRange = new DateRange(this.WorkWeek.LunchOut, this.WorkWeek.LunchIn);
                    workInLunchOut = new DateRange(this.WorkWeek.WorkIn, this.WorkWeek.LunchOut);
                    lunchInWorkOut = new DateRange(this.WorkWeek.LunchIn, this.WorkWeek.WorkOut);
                }

                if (this.WorkWeek.LunchBreakFlag && clockRange.Intersects(lunchRange))
                {
                    var OTBreak = clockRange.GetIntersection(lunchRange);
                    result = result.Add(OTBreak.TimeSpan);
                }
            }
            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        public void SetDuplicationTimeLog()
        {
            if (this.EmployeeTemp != null)
            {
                if (this.EmployeeTemp.TimeLogCollection == null)
                    IsDuplicated = false;
                else if (ClockOut.HasValue && ClockIn == ClockOut.Value)
                    IsDuplicated = this.EmployeeTemp.TimeLogCollection.Count(x => x != this && x.ClockIn < ClockIn && x.ClockOut.HasValue && x.ClockOut.Value > ClockIn) > 0;
                else
                {
                    if (_timeLogRange != null)
                        IsDuplicated = this.EmployeeTemp.TimeLogCollection.Count(
                            x => x != this
                                && ((x.ClockOut.HasValue && this._timeLogRange.IntersectEqual(new DateRange(x.ClockIn, x.ClockOut.Value))) //ClockIn & ClockOut(_timeLogRange) intersect in collection
                            || (!x.ClockOut.HasValue && this._timeLogRange.IntersectEqual(new DateRange(x.ClockIn, x.ClockIn))))) > 0;
                    else
                        IsDuplicated = this.EmployeeTemp.TimeLogCollection.Count(x => x.ClockIn.Date == this.ClockIn.Date && x.ClockOut.HasValue && this.ClockIn < x.ClockOut.Value) > 0;
                }
                OnPropertyChanged(() => IsDuplicated);
            }
        }

        public void SetFixItemTimeClockNull()
        {
            if (this.EmployeeTemp != null)
            {
                var previousTimeLog = this.EmployeeTemp.TimeLogCollection.OrderBy(x => x.ClockIn).ThenBy(x => x.ClockOut).LastOrDefault(x => x.GuidID != this.GuidID && x.ClockIn.Date == this.ClockIn.Date && x.ClockIn <= this.ClockIn);
                var tst = this.EmployeeTemp.TimeLogCollection.OrderBy(x => x.ClockIn).ThenBy(x => x.ClockOut);
                var a = tst.LastOrDefault(x => x.ClockIn.Date == this.ClockIn.Date && x.ClockIn <= this.ClockIn);


                if (previousTimeLog != null && !previousTimeLog.ClockOut.HasValue)
                    this.IsFixClockOutNull = !previousTimeLog.ClockOut.HasValue;
                else
                    this.IsFixClockOutNull = this.EmployeeTemp.TimeLogCollection.Count(x => x.ClockIn.Date == this.ClockIn.Date && !x.ClockOut.HasValue) > 1;
            }
            else
                this.IsFixClockOutNull = false;

            OnPropertyChanged(() => IsFixClockOutNull);
        }

        /// <summary>
        /// This methods is set of  EmployeeWorkPermissions.
        /// to compare with OverTimeOption in TimeLogModel , if OverTimeOption is existed with WorkpermssionOT , disabled that control.
        /// </summary>
        /// <returns></returns>
        public void SetWorkPermissionOT()
        {
            Overtime result = new Overtime();
            if (this.tims_TimeLog.tims_WorkPermission != null)
            {
                foreach (var item in this.tims_TimeLog.tims_WorkPermission)
                {
                    if (((Overtime)item.OvertimeOptions).Has(Overtime.Holiday))
                    {
                        result = result.Add<Overtime>(Overtime.Holiday);
                    }
                    if (((Overtime)item.OvertimeOptions).Has(Overtime.Before))
                    {
                        result = result.Add<Overtime>(Overtime.Before);
                    }
                    if (((Overtime)item.OvertimeOptions).Has(Overtime.Break))
                    {
                        result = result.Add<Overtime>(Overtime.Break);
                    }
                    if (((Overtime)item.OvertimeOptions).Has(Overtime.After))
                    {
                        result = result.Add<Overtime>(Overtime.After);
                    }
                }
            }
            WorkPermissionOT = result;
            OnPropertyChanged(() => WorkPermissionOT);
        }

        private string AllWorkPermission()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            string result = string.Empty;
            if (this.tims_TimeLog.tims_WorkPermission != null)
            {
                foreach (var item in this.tims_TimeLog.tims_WorkPermission)
                {
                    WorkPermissionTypes workPermission = (WorkPermissionTypes)item.PermissionType;
                    Overtime overtimeType = (Overtime)item.OvertimeOptions;
                    if (workPermission.HasFlag(WorkPermissionTypes.ArrivingLate))
                    {
                        sb.AppendLine(Common.WorkPermissionType.SingleOrDefault(x => x.Value.Equals((int)WorkPermissionTypes.ArrivingLate)).Text);
                    }
                    if (workPermission.HasFlag(WorkPermissionTypes.LeavingEarly))
                    {
                        sb.AppendLine(Common.WorkPermissionType.SingleOrDefault(x => x.Value.Equals((int)WorkPermissionTypes.LeavingEarly)).Text);
                    }
                    if (workPermission.HasFlag(WorkPermissionTypes.Absence))
                    {
                        sb.AppendLine(Common.WorkPermissionType.SingleOrDefault(x => x.Value.Equals((int)WorkPermissionTypes.Absence)).Text);
                    }
                    if (workPermission.HasFlag(WorkPermissionTypes.SickLeave))
                    {
                        sb.AppendLine(Common.WorkPermissionType.SingleOrDefault(x => x.Value.Equals((int)WorkPermissionTypes.SickLeave)).Text);
                    }
                    if (workPermission.HasFlag(WorkPermissionTypes.Vacations))
                    {
                        sb.AppendLine(Common.WorkPermissionType.SingleOrDefault(x => x.Value.Equals((int)WorkPermissionTypes.Vacations)).Text);
                    }
                    if (workPermission.HasFlag(WorkPermissionTypes.DisciplinaryLeave))
                    {
                        sb.AppendLine(Common.WorkPermissionType.SingleOrDefault(x => x.Value.Equals((int)WorkPermissionTypes.DisciplinaryLeave)).Text);
                    }
                    //Overtimes
                    if (overtimeType.HasFlag(Overtime.Before))
                    {
                        sb.AppendLine(Common.OvertimeTypes.SingleOrDefault(x => x.Value.Equals((int)Overtime.Before)).Text);
                    }
                    if (overtimeType.HasFlag(Overtime.Break))
                    {
                        sb.AppendLine(Common.OvertimeTypes.SingleOrDefault(x => x.Value.Equals((int)Overtime.Break)).Text);
                    }
                    if (overtimeType.HasFlag(Overtime.After))
                    {
                        sb.AppendLine(Common.OvertimeTypes.SingleOrDefault(x => x.Value.Equals((int)Overtime.After)).Text);
                    }
                    if (overtimeType.HasFlag(Overtime.Holiday))
                    {
                        sb.AppendLine(Common.OvertimeTypes.SingleOrDefault(x => x.Value.Equals((int)Overtime.Holiday)).Text);
                    }
                }
                if (sb.Length > 0)
                    result = sb.Remove(sb.Length - 2, 2).ToString();
            }
            return result;
        }

        public void RaiseClockIn()
        {
            OnPropertyChanged(() => ClockIn);
        }

        #endregion

        #region Override Methods

        protected override void PropertyChangedCompleted(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            switch (propertyName)
            {
                case "ClockIn":
                    ManualClockInFlag = IsManual;
                    CalculateDuration();
                    SetForTimeLogRange();
                    SetDuplicationTimeLog();
                    SetEmployeeSchedule();
                    SetOverTimeFromEmployee();
                    OnPropertyChanged(() => Reason);
                    OnPropertyChanged(() => ClockOut);
                    SetFixItemTimeClockNull();
                    break;
                case "ClockOut":
                    ManualClockOutFlag = IsManual;
                    CalculateDuration();
                    SetForTimeLogRange();
                    SetDuplicationTimeLog();
                    SetClockOutNullable();
                    SetEmployeeSchedule();
                    SetOverTimeFromEmployee();
                    OnPropertyChanged(() => Reason);
                    OnPropertyChanged(() => ClockIn);
                    OnPropertyChanged(() => IsFixClockOutNull);
                    SetFixItemTimeClockNull();
                    break;
                case "ClockInDate":
                    CalculateDuration();
                    SetForTimeLogRange();
                    SetDuplicationTimeLog();
                    SetEmployeeSchedule();
                    SetOverTimeFromEmployee();
                    OnPropertyChanged(() => Reason);
                    OnPropertyChanged(() => ClockIn);
                    if (ClockOut.HasValue)
                    {
                        SetClockOutNullable();
                        OnPropertyChanged(() => ClockOut);
                    }
                    break;
                case "Duration":
                    CalculateUnScheduleTime();
                    break;
                case "WorkTime":
                    CalculateUnScheduleTime();
                    break;
                case "OverTime":
                    CalculateUnScheduleTime();
                    break;
                case "OvertimeOptions":
                    SetWorkPermissionOT();
                    break;
                case "LunchTime":
                    CalculateUnScheduleTime();
                    break;
                case "DeductLunchTimeFlag":
                    SetToDeduct();
                    CalculateUnScheduleTime();
                    break;
                case "LateTime":
                    OnPropertyChanged(() => LateTimeExt);
                    break;
                case "LeaveEarlyTime":
                    OnPropertyChanged(() => LeaveEarlyTimeExt);
                    break;
                case "OvertimeBefore":
                    SumOfOvertime();
                    break;
                case "OvertimeLunch":
                    SumOfOvertime();
                    break;
                case "OvertimeAfter":
                    SumOfOvertime();
                    break;
                case "OvertimeDayOff":
                    SumOfOvertime();
                    break;
            }
        }

        #endregion

        #endregion

        #region IDataErrorInfo Members

        public Dictionary<string, string> Errors = new Dictionary<string, string>();

        public string Error
        {
            get
            {
                List<string> errors = new List<string>();
                PropertyDescriptorCollection props = TypeDescriptor.GetProperties(this);
                foreach (PropertyDescriptor prop in props)
                {
                    string msg = this[prop.Name];
                    if (!string.IsNullOrWhiteSpace(msg))
                    {
                        errors.Add(msg);
                    }
                }

                return string.Join(Environment.NewLine, errors);
            }
        }

        public bool IsVaid
        {
            get
            {
                List<string> errors = new List<string>();
                PropertyDescriptorCollection props = TypeDescriptor.GetProperties(this);
                foreach (PropertyDescriptor prop in props)
                {
                    string msg = this[prop.Name];
                    if (!string.IsNullOrWhiteSpace(msg))
                    {
                        errors.Add(msg);
                    }
                }

                return !errors.Any();
            }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;
                this.Errors.Remove(columnName);
                switch (columnName)
                {
                    case "Id":
                        break;
                    case "EmployeeId":
                        break;
                    case "WorkScheduleId":
                        break;
                    case "PayrollId":
                        break;
                    case "ClockIn":
                        if (ClockIn.Date > DateTime.Now.Date)
                            message = "Clock-In must be less than Current date";
                        else if (ClockOut.HasValue && ClockIn > ClockOut.Value)
                            message = "Clock-In must be less than clock_out";
                        else if (EmployeeSchedule == null)
                            message = "Emloyee not schedule";
                        else if (ClockOut.HasValue && ((ClockOut.Value - ClockIn).TotalDays > 1 || (ClockOut.Value - ClockIn).TotalDays < 0))
                            message = "Clock In & Clock Out is not garther than 24h";
                        else if (IsDuplicated)
                            message = "Has Duplicated TimeLog";
                        else if (IsFixClockOutNull)
                            message = "Fix clock out null";
                        break;
                    case "ClockOut":
                        if (ClockOut.HasValue)
                        {
                            if (ClockOut > DateTime.Now)
                                message = "Clock Out must be less than Current date";
                            else if (ClockOut.HasValue && ClockIn > ClockOut.Value)
                                message = "ClockIn must be less than clock out";
                            else if (EmployeeSchedule == null)
                                message = "Emloyee not schedule";
                            else if (ClockOut.HasValue && ((ClockOut.Value - ClockIn).TotalDays > 1 || (ClockOut.Value - ClockIn).TotalDays < 0))
                                message = "Clock In & Clock Out is not garther than 24h";
                            else if (IsDuplicated)
                                message = "Has Duplicated TimeLog";
                        }
                        break;
                    case "WorkTime":
                        break;
                    case "Reason":
                        if (base.IsDirty && string.IsNullOrWhiteSpace(this.Reason))
                            message = "Reason is required";
                        break;
                    case "DeductLunchTimeFlag":
                        break;
                    case "LateTime":
                        break;
                    case "LeaveEarlyTime":
                        break;
                    case "ActiveFlag":
                        break;
                    case "ModifiedDate":
                        break;
                    case "ModifiedById":
                        break;
                    case "OvertimeAfter":
                        break;
                    case "OvertimeLunch":
                        break;
                    case "OvertimeDayOff":
                        break;
                    case "OvertimeOptions":
                        break;
                }

                if (!string.IsNullOrWhiteSpace(message))
                {
                    this.Errors.Add(columnName, message);
                    return message;
                }
                return null;
            }
        }

        #endregion
    }
}

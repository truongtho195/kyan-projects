//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq;
using System.Linq.Expressions;
using CPC.TimeClock.Database;

namespace CPC.TimeClock.Repository
{
    /// <summary>
    /// Repository for table rpt_Permission 
    /// </summary>
    public partial class rpt_PermissionRepository
    {
        #region Auto Generate Code

        #region Constructors

        // Default constructor
        public rpt_PermissionRepository()
        {
        }

        #endregion

        #region Basic C.R.U.D. Operations

        /// <summary>
        /// Add new rpt_Permission.
        /// </summary>
        /// <param name="rpt_Permission">rpt_Permission to add.</param>
        /// <returns>rpt_Permission have been added.</returns>
        public rpt_Permission Add(rpt_Permission rpt_Permission)
        {
            UnitOfWork.Add<rpt_Permission>(rpt_Permission);
            return rpt_Permission;
        }

        /// <summary>
        /// Adds a sequence of new rpt_Permission.
        /// </summary>
        /// <param name="rpt_Permission">Sequence of new rpt_Permission to add.</param>
        /// <returns>Sequence of new rpt_Permission have been added.</returns>
        public IEnumerable<rpt_Permission> Add(IEnumerable<rpt_Permission> rpt_Permission)
        {
            UnitOfWork.Add<rpt_Permission>(rpt_Permission);
            return rpt_Permission;
        }

        /// <summary>
        /// Delete a existed rpt_Permission.
        /// </summary>
        /// <param name="rpt_Permission">rpt_Permission to delete.</param>
        public void Delete(rpt_Permission rpt_Permission)
        {
            Refresh(rpt_Permission);
            if (rpt_Permission.EntityState != System.Data.EntityState.Detached)
                UnitOfWork.Delete<rpt_Permission>(rpt_Permission);
        }

        /// <summary>
        /// Delete a sequence of existed rpt_Permission.
        /// </summary>
        /// <param name="rpt_Permission">Sequence of existed rpt_Permission to delete.</param>
        public void Delete(IEnumerable<rpt_Permission> rpt_Permission)
        {
            int total = rpt_Permission.Count();
            for (int i = total - 1; i >= 0; i--)
                Delete(rpt_Permission.ElementAt(i));
        }

        /// <summary>
        /// Returns the first rpt_Permission of a sequence that satisfies a specified condition or 
        /// a default value if no such rpt_Permission is found.
        /// </summary>
        /// <param name="expression">A function to test each rpt_Permission for a condition.</param>
        /// <returns>    
        /// Null if source is empty or if no rpt_Permission passes the test specified by expression; 
        /// otherwise, the first rpt_Permission in source that passes the test specified by expression.
        /// </returns>
        public rpt_Permission Get(Expression<Func<rpt_Permission, bool>> expression)
        {
            return UnitOfWork.Get<rpt_Permission>(expression);
        }

        /// <summary>
        /// Get all rpt_Permission.
        /// </summary>
        /// <returns>The new IList&lt;rpt_Permission&gt; instance.</returns>
        public IList<rpt_Permission> GetAll()
        {
            return UnitOfWork.GetAll<rpt_Permission>();
        }

        /// <summary>
        /// Get all rpt_Permission that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each rpt_Permission for a condition.</param>
        /// <returns>The new IList&lt;rpt_Permission&gt; instance.</returns>
        public IList<rpt_Permission> GetAll(Expression<Func<rpt_Permission, bool>> expression)
        {
            return UnitOfWork.GetAll<rpt_Permission>(expression);
        }

        /// <summary>
        /// Get all rpt_Permission.
        /// </summary>
        /// <returns>The new IEnumerable&lt;rpt_Permission&gt; instance.</returns>
        public IEnumerable<rpt_Permission> GetIEnumerable()
        {
            return UnitOfWork.GetIEnumerable<rpt_Permission>();
        }

        /// <summary>
        /// Get all rpt_Permission that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each rpt_Permission for a condition.</param>
        /// <returns>The new IEnumerable&lt;rpt_Permission&gt; instance.</returns>
        public IEnumerable<rpt_Permission> GetIEnumerable(Expression<Func<rpt_Permission, bool>> expression)
        {
            return UnitOfWork.GetIEnumerable<rpt_Permission>(expression);
        }

        /// <summary>
        /// Get all rpt_Permission.
        /// </summary>
        /// <returns>The new IQueryable&lt;rpt_Permission&gt; instance.</returns>
        public IQueryable<rpt_Permission> GetIQueryable()
        {
            return UnitOfWork.GetIQueryable<rpt_Permission>();
        }

        /// <summary>
        /// Get all rpt_Permission that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each rpt_Permission for a condition.</param>
        /// <returns>The new IQueryable&lt;rpt_Permission&gt; instance.</returns>
        public IQueryable<rpt_Permission> GetIQueryable(Expression<Func<rpt_Permission, bool>> expression)
        {
            return UnitOfWork.GetIQueryable<rpt_Permission>(expression);
        }

        /// <summary>
        /// Take a few rpt_Permission in a sequence was sorted on server.
        /// </summary>
        /// <param name="ignoreCount">Number of rpt_Permission will ignore.</param>
        /// <param name="takeCount">Number of rpt_Permission will take.</param>
        /// <param name="keys">The key columns by which to order the results.</param>
        /// <returns>The new IList&lt;rpt_Permission&gt; instance.</returns>
        public IList<rpt_Permission> GetRange(int ignoreCount, int takeCount, string keys)
        {
            return UnitOfWork.GetRange<rpt_Permission>(ignoreCount, takeCount, keys);
        }

        /// <summary>
        /// Take a few rpt_Permission in a sequence was sorted on server.
        /// </summary>
        /// <param name="ignoreCount">Number of rpt_Permission will ignore.</param>
        /// <param name="takeCount">Number of rpt_Permission will take.</param>
        /// <param name="keys">The key columns by which to order the results.</param>
        /// <param name="expression">A function to test each rpt_Permission for a condition.</param>
        /// <returns>The new IList&lt;rpt_Permission&gt; instance.</returns>
        public IList<rpt_Permission> GetRange(int ignoreCount, int takeCount, string keys, Expression<Func<rpt_Permission, bool>> expression)
        {
            return UnitOfWork.GetRange<rpt_Permission>(ignoreCount, takeCount, keys, expression);
        }

        /// <summary>
        /// Take a few rpt_Permission in sequence was sorted by descending on server.
        /// </summary>
        /// <typeparam name="TKey">Type of rpt_Permission to sort</typeparam>
        /// <param name="ignoreCount">Number of rpt_Permission will ignore.</param>
        /// <param name="takeCount">Number of rpt_Permission will take.</param>
        /// <param name="keySelector">The key columns by which to order the results.</param>
        /// <returns>The new IList&lt;rpt_Permission&gt; instance.</returns>
        public IList<rpt_Permission> GetRangeDescending<TKey>(int ignoreCount, int takeCount, Expression<Func<rpt_Permission, TKey>> keySelector)
        {
            return UnitOfWork.GetRangeDescending(ignoreCount, takeCount, keySelector);
        }

        /// <summary>
        /// Take a few rpt_Permission in sequence was sorted by descending on server.
        /// </summary>
        /// <typeparam name="TKey">Type of rpt_Permission to sort</typeparam>
        /// <param name="ignoreCount">Number of rpt_Permission will ignore.</param>
        /// <param name="takeCount">Number of rpt_Permission will take.</param>
        /// <param name="keySelector">The key columns by which to order the results.</param>
        /// <param name="expression">A function to test each object for a condition.</param>
        /// <returns>The new IList&lt;rpt_Permission&gt; instance.</returns>
        public IList<rpt_Permission> GetRangeDescending<TKey>(int ignoreCount, int takeCount, Expression<Func<rpt_Permission, TKey>> keySelector, Expression<Func<rpt_Permission, bool>> expression)
        {
            return UnitOfWork.GetRangeDescending(ignoreCount, takeCount, keySelector, expression);
        }

        /// <summary>
        /// Updates an rpt_Permission in the object context with data from the data source.
        /// </summary>
        /// <param name="rpt_Permission">The rpt_Permission to be refreshed.</param>
        public rpt_Permission Refresh(rpt_Permission rpt_Permission)
        {
            UnitOfWork.Refresh<rpt_Permission>(rpt_Permission);
            if (rpt_Permission.EntityState != System.Data.EntityState.Detached)
                return rpt_Permission;
            return null;
        }

        /// <summary>
        /// Updates a sequence of rpt_Permission in the object context with data from the data source.
        /// </summary>
        /// <typeparam name="rpt_Permission">Type of object in a sequence to refresh.</typeparam>
        /// <param name="rpt_Permission">Object collection to be refreshed.</param>
        public void Refresh(IEnumerable<rpt_Permission> rpt_Permission)
        {
            UnitOfWork.Refresh<rpt_Permission>(rpt_Permission);
        }

        /// <summary>
        /// Updates a sequence of rpt_Permission in the object context with data from the data source.
        /// </summary>
        public void Refresh()
        {
            UnitOfWork.Refresh<rpt_Permission>();
        }

        /// <summary>
        /// Persists all updates to the data source and resets change tracking in the object context.
        /// </summary>
        public void Commit()
        {
            UnitOfWork.Commit();
        }

        /// <summary>
        /// Persists all updates to the data source with the specified System.Data.Objects.SaveOptions.
        /// </summary>
        /// <param name="options">A System.Data.Objects.SaveOptions value that determines the behavior of the operation.</param>
        public void Commit(SaveOptions options)
        {
            UnitOfWork.Commit(options);
        }

        /// <summary>
        /// Starts a database transaction.
        /// </summary>
        public void BeginTransaction()
        {
            UnitOfWork.BeginTransaction();
        }

        /// <summary>
        /// Commits the database transaction.
        /// </summary>
        public void CommitTransaction()
        {
            UnitOfWork.CommitTransaction();
        }

        /// <summary>
        /// Rolls back a transaction from a pending state.
        /// </summary>
        public void RollbackTransaction()
        {
            UnitOfWork.RollbackTransaction();
        }

        #endregion

        #endregion

        #region Custom Code


        #endregion
    }
}

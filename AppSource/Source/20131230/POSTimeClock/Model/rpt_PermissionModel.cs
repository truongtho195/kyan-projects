//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using CPC.Helper;
using CPC.Toolkit.Base;
using CPC.TimeClock.Database;

namespace CPC.TimeClock.Model
{
    /// <summary>
    /// Model for table rpt_Permission
    /// </summary>
    [Serializable]
    public partial class rpt_PermissionModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public rpt_PermissionModel()
        {
            this.IsNew = true;
            this.rpt_Permission = new rpt_Permission();
        }

        // Default constructor that set entity to field
        public rpt_PermissionModel(rpt_Permission rpt_permission, bool isRaiseProperties = false)
        {
            this.rpt_Permission = rpt_permission;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public rpt_Permission rpt_Permission { get; private set; }

        #endregion

        #region Primitive Properties

        protected int _id;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Id</param>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected short _type;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Type</param>
        /// </summary>
        public short Type
        {
            get { return this._type; }
            set
            {
                if (this._type != value)
                {
                    this.IsDirty = true;
                    this._type = value;
                    OnPropertyChanged(() => Type);
                    PropertyChangedCompleted(() => Type);
                }
            }
        }

        protected string _userResource;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the UserResource</param>
        /// </summary>
        public string UserResource
        {
            get { return this._userResource; }
            set
            {
                if (this._userResource != value)
                {
                    this.IsDirty = true;
                    this._userResource = value;
                    OnPropertyChanged(() => UserResource);
                    PropertyChangedCompleted(() => UserResource);
                }
            }
        }

        protected string _code;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Code</param>
        /// </summary>
        public string Code
        {
            get { return this._code; }
            set
            {
                if (this._code != value)
                {
                    this.IsDirty = true;
                    this._code = value;
                    OnPropertyChanged(() => Code);
                    PropertyChangedCompleted(() => Code);
                }
            }
        }

        protected bool _isView;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the IsView</param>
        /// </summary>
        public bool IsView
        {
            get { return this._isView; }
            set
            {
                if (this._isView != value)
                {
                    this.IsDirty = true;
                    this._isView = value;
                    OnPropertyChanged(() => IsView);
                    PropertyChangedCompleted(() => IsView);
                }
            }
        }

        protected bool _isPrint;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the IsPrint</param>
        /// </summary>
        public bool IsPrint
        {
            get { return this._isPrint; }
            set
            {
                if (this._isPrint != value)
                {
                    this.IsDirty = true;
                    this._isPrint = value;
                    OnPropertyChanged(() => IsPrint);
                    PropertyChangedCompleted(() => IsPrint);
                }
            }
        }

        protected bool _right;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Right</param>
        /// </summary>
        public bool Right
        {
            get { return this._right; }
            set
            {
                if (this._right != value)
                {
                    this.IsDirty = true;
                    this._right = value;
                    OnPropertyChanged(() => Right);
                    PropertyChangedCompleted(() => Right);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <param>Public Method</param>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set PropertyModel to Entity</param>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.rpt_Permission.Id = this.Id;
            this.rpt_Permission.Type = this.Type;
            if (this.UserResource != null)
                this.rpt_Permission.UserResource = this.UserResource.Trim();
            if (this.Code != null)
                this.rpt_Permission.Code = this.Code.Trim();
            this.rpt_Permission.IsView = this.IsView;
            this.rpt_Permission.IsPrint = this.IsPrint;
            this.rpt_Permission.Right = this.Right;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set Entity to PropertyModel</param>
        /// </summary
        public void ToModel()
        {
            this._id = this.rpt_Permission.Id;
            this._type = this.rpt_Permission.Type;
            this._userResource = this.rpt_Permission.UserResource;
            this._code = this.rpt_Permission.Code;
            this._isView = this.rpt_Permission.IsView;
            this._isPrint = this.rpt_Permission.IsPrint;
            this._right = this.rpt_Permission.Right;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set Entity to PropertyModel</param>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.rpt_Permission.Id;
            this.Type = this.rpt_Permission.Type;
            this.UserResource = this.rpt_Permission.UserResource;
            this.Code = this.rpt_Permission.Code;
            this.IsView = this.rpt_Permission.IsView;
            this.IsPrint = this.rpt_Permission.IsPrint;
            this.Right = this.rpt_Permission.Right;
        }

        #endregion

        #region Custom Code


        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;

                switch (columnName)
                {
                    case "Id":
                        break;
                    case "Type":
                        break;
                    case "UserResource":
                        break;
                    case "Code":
                        break;
                    case "IsView":
                        break;
                    case "IsPrint":
                        break;
                    case "Right":
                        break;
                }

                if (!string.IsNullOrWhiteSpace(message))
                    return message;
                return null;
            }
        }

        #endregion
    }
}

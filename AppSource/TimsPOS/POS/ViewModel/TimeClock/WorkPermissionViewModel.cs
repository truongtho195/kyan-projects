//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Threading;
using CPC.Control;
using CPC.POS.Database;
using CPC.Helper;
using CPC.POS.Model;
using CPC.POS.Repository;
using CPC.Toolkit.Base;
using CPC.Toolkit.Command;
using CPC.POS.View;

namespace CPC.POS.ViewModel
{
    class WorkPermissionViewModel : ViewModelBase
    {
        #region Define

        // Commands
        public ICommand NewCommand { get; private set; }
        public ICommand SaveCommand { get; private set; }
        public ICommand DeleteCommand { get; private set; }
        public ICommand SearchCommand { get; private set; }
        public ICommand ClearCommand { get; private set; }
        public ICommand AssignEmployeeCommand { get; private set; }
        public ICommand RemoveEmployeeCommand { get; private set; }
        public ICommand MouseDoubleClickCommand { get; private set; }
        public ICommand WorkPermissionSelectionChangedCommand { get; private set; }
        public ICommand EmployeeSelectionChangedCommand { get; private set; }
        public ICommand FilterCommand { get; private set; }

        private ICollectionView _collectionView;
        private base_GuestRepository _employeeRepository = new base_GuestRepository();

        private List<tims_HolidayHistory> HolidayHistoryCollection;

        //private IList<int> _permission;

        //public IList<int> Permission
        //{
        //    get
        //    {
        //        if (null == _permission && null != Define.Permissions)
        //        {
        //            _permission = define.Permissions
        //                .Where(x => !x.Value.Has(PermissionTypes.View)).Select(x => x.Key).ToList();
        //        }
        //        return _permission;
        //    }
        //}

        #endregion

        #region Properties

        #region Employee Collection
        private ObservableCollection<base_GuestModel> _employeeCollection;
        /// <summary>
        /// Gets or sets the EmployeeCollection.
        /// </summary>
        public ObservableCollection<base_GuestModel> EmployeeCollection
        {
            get { return _employeeCollection; }
            set
            {
                if (_employeeCollection != value)
                {
                    _employeeCollection = value;
                    OnPropertyChanged(() => EmployeeCollection);
                }
            }
        }
        #endregion

        #region Selected Employee
        private base_GuestModel _selectedEmployee;
        /// <summary>
        /// Gets or sets the SelectedEmployee.
        /// </summary>
        public base_GuestModel SelectedEmployee
        {
            get { return _selectedEmployee; }
            set
            {
                if (_selectedEmployee != value)
                {
                    _selectedEmployee = value;
                    if (_selectedEmployee != null)
                    {
                        //if (!_isWorkPermissionChanged)
                        //{
                        _selectedEmployee.WorkPermissionCollection = new ObservableCollection<tims_WorkPermissionModel>(_selectedEmployee.base_Guest.tims_WorkPermission.OrderBy(x => x.FromDate).Select(x => new tims_WorkPermissionModel(x)));
                        if (_selectedEmployee.WorkPermissionCollection.Count > 0)
                            SelectedWorkPermission = _selectedEmployee.WorkPermissionCollection.FirstOrDefault();
                        else
                            SelectedWorkPermission = null;
                        //}
                    }
                    OnPropertyChanged(() => SelectedEmployee);

                }
            }
        }
        #endregion

        #region Selected Permission
        private tims_WorkPermissionModel _selectedWorkPermission;
        /// <summary>
        /// Gets or sets the SelectedPermission.
        /// </summary>
        public tims_WorkPermissionModel SelectedWorkPermission
        {
            get { return _selectedWorkPermission; }
            set
            {
                if (_selectedWorkPermission != value)
                {
                    _selectedWorkPermission = value;
                    if (null != value)
                    {
                        if (value.IsNew)
                        {
                            _selectedWorkPermission.FromDate = DateTime.Today;
                            _selectedWorkPermission.ToDate = DateTime.Today;
                            _selectedWorkPermission.PayEventSelected = 0;
                            //_selectedWorkPermission.SetForPayEventSelected();
                            _selectedWorkPermission.ActiveFlag = true;
                            _selectedWorkPermission.Note = string.Empty;
                            _selectedWorkPermission.NoOfDays = 1;
                            _selectedWorkPermission.HourPerDay = 1;
                            _selectedWorkPermission.IsDirty = false;
                            this.EmployeeList.Clear();
                        }
                        else
                        {
                            _selectedWorkPermission.ToModel();
                            _selectedWorkPermission.SetForPayEventSelected();
                            _selectedWorkPermission.EndUpdate();
                        }

                    }
                    OnPropertyChanged(() => SelectedWorkPermission);
                    OnPropertyChanged(() => Deactivated);

                    if (SelectedWorkPermission != null)
                    {
                        SelectedWorkPermission.PropertyChanged -= new PropertyChangedEventHandler(SelectedWorkPermission_PropertyChanged);
                        SelectedWorkPermission.PropertyChanged += new PropertyChangedEventHandler(SelectedWorkPermission_PropertyChanged);
                    }
                }
            }
        }


        private void SelectedWorkPermission_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if ("FromDate".Equals(e.PropertyName) || "ToDate".Equals(e.PropertyName) || "OvertimeOptions".Equals(e.PropertyName) || "PermissionType".Equals(e.PropertyName))
            {
                if (SelectedWorkPermission.ToDate >= SelectedWorkPermission.FromDate)
                {
                    if (SelectedWorkPermission.IsNew)
                    {
                        foreach (var employeeModel in this.EmployeeList)
                        {
                            SetEmployeeDuplicatedWorkPermission(employeeModel);
                        }
                    }
                    else
                    {
                        SetEmployeeDuplicatedWorkPermission(SelectedEmployee);
                    }
                }
            }
        }
        #endregion

        #region Employee List
        private ObservableCollection<base_GuestModel> _employeeList;
        /// <summary>
        /// Gets or sets the EmployeeList.
        /// </summary>
        public ObservableCollection<base_GuestModel> EmployeeList
        {
            get { return _employeeList; }
            set
            {
                if (_employeeList != value)
                {
                    _employeeList = value;
                    OnPropertyChanged(() => EmployeeList);
                }
            }
        }
        #endregion

        #region IsSearchMode
        /// <summary>
        /// Search Mode: 
        /// true open the Search grid.
        /// false close the search grid and open data entry.
        /// </summary>
        private bool _isSearchMode = false;
        public bool IsSearchMode
        {
            get { return _isSearchMode; }
            set
            {
                if (value != _isSearchMode)
                {
                    _isSearchMode = value;
                    OnPropertyChanged(() => IsSearchMode);
                }
            }
        }
        #endregion

        #region Searches
        /// <summary>
        /// Properties For Searh control
        /// </summary>
        private ObservableCollection<object> _searches;
        public ObservableCollection<object> Searches
        {
            get
            {
                if (_searches == null)
                    LoadSearchList();
                return _searches;
            }
        }
        private void LoadSearchList()
        {
            _searches = new ObservableCollection<object>();
            _searches.Add(
               new FilterItemModel
               {
                   ValueMember = "EmployeeNum",
                   DisplayMember = "Employee #",
                   Type = SearchType.Text,
                   IsDefault = true
               });
            _searches.Add(
                new FilterItemModel
                {
                    ValueMember = "PemissionType",
                    DisplayMember = "Pemission Type",
                    Type = SearchType.Status,
                    ItemsSource = Common.WorkPermissionType.ToStatusModelCollection(),
                    IsDefault = true
                });

            _searches.Add(
               new FilterItemModel
               {
                   ValueMember = "LastName",
                   DisplayMember = "Last Name",
                   Type = SearchType.Text
               });
            _searches.Add(
               new FilterItemModel
               {
                   ValueMember = "FirstName",
                   DisplayMember = "First Name",
                   Type = SearchType.Text
               });
            _searches.Add(
               new FilterItemModel
               {
                   ValueMember = "FromDate",
                   DisplayMember = "From",
                   Type = SearchType.Date
               });
            _searches.Add(
               new FilterItemModel
               {
                   ValueMember = "ToDate",
                   DisplayMember = "To",
                   Type = SearchType.Date
               });
            _searches.Add(
               new FilterItemModel
               {
                   ValueMember = "Note",
                   DisplayMember = "Note",
                   Type = SearchType.Text
               });
        }
        #endregion

        #region IsAdvanceMode
        private bool _isAdvanceMode;

        public bool IsAdvanceMode
        {
            get { return _isAdvanceMode; }
            set
            {
                _isAdvanceMode = value;
                OnPropertyChanged(() => IsAdvanceMode);
            }
        }
        #endregion

        #region FilterText
        /// <summary>
        /// GroupPermission filter text
        /// </summary>
        private string filterText;
        public string FilterText
        {
            get
            {
                return filterText;
            }
            set
            {
                filterText = value;
                Search(filterText);
                OnPropertyChanged(() => FilterText);
            }
        }
        #endregion

        #region TotalItem
        /// <summary>
        /// Gets or sets the CountFilter.
        /// </summary>
        public int TotalItem
        {
            get
            {
                if (_collectionView != null)
                    return _collectionView.OfType<base_GuestModel>().Count();
                return 0;
            }
        }
        #endregion

        #region Deactived
        /// <summary>
        /// Gets or sets the Deactived.
        /// </summary>
        public bool Deactivated
        {
            get
            {
                if (SelectedWorkPermission != null)
                    return SelectedWorkPermission.ActiveFlag;
                return true;
            }

        }
        #endregion

        #region PayEventCollection
        private ObservableCollection<ComboItem> _payEventCollection;
        /// <summary>
        /// Gets or sets the PayEventCollection.
        /// </summary>
        public ObservableCollection<ComboItem> PayEventCollection
        {
            get { return _payEventCollection; }
            set
            {
                if (_payEventCollection != value)
                {
                    _payEventCollection = value;
                    OnPropertyChanged(() => PayEventCollection);
                }
            }
        }
        #endregion

        #endregion

        #region Constructor

        // Default contructor
        public WorkPermissionViewModel()
            : base()
        {
            _ownerViewModel = App.Current.MainWindow.DataContext;

            InitialCommand();
            InitialData();
            ChangeSearchMode(false);

        }

        public WorkPermissionViewModel(bool isSearchMode)
            : this()
        {
            IsSearchMode = isSearchMode;
            if (!IsSearchMode)
            {
                SelectedWorkPermission = new tims_WorkPermissionModel();
            }
        }

        #endregion

        #region Command Methods

        #region New Command
        /// <summary>
        /// Method to check whether the NewCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnNewCommandCanExecute()
        {
            return true;
        }

        /// <summary>
        /// Method to check whether the NewCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private void OnNewCommandExecute()
        {

        }
        #endregion

        #region Save Command
        /// <summary>
        /// Method to check whether the SaveCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnSaveCommandCanExecute(object param)
        {
            if (this.SelectedWorkPermission == null)
                return false;
            else if (this.SelectedWorkPermission.IsNew)
                return IsValid & EmployeeList.Count > 0 && this.EmployeeList.Count(x => x.DuplicateWorkPermission) == 0;
            return this.SelectedWorkPermission.IsDirty && IsValid && !SelectedWorkPermission.HasDuplicated;
        }

        /// <summary>
        /// Method to invoke when the SaveCommand command is executed.
        /// </summary>
        private void OnSaveCommandExecute(object param)
        {
            try
            {
                SaveWorkPermission();
                //Go to Grid Search
                this.IsSearchMode = true;
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw ex;
            }
        }

        #endregion

        #region Delete Command
        /// <summary>
        /// Method to check whether the DeleteCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnDeleteCommandCanExecute()
        {
            return true;
        }

        /// <summary>
        /// Method to invoke when the DeleteCommand command is executed.
        /// </summary>
        private void OnDeleteCommandExecute()
        {
            // TODO: Handle command logic here
        }
        #endregion

        #region Search Command
        /// <summary>
        /// Method to check whether the SearchCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnSearchCommandCanExecute(object param)
        {
            if (this.EmployeeCollection == null || (this.EmployeeCollection != null && this.EmployeeCollection.Count == 0))
                return false;
            return true;
        }

        /// <summary>
        /// Method to invoke when the SearchCommand command is executed.
        /// </summary>
        private void OnSearchCommandExecute(object param)
        {
            Search(param);

        }
        #endregion

        #region Clear Command
        /// <summary>
        /// Method to check whether the SearchCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnClearCommandCanExecute()
        {
            if (SelectedWorkPermission == null)
                return false;
            return SelectedWorkPermission.IsNew && SelectedWorkPermission.IsDirty;
        }

        /// <summary>
        /// Method to invoke when the SearchCommand command is executed.
        /// </summary>
        private void OnClearCommandExecute()
        {
            if (SelectedWorkPermission.IsNew)
                SelectedWorkPermission = new tims_WorkPermissionModel();
        }
        #endregion

        #region Assign Employee
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private bool OnAssignEmployeeCommandCanExecute()
        {
            return true;
        }

        /// <summary>
        /// 
        /// </summary>
        private void OnAssignEmployeeCommandExecute()
        {
            AssignEmployee();
        }

        #endregion

        #region Remove Employee
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private bool OnRemoveEmployeeCommandCanExecute(object param)
        {
            if (param == null)
                return false;
            return param != null & (param as ObservableCollection<object>).Count > 0;
        }

        /// <summary>
        /// 
        /// </summary>
        private void OnRemoveEmployeeCommandExecute(object param)
        {
            RemoveEmployee(param);
        }


        #endregion

        #region Mouse Double Click Command
        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        private bool CanMouseDoubleClickExecute(object param)
        {
            if (IsSearchMode && param == null)
                return false;
            return SelectedWorkPermission != null;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        private void OnMouseDoubleClickExecuted(object param)
        {
            try
            {
                if (param != null && param is tims_WorkPermissionModel)
                {
                    OnWorkPermissionSelectionChangedExecuted(param);
                    OnPropertyChanged(() => Deactivated);
                }

                if (!IsSearchMode && SelectedWorkPermission.IsNew && SelectedWorkPermission.IsDirty) // Is a New Item
                    NewItemDirtyCheck(true);
                else if (!IsSearchMode && SelectedWorkPermission.IsDirty) // Is Old Item
                    OldItemDirtyCheck(true);
                else
                    IsSearchMode = !IsSearchMode;
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw;
            }
        }

        #endregion

        #region Work Permission Selection Changed
        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        private bool OnWorkPermissionSelectionChangedCanExecuted(object item)
        {
            if (item == null)
                return false;
            return item is tims_WorkPermissionModel;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        private void OnWorkPermissionSelectionChangedExecuted(object item)
        {
            try
            {
                SelectedWorkPermission = item as tims_WorkPermissionModel;
                //_isWorkPermissionChanged = true;
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw;
            }
        }
        #endregion

        #region Employee Selection Changed
        /// <summary>
        ///  Employee Selection Changed
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        private bool OnEmployeeSelectionChangedCanExecuted(object item)
        {
            if (item == null)
                return false;
            return item is base_GuestModel;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        private void OnEmployeeSelectionChangedExecuted(object item)
        {
            try
            {
                SelectedEmployee = item as base_GuestModel;
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw;
            }

        }
        #endregion

        #endregion

        #region Private Methods
        /// <summary>
        /// Initial Command On Constructors
        /// </summary>
        private void InitialCommand()
        {
            _log4net.Info("InitialCommand");
            NewCommand = new RelayCommand(OnNewCommandExecute, OnNewCommandCanExecute);
            SaveCommand = new RelayCommand<object>(OnSaveCommandExecute, OnSaveCommandCanExecute);
            DeleteCommand = new RelayCommand(OnDeleteCommandExecute, OnDeleteCommandCanExecute);
            SearchCommand = new RelayCommand<object>(OnSearchCommandExecute, OnSearchCommandCanExecute);
            ClearCommand = new RelayCommand(OnClearCommandExecute, OnClearCommandCanExecute);
            AssignEmployeeCommand = new RelayCommand(OnAssignEmployeeCommandExecute, OnAssignEmployeeCommandCanExecute);
            RemoveEmployeeCommand = new RelayCommand<object>(OnRemoveEmployeeCommandExecute, OnRemoveEmployeeCommandCanExecute);
            MouseDoubleClickCommand = new RelayCommand<object>(OnMouseDoubleClickExecuted, this.CanMouseDoubleClickExecute);
            WorkPermissionSelectionChangedCommand = new RelayCommand<object>(OnWorkPermissionSelectionChangedExecuted, OnWorkPermissionSelectionChangedCanExecuted);
            EmployeeSelectionChangedCommand = new RelayCommand<object>(OnEmployeeSelectionChangedExecuted, OnEmployeeSelectionChangedCanExecuted);
        }

        /// <summary>
        /// Initial Data
        /// </summary>
        private void InitialData()
        {
            try
            {
                this.RefreshAll();
                tims_HolidayHistoryRepository holidayRepository = new tims_HolidayHistoryRepository();
                this.HolidayHistoryCollection = holidayRepository.GetAll().ToList();

                EmployeeList = new ObservableCollection<base_GuestModel>();
                EmployeeCollection = new ObservableCollection<base_GuestModel>(_employeeRepository.GetAll(x => x.IsActived).Select(x => new base_GuestModel(x)).OrderBy(x => x.Id));
                _collectionView = CollectionViewSource.GetDefaultView(EmployeeCollection);
                Search(null);
                PayEventCollection = new ObservableCollection<ComboItem>(Common.PayEvents);
                OnPropertyChanged(() => TotalItem);
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw ex;
            }
        }

        /// <summary>
        /// Save Workpermission
        /// </summary>
        private void SaveWorkPermission()
        {
            try
            {
                tims_WorkPermissionRepository workPermissionRepository = new tims_WorkPermissionRepository();
                if (SelectedWorkPermission.IsNew)
                {
                    base_GuestRepository employeeRepository = new base_GuestRepository();
                    foreach (var item in EmployeeList)
                    {
                        tims_WorkPermissionModel workPermissionModel = new tims_WorkPermissionModel();
                        workPermissionModel = SelectedWorkPermission.Clone<tims_WorkPermissionModel>();
                        workPermissionModel.EmployeeId = item.Id;
                        workPermissionModel.CreatedDate = DateTimeExt.Now;
                        //[FIX]workPermissionModel.CreatedById = Define.UserLoginID;
                        workPermissionModel.ToEntity();
                        workPermissionModel.Id = 0;
                        workPermissionModel.IsNew = true;
                        workPermissionRepository.Add(workPermissionModel.tims_WorkPermission);
                        workPermissionRepository.Commit();
                        workPermissionModel.EndUpdate();
                        //Add to collection if a New Item
                        var employeeModel = EmployeeCollection.Where(x => x.Id == item.Id).SingleOrDefault();
                        if (employeeModel.WorkPermissionCollection != null)
                            employeeModel.WorkPermissionCollection.Add(workPermissionModel);
                        else
                            employeeModel.WorkPermissionCollection = new ObservableCollection<tims_WorkPermissionModel>(employeeModel.base_Guest.tims_WorkPermission.OrderBy(x => x.FromDate).Select(x => new tims_WorkPermissionModel(x)));

                        UpdateTimeLog(true, item);
                    }
                    this.SelectedWorkPermission = null;
                    this.SelectedEmployee = null;
                    Search(null);
                    EmployeeList.Clear();

                }
                else if (SelectedWorkPermission.IsDirty)
                {
                    //SelectedWorkPermission.ModifiedByID = Define.UserLoginID;
                    SelectedWorkPermission.ModifiedDate = DateTimeExt.Now;
                    this.SelectedWorkPermission.ToEntity();
                    workPermissionRepository.Commit();
                    this.SelectedWorkPermission.EndUpdate();

                    UpdateTimeLog(false, this.SelectedEmployee);
                }
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw ex;
            }
        }

        /// <summary>
        /// Search Work Permission with Simple or Advance Mode
        /// </summary>
        /// <param name="param"></param>
        private void Search(object param)
        {
            try
            {
                if (IsAdvanceMode)
                {
                    // Advance Filter
                    if (param is ObservableCollection<FilterItemModel>)
                    {
                        ObservableCollection<FilterItemModel> collection = (param as ObservableCollection<FilterItemModel>);
                        _collectionView.Filter = (one) =>
                        {
                            bool result = true;
                            foreach (var item in collection)
                            {
                                if (item == null)
                                {
                                    result &= true;
                                    continue;
                                }

                                base_GuestModel employeeModel = one as base_GuestModel;

                                if (employeeModel.base_Guest.tims_WorkPermission.Count == 0)
                                {
                                    result &= false;
                                }

                                switch (item.ValueMember)
                                {
                                    case "EmployeeNum":
                                        if (employeeModel != null && string.IsNullOrWhiteSpace(employeeModel.base_Guest.GuestNo))
                                            result = false;
                                        else if (item.Value1 != null)
                                            result &= employeeModel.base_Guest.GuestNo.ToLower().Contains(item.Value1.ToString().ToLower());
                                        break;
                                    case "PemissionType":
                                        if (item.Value1 == null)
                                            result &= true;
                                        else if (employeeModel != null)
                                        {
                                            IList<StatusModel> permissionTypes = item.Value1 as List<StatusModel>;

                                            var query = from i in permissionTypes
                                                        where employeeModel.base_Guest.tims_WorkPermission.Count(x => ((PermissionTypes)x.PermissionType).Has(i.Key)) > 0
                                                        select i;
                                            result &= query.Count() > 0;
                                        }
                                        break;
                                    case "LastName":
                                        if (employeeModel != null && string.IsNullOrWhiteSpace(employeeModel.base_Guest.LastName))
                                            result = false;
                                        else if (item.Value1 != null)
                                            result &= employeeModel.base_Guest.LastName.ToLower().Contains(item.Value1.ToString().ToLower());
                                        break;
                                    case "FirstName":
                                        if (employeeModel != null && string.IsNullOrWhiteSpace(employeeModel.base_Guest.FirstName))
                                            result = false;
                                        else if (item.Value1 != null)
                                            result &= employeeModel.base_Guest.FirstName.ToLower().Contains(item.Value1.ToString().ToLower());
                                        break;
                                    case "FromDate":
                                        if (employeeModel != null && employeeModel.base_Guest.tims_WorkPermission == null)
                                            result = false;
                                        else
                                        {
                                            if (item.Value1 != null)
                                                result &= (employeeModel.base_Guest.tims_WorkPermission.Count(x => x.FromDate >= ((DateTime)item.Value1)) > 0);
                                            if (item.Value2 != null)
                                                result &= (employeeModel.base_Guest.tims_WorkPermission.Count(x => x.FromDate <= ((DateTime)item.Value2)) > 0);
                                        }
                                        break;
                                    case "ToDate":
                                        if (employeeModel != null && employeeModel.base_Guest.tims_WorkPermission == null)
                                            result = false;
                                        else
                                        {
                                            if (item.Value1 != null)
                                                result &= (employeeModel.base_Guest.tims_WorkPermission.Count(x => x.ToDate >= ((DateTime)item.Value1)) > 0);
                                            if (item.Value2 != null)
                                                result &= (employeeModel.base_Guest.tims_WorkPermission.Count(x => x.ToDate <= ((DateTime)item.Value2)) > 0);
                                        }
                                        break;
                                    case "Note":
                                        if (employeeModel != null && employeeModel.base_Guest.tims_WorkPermission == null)
                                            result = false;
                                        else if (item.Value1 != null)
                                            result &= (employeeModel.base_Guest.tims_WorkPermission.Count(x => x.Note.ToLower().Contains(item.Value1.ToString().ToLower())) > 0);
                                        break;
                                }

                            }
                            return result;
                        };
                    }
                }
                else // Simple Filter
                {
                    if (param == null)
                    {
                        _collectionView.Filter = (one) =>
                        {
                            base_GuestModel employeeModel = one as base_GuestModel;
                            if (employeeModel.base_Guest.tims_WorkPermission.Count == 0)
                            {
                                return false;
                            }
                            return true;
                        };
                    }
                    else
                    {
                        _collectionView.Filter = (one) =>
                        {
                            bool result = false;
                            base_GuestModel employeeModel = one as base_GuestModel;
                            if (employeeModel.base_Guest.tims_WorkPermission.Count == 0)
                            {
                                return false;
                            }

                            //Fitler for  Employee Number
                            if (employeeModel != null && string.IsNullOrWhiteSpace(employeeModel.base_Guest.GuestNo))
                                result = false;
                            else
                                result |= employeeModel.base_Guest.GuestNo.ToLower().Contains(param.ToString().ToLower());

                            //Fitler for  PermissionTypes
                            if (employeeModel != null && employeeModel.base_Guest.tims_WorkPermission.Count == 0)
                                result = false;
                            else
                            {
                                IList<ComboItem> permissionTypes = Common.WorkPermissionType.Where(x => x.Text.ToLower().Contains(param.ToString().ToLower())).ToList();
                                if (permissionTypes == null)
                                    result = false;
                                else
                                {
                                    var query = from i in permissionTypes
                                                where employeeModel.base_Guest.tims_WorkPermission.Count(x => ((PermissionTypes)x.PermissionType).Has(i.Value)) > 0
                                                select i;
                                    result |= query.Count() > 0;
                                }
                            }

                            //Fitler for LastName
                            if (employeeModel != null && string.IsNullOrWhiteSpace(employeeModel.base_Guest.LastName))
                                result = false;
                            else
                                result |= employeeModel.base_Guest.LastName.ToLower().Contains(param.ToString().ToLower());

                            //Fitler for  FirstName
                            if (employeeModel != null && string.IsNullOrWhiteSpace(employeeModel.base_Guest.FirstName))
                                result = false;
                            else
                                result |= employeeModel.base_Guest.FirstName.ToLower().Contains(param.ToString().ToLower());

                            //Fitler for  FromDate && ToDate
                            if (employeeModel != null && employeeModel.base_Guest.tims_WorkPermission == null)
                                result = false;
                            else
                                result |= (employeeModel.base_Guest.tims_WorkPermission.Count(x => x.ToDate.ToString().Contains(param.ToString()) || x.FromDate.ToString().Contains(param.ToString())) > 0);

                            //Fitler for Note
                            if (employeeModel != null && employeeModel.base_Guest.tims_WorkPermission == null)
                                result = false;
                            else
                                result |= (employeeModel.base_Guest.tims_WorkPermission.Count(x => x.Note.ToLower().Contains(param.ToString().ToLower())) > 0);

                            return result;
                        };
                    }

                }
                OnPropertyChanged(() => TotalItem);
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="employeeModel"></param>
        private void SetEmployeeDuplicatedWorkPermission(base_GuestModel employeeModel)
        {
            try
            {
                var dupicate = from d in employeeModel.base_Guest.tims_WorkPermission
                               where d.ActiveFlag
                                      && d.Id != SelectedWorkPermission.Id
                                      && new DateRange(d.FromDate.Date, d.ToDate.Date).Intersects(new DateRange(SelectedWorkPermission.FromDate.Date, SelectedWorkPermission.ToDate.Date))
                                      && (d.OvertimeOptions > 0 && SelectedWorkPermission.OvertimeOptions > 0 && (d.OvertimeOptions.Has(SelectedWorkPermission.OvertimeOptions) || d.OvertimeOptions.In(SelectedWorkPermission.OvertimeOptions))
                                      || (d.PermissionType > 0 && SelectedWorkPermission.PermissionType > 0 && (d.PermissionType.Has(SelectedWorkPermission.PermissionType) || d.PermissionType.In(SelectedWorkPermission.PermissionType))))
                               select d;
                if (SelectedWorkPermission.IsNew)
                {
                    employeeModel.DuplicateWorkPermission = false;
                    if (dupicate.Count() > 0)
                        employeeModel.DuplicateWorkPermission = true;
                }
                else
                {
                    SelectedWorkPermission.HasDuplicated = false;
                    if (dupicate.Count() > 0)
                        SelectedWorkPermission.HasDuplicated = true;
                }
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
            }
        }

        /// <summary>
        /// Update TimeLog After Create or Update WorkPermission
        /// </summary>
        /// <param name="isNewItem">If New WorkPermission , Update what item belong to FromDate - ToDate of WorkPermssion
        ///                         else Update all item TimeLog of that employee
        /// </param>
        /// <param name="employeeModel"></param>
        private void UpdateTimeLog(bool isNewItem, base_GuestModel employeeModel)
        {
            try
            {
                tims_TimeLogRepository timeLogRepository = new tims_TimeLogRepository();
                //Check 13/11/2012
                //if (isNewItem)
                employeeModel.TimeLogCollection = new CollectionBase<tims_TimeLogModel>(employeeModel.base_Guest.tims_TimeLog.Where(x => x.ClockIn.Date >= SelectedWorkPermission.FromDate.Date && x.ClockOut.HasValue && x.ClockOut.Value.Date <= SelectedWorkPermission.ToDate.Date).Select(x => new tims_TimeLogModel(x)));
                //else
                //    employeeModel.TimeLogCollection = new CollectionBase<TimeLogModel>(employeeModel.Employee.TimeLog.Select(x => new TimeLogModel(x)));

                foreach (var timeLogModel in employeeModel.TimeLogCollection)
                {

                    //Check is Day Off Or Holiday
                    if (!this.IsDayOffOrHoliday(timeLogModel))
                    {
                        // Set For workTime
                        timeLogModel.WorkTime = (float)timeLogModel.GetWorkTime().TotalMinutes;

                        //Set For LunchTime 
                        timeLogModel.LunchTime = (float)timeLogModel.GetLunchTime().TotalMinutes;

                        ///
                        ///Set For Early Time & LeaveEarlyTime
                        ///
                        //Get TimeClock Min & TimeClock Max in TimeLogCollection Compare with current item iterated
                        var isTimeLogMin = employeeModel.TimeLogCollection.Where(x => x.ClockIn.Date == timeLogModel.ClockIn.Date).Aggregate((cur, next) => cur.ClockIn < next.ClockIn ? cur : next);
                        var isTimeLogMax = employeeModel.TimeLogCollection.Where(x => x.ClockIn.Date == timeLogModel.ClockIn.Date).Aggregate((cur, next) => cur.ClockOut > next.ClockOut ? cur : next);
                        //if current item is not TimeClock Min & Time Clock Max => set Late & Early =0
                        if (isTimeLogMin != timeLogModel && timeLogModel != isTimeLogMax)
                        {
                            timeLogModel.LateTime = 0;
                            timeLogModel.LeaveEarlyTime = 0;
                        }
                        else
                        {
                            if (isTimeLogMin != null && isTimeLogMin == timeLogModel)// Current item is a TimeClock Min
                                UpdateLateTime(timeLogModel);
                            if (isTimeLogMax != null && isTimeLogMax == timeLogModel)// Current item is a TimeClock Max
                                UpdateLeaveEarlyTime(timeLogModel);

                            if (isTimeLogMin != isTimeLogMax && isTimeLogMin == timeLogModel)//current item is a Min TimeClock & TimeClock min & max is not one =>  Set LeaveEarly Time = 0
                                timeLogModel.LeaveEarlyTime = 0;
                            else if (isTimeLogMin != isTimeLogMax && isTimeLogMax == timeLogModel)// Current item  is a max TimeClock & Min & max is not one = > Set LateTime is 0
                                timeLogModel.LateTime = 0;
                        }
                    }
                    else
                    {
                        timeLogModel.WorkTime = 0;
                        timeLogModel.LunchTime = 0;
                        timeLogModel.LateTime = 0;
                        timeLogModel.LeaveEarlyTime = 0;
                    }
                    ////Calculate For Overtime
                    CalcOverTime(timeLogModel, employeeModel);

                    timeLogModel.ToEntity();
                    
                    timeLogRepository.Commit();
                    timeLogModel.EndUpdate();
                }
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw ex;
            }
        }

        /// <summary>
        /// Get valid overtime value if have work permission
        /// </summary>
        /// <param name="overtimeValue"></param>
        /// <param name="workPermissionDictionary"></param>
        /// <param name="timeLogModel"></param>
        /// <param name="employeeModel"></param>
        /// <param name="workPermissionCollection"></param>
        /// <param name="overtime"></param>
        /// <remarks>
        /// Created by : LongHome
        /// </remarks>
        /// <returns></returns>
        private float GetOvertimeValid(float overtimeValue, IDictionary<Overtime, float> sumOvertimeDictionary,
            tims_TimeLogModel timeLogModel, base_GuestModel employeeModel,
            IEnumerable<tims_WorkPermission> workPermissionCollection, Overtime overtime)
        {
            // Declare overtime valid variable
            float overtimeValid = 0;
            try
            {
                // Declare overtime elapsed variable
                float overtimeElapsed = sumOvertimeDictionary[overtime];

                // Get work permission have over time option equal param
                tims_WorkPermission workPermission = workPermissionCollection.FirstOrDefault(x => x.ActiveFlag && overtime.In(x.OvertimeOptions));

                // Check work permission
                if (workPermission != null)
                {
                    // Get hour per day in work permission
                    float hourPerDay = (float)TimeSpan.FromHours(workPermission.HourPerDay).TotalMinutes;

                    // Declare overtime remaining variable
                    float overtimeRemaining = 0;
                    switch (overtime)
                    {
                        case Overtime.Holiday:
                            if (overtimeElapsed == 0)
                                overtimeValid = Math.Min(hourPerDay, overtimeValue);
                            else
                            {
                                overtimeRemaining = GetOvertimeRemaining(hourPerDay, overtimeElapsed);
                                overtimeValid = Math.Min(overtimeRemaining, overtimeValue);
                            }
                            break;
                        case Overtime.Before:
                            if (overtimeElapsed == 0)
                                overtimeValid = Math.Min(hourPerDay, overtimeValue);
                            else
                            {
                                overtimeRemaining = GetOvertimeRemaining(hourPerDay, overtimeElapsed);
                                overtimeValid = Math.Min(overtimeRemaining, overtimeValue);
                            }
                            break;
                        case Overtime.Break:
                            if (overtimeElapsed + sumOvertimeDictionary[Overtime.Before] + timeLogModel.OvertimeBefore == 0)
                                overtimeValid = Math.Min(hourPerDay, overtimeValue);
                            else
                            {
                                if (Overtime.Before.In(workPermission.OvertimeOptions))
                                    overtimeElapsed += sumOvertimeDictionary[Overtime.Before] + timeLogModel.OvertimeBefore;
                                //overtimeRemaining = GetOvertimeRemaining(hourPerDay, sumOvertimeDictionary[Overtime.Before]);
                                overtimeRemaining = GetOvertimeRemaining(hourPerDay, overtimeElapsed);
                                overtimeValid = Math.Min(overtimeRemaining, overtimeValue);
                            }
                            break;
                        case Overtime.After:
                            if (overtimeElapsed + sumOvertimeDictionary[Overtime.Before] + sumOvertimeDictionary[Overtime.Break] + timeLogModel.OvertimeBefore + timeLogModel.OvertimeLunch == 0)
                                overtimeValid = Math.Min(hourPerDay, overtimeValue);
                            else
                            {
                                if (Overtime.Before.In(workPermission.OvertimeOptions))
                                    overtimeElapsed += sumOvertimeDictionary[Overtime.Before] + timeLogModel.OvertimeBefore;
                                //overtimeRemaining = GetOvertimeRemaining(hourPerDay, sumOvertimeDictionary[Overtime.Before]);
                                if (Overtime.Break.In(workPermission.OvertimeOptions))
                                    overtimeElapsed += sumOvertimeDictionary[Overtime.Break] + timeLogModel.OvertimeLunch;
                                //overtimeRemaining = GetOvertimeRemaining(hourPerDay, sumOvertimeDictionary[Overtime.Before] + sumOvertimeDictionary[Overtime.Break]);
                                overtimeRemaining = GetOvertimeRemaining(hourPerDay, overtimeElapsed);
                                overtimeValid = Math.Min(overtimeRemaining, overtimeValue);
                            }
                            break;
                    }

                    timeLogModel.OvertimeOptions = (int)((Overtime)timeLogModel.OvertimeOptions).Add(overtime);


                }
                else if (overtime.In(timeLogModel.OvertimeOptions))
                {
                    overtimeValid = overtimeValue;

                    // Update overtime options
                    timeLogModel.OvertimeOptions = (int)((Overtime)timeLogModel.OvertimeOptions).Add(overtime);
                }

            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw ex;
            }
            return overtimeValid;
        }

        /// <summary>
        /// Calculate Over Time For employee with TimeLog & WorkPermission
        /// </summary>
        /// <param name="timeLogModel"></param>
        /// <param name="employeeModel"></param>
        private void CalcOverTime(tims_TimeLogModel timeLogModel, base_GuestModel employeeModel)
        {
            try
            {
                // Get work permission collecion
                var workPermissionCollection = employeeModel.base_Guest.tims_WorkPermission.Where(x => timeLogModel.ClockIn.Date >= x.FromDate.Date && timeLogModel.ClockOut.HasValue && timeLogModel.ClockOut.Value.Date <= x.ToDate);
                foreach (var item in workPermissionCollection)
                {
                    UpdateTimeLogPermission(timeLogModel, item);
                }
                // Get previous timelogs to calc overtime elapsed
                var timeLogGroup = (from x in employeeModel.TimeLogCollection.Where(x =>
                                    x.ActiveFlag &&
                                    x.ClockOut.HasValue &&
                                    x.EmployeeId == timeLogModel.EmployeeId && x.WorkScheduleId == timeLogModel.WorkScheduleId)
                                    where x != timeLogModel && timeLogModel.ClockIn.Date == x.ClockIn.Date && timeLogModel.ClockIn > x.ClockIn
                                    group x by new { x.EmployeeId, x.WorkScheduleId } into g
                                    select new
                                    {
                                        SumOvertimeBefore = g.Sum(x => x.OvertimeBefore),
                                        SumOvertimeLunch = g.Sum(x => x.OvertimeLunch),
                                        SumOvertimeAfter = g.Sum(x => x.OvertimeAfter),
                                        SumOvertimeDayOff = g.Sum(x => x.OvertimeDayOff)
                                    }).FirstOrDefault();

                IDictionary<Overtime, float> sumOvertimeDictionary = new Dictionary<Overtime, float>();
                sumOvertimeDictionary.Add(Overtime.Before, 0);
                sumOvertimeDictionary.Add(Overtime.Break, 0);
                sumOvertimeDictionary.Add(Overtime.After, 0);
                sumOvertimeDictionary.Add(Overtime.Holiday, 0);

                if (timeLogGroup != null)
                {
                    sumOvertimeDictionary[Overtime.Before] = timeLogGroup.SumOvertimeBefore;
                    sumOvertimeDictionary[Overtime.Break] = timeLogGroup.SumOvertimeLunch;
                    sumOvertimeDictionary[Overtime.After] = timeLogGroup.SumOvertimeAfter;
                    sumOvertimeDictionary[Overtime.Holiday] = timeLogGroup.SumOvertimeDayOff;
                }

                //Clear All Work Permission in TimeLogPermission 
                // may be  duplicate WorkPermission if update entity
                //timeLogModel.TimeLog.WorkPermission.Clear();

                DateRange clockRange = new DateRange(timeLogModel.ClockIn, timeLogModel.ClockOut);
                //Set For OT Holiday & day off
                //Not Workpermission For holiday => Get Default Overtime Option from Employee
                tims_HolidayHistoryRepository holidayHistoryRep = new tims_HolidayHistoryRepository();
                var allHoliday = holidayHistoryRep.GetAll();
                //Has holiday
                //UpdateTimeLogPermission(timeLogModel, workPermissionCollection.FirstOrDefault(x => Overtime.Holiday.In(x.OvertimeOptions)));
                timeLogModel.OvertimeDayOff = 0;
                if ((allHoliday.Count(x => timeLogModel.ClockIn.Date == x.Date.Date) > 0 || timeLogModel.WorkWeek == null) && timeLogModel.ClockOut.HasValue)
                {
                    timeLogModel.OvertimeDayOff = GetOvertimeValid((float)timeLogModel.ClockOut.Value.Subtract(timeLogModel.ClockIn).TotalMinutes, sumOvertimeDictionary,
                        timeLogModel, employeeModel, workPermissionCollection, Overtime.Holiday);
                }
                else
                {

                    //Set For OT Before
                    //Not Workpermission For Before => Get Default Overtime Option from Employee
                    //UpdateTimeLogPermission(timeLogModel, workPermissionCollection.FirstOrDefault(x => Overtime.Before.In(x.OvertimeOptions)));
                    if (timeLogModel.WorkWeek != null && timeLogModel.ClockIn < timeLogModel.WorkWeek.WorkIn)
                    {
                        TimeSpan OTBefore = timeLogModel.WorkWeek.WorkIn.Subtract(timeLogModel.ClockIn);
                        timeLogModel.OvertimeBefore = GetOvertimeValid((float)OTBefore.TotalMinutes, sumOvertimeDictionary,
                            timeLogModel, employeeModel, workPermissionCollection, Overtime.Before);
                    }
                    else
                    {
                        timeLogModel.OvertimeBefore = 0;
                    }

                    //Set For OT Break
                    //Not Workpermission For Break => Get Default Overtime Option from Employee
                    //UpdateTimeLogPermission(timeLogModel, workPermissionCollection.FirstOrDefault(x => Overtime.Break.In(x.OvertimeOptions)));
                    if (timeLogModel.WorkWeek.LunchBreakFlag && !timeLogModel.DeductLunchTimeFlag)
                    {
                        DateRange lunchRange = new DateRange(timeLogModel.WorkWeek.LunchOut, timeLogModel.WorkWeek.LunchIn);
                        if (clockRange.Intersects(lunchRange))
                        {
                            var OTBreak = clockRange.GetIntersection(lunchRange);
                            timeLogModel.OvertimeLunch = GetOvertimeValid((float)OTBreak.TimeSpan.TotalMinutes, sumOvertimeDictionary,
                                timeLogModel, employeeModel, workPermissionCollection, Overtime.Break);
                        }
                    }
                    else
                    {
                        timeLogModel.OvertimeLunch = 0;
                    }
                    //Set For OT After
                    //Not Workpermission For After => Get Default Overtime Option from Employee
                    //UpdateTimeLogPermission(timeLogModel, workPermissionCollection.FirstOrDefault(x => Overtime.After.In(x.OvertimeOptions)));
                    if (timeLogModel.WorkWeek != null && timeLogModel.ClockOut > timeLogModel.WorkWeek.WorkOut)
                    {
                        TimeSpan OTAfter = timeLogModel.ClockOut.Value.Subtract(timeLogModel.WorkWeek.WorkOut);
                        timeLogModel.OvertimeAfter = GetOvertimeValid((float)OTAfter.TotalMinutes, sumOvertimeDictionary,
                            timeLogModel, employeeModel, workPermissionCollection, Overtime.After);
                    }
                    else
                    {
                        timeLogModel.OvertimeAfter = 0;
                    }
                }
                //End set For Over Time & WorkPermission
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw ex;
            }
        }

        /// <summary>
        /// Calcute Overtime Remain
        /// </summary>
        /// <param name="hourPerDay"></param>
        /// <param name="overtimeElapsed"></param>
        /// <returns></returns>
        private float GetOvertimeRemaining(float hourPerDay, float overtimeElapsed)
        {
            float overtimeRemaining = 0;
            if (hourPerDay > overtimeElapsed)
                overtimeRemaining = hourPerDay - overtimeElapsed;
            return overtimeRemaining;
        }

        /// <summary>
        /// Add TimeLog WorkPermision If not existed
        /// </summary>
        /// <param name="timeLogModel"></param>
        /// <param name="workPermissions"></param>
        private void UpdateTimeLogPermission(tims_TimeLogModel timeLogModel, tims_WorkPermission workPermissions)
        {
            if (workPermissions != null)
            {
                if (!workPermissions.ActiveFlag)
                {
                    var removeItem = timeLogModel.tims_TimeLog.tims_WorkPermission.Where(x => x.Id == workPermissions.Id).SingleOrDefault();
                    if (removeItem != null)
                        timeLogModel.tims_TimeLog.tims_WorkPermission.Remove(removeItem);
                }
                else if (!timeLogModel.tims_TimeLog.tims_WorkPermission.Any(x => x == workPermissions))
                {
                    timeLogModel.tims_TimeLog.tims_WorkPermission.Add(workPermissions);
                }
            }
        }


        /// <summary>
        /// Calculate & update leaveEarly if ClockOut less than WorkIN
        /// </summary>
        /// <param name="timeLogModel"></param>
        private void UpdateLeaveEarlyTime(tims_TimeLogModel timeLogModel)
        {
            if (timeLogModel.WorkWeek != null && timeLogModel.ClockOut < timeLogModel.WorkWeek.WorkOut && timeLogModel.ClockOut.HasValue)
                timeLogModel.LeaveEarlyTime = (float)timeLogModel.WorkWeek.WorkOut.Subtract(timeLogModel.ClockOut.Value).TotalMinutes;
        }
        /// <summary>
        /// Calculate & update for late time if clock in greater than latetime
        /// </summary>
        /// <param name="timeLogModel"></param>
        private void UpdateLateTime(tims_TimeLogModel timeLogModel)
        {
            if (timeLogModel.WorkWeek != null && timeLogModel.ClockIn > timeLogModel.WorkWeek.WorkIn)
                timeLogModel.LateTime = (float)timeLogModel.ClockIn.Subtract(timeLogModel.WorkWeek.WorkIn).TotalMinutes;
        }


        private bool IsDayOffOrHoliday(tims_TimeLogModel timeLogModel)
        {
            if (HolidayHistoryCollection.Count(x => timeLogModel.ClockIn.Date == x.Date.Date) > 0 || timeLogModel.WorkWeek == null)
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Method for check new item if Item has changed & not error save this item
        /// No Error : (user want to save item?)
        ///         Yes : save this item
        ///         No : Delete this item
        ///         Cancel : No action
        /// Has Error : (user delete item?)
        ///         Yes : Delete item
        ///         No : No action
        ///<remarks>
        ///Required to  check SelectedWorkPermission.IsNew && SelectedWorkPermission.IsDirty
        /// </remarks>
        /// </summary>
        private bool NewItemDirtyCheck(bool isSearchModel)
        {
            try
            {
                if (IsValid && EmployeeList.Count > 0)// No Error : YES : Save; NO : Delete, CANCEL : No Action
                {
                    var result = ShowMessageBox("Do you want to save this item ?", "TIMS - Work Permission", MessageBoxButton.YesNoCancel, MessageBoxImage.Question);
                    if (MessageBoxResult.Yes.Equals(result))
                    {
                        SaveWorkPermission();
                        IsSearchMode = isSearchModel;//true
                        return true;
                    }
                    else if (MessageBoxResult.No.Equals(result))
                    {
                        IsSearchMode = isSearchModel;//true
                        return true;
                    }
                    return false;
                }
                else //Has Error => Delete
                {
                    var result = ShowMessageBox("Do you want close this form ?", "TIMS - Work Permission", MessageBoxButton.YesNo, MessageBoxImage.Question);
                    if (MessageBoxResult.Yes.Equals(result))
                    {
                        IsSearchMode = isSearchModel;//true
                        SelectedWorkPermission = null;
                        return true;
                    }
                    return false;
                }

            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
            }
            return true;
        }

        /// <summary>
        /// Method for Old Item if user 
        /// No Error :(user want to save?)
        ///          Yes : save this itme
        ///          No : rollback data 
        ///          Cancel : no action for user change
        /// Has Error: (User want to roll back ?) 
        ///          Yes :  Back Data
        ///          No : No action
        /// </summary>
        /// <param name="isSearchModel">
        /// isSearchModel : True => after handle change to GridSearch
        ///                 False => Change to Form
        /// </param>
        /// /// <remarks>
        /// Required to check this is a old item (SelectedWorkPermission) : IsNew = false &  Has Dirty
        /// </remarks>
        private bool OldItemDirtyCheck(bool isSearchModel)
        {
            try
            {
                if (IsValid) // No Error : YES : Save; NO : RollBack, CANCEL : No Action
                {
                    var result = ShowMessageBox("Do you want to save this item ?", "TIMS - Work Permission", MessageBoxButton.YesNoCancel, MessageBoxImage.Question);
                    if (MessageBoxResult.Yes.Equals(result))
                    {
                        SaveWorkPermission();
                        IsSearchMode = isSearchModel;
                        return true;
                    }
                    else if (MessageBoxResult.No.Equals(result))
                    {
                        SelectedWorkPermission.ToModel();
                        SelectedWorkPermission.EndUpdate();
                        IsSearchMode = isSearchModel;
                        return true;
                    }
                    return false;
                }
                else // Has Error : YES : roll Back Data; NO : No action
                {
                    var result = ShowMessageBox("Do you want to close this form?", "TIMS - Work Permission", MessageBoxButton.YesNo, MessageBoxImage.Question);
                    if (MessageBoxResult.Yes.Equals(result))
                    {
                        SelectedWorkPermission.ToModel();
                        SelectedWorkPermission.EndUpdate();
                        IsSearchMode = isSearchModel;
                        return true;
                    }
                    return false;
                }

            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
            }
            return true;
        }

        /// <summary>
        /// 
        /// </summary>
        private void AvalidableEmployeeWorkpermission()
        {
            if (EmployeeCollection != null)
            {
                ICollectionView colletionView = CollectionViewSource.GetDefaultView(EmployeeCollection);
                if (colletionView != null)
                {
                    colletionView.Filter = (one) =>
                       {
                           base_GuestModel employeeModel = one as base_GuestModel;
                           if (employeeModel == null)
                               return false;
                           else
                               return employeeModel.base_Guest.tims_WorkPermission.Count > 0;
                       };
                }

            }
        }

        /// <summary>
        /// Assign Employee for work permission
        /// </summary>
        private void AssignEmployee()
        {
            try
            {
                EmployeesListViewModel employeeListViewModel = new EmployeesListViewModel();
                if (EmployeeList != null && EmployeeList.Count > 0)
                    employeeListViewModel.SetValue(EmployeeList.ToList());
                bool? result = _dialogService.ShowDialog<EmployeesListView>(_ownerViewModel, employeeListViewModel, "Employee List");

                if (result == true)
                {
                    this.EmployeeList.Clear();
                    var employeeList = employeeListViewModel.RightEmployeeCollection;

                    foreach (base_Guest employee in employeeList)
                    {
                        base_GuestModel employeeModel = new base_GuestModel(employee);
                        /// Create Check Duplidate workpermission here & set to DuplicateWorkPermission
                        if (SelectedWorkPermission.OvertimeOptions != 0 || SelectedWorkPermission.PermissionType != 0)
                        {
                            SetEmployeeDuplicatedWorkPermission(employeeModel);
                        }
                        this.EmployeeList.Add(employeeModel);
                    }
                    this.SelectedWorkPermission.IsDirty = true;
                }
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw ex;
            }
        }

        /// <summary>
        /// Remove Employee from Work permission
        /// </summary>
        /// <param name="param"></param>
        private void RemoveEmployee(object param)
        {
            try
            {
                var employeeList = (ObservableCollection<object>)param;
                if (employeeList != null)
                {
                    foreach (var item in employeeList.ToList())
                    {
                        EmployeeList.Remove(item as base_GuestModel);
                    }
                }
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw ex;
            }
        }

        private System.Diagnostics.Stopwatch _refeshTime = new System.Diagnostics.Stopwatch();
        private void RefreshAll()
        {
            _refeshTime.Start();
            _employeeRepository.Refresh();
            //_employeeRepository.RefreshAll<WorkPermission>();
            //_employeeRepository.RefreshAll<TimeLog>();
            //_employeeRepository.RefreshAll<EmployeeSchedule>();
            //_employeeRepository.RefreshAll<Holiday>();
            //_employeeRepository.RefreshAll<WorkSchedule>();
            //_employeeRepository.RefreshAll<WorkWeek>();
            _refeshTime.Stop();
            _log4net.Info("Time For Refesh WorkPermission: " + _refeshTime.ElapsedMilliseconds + " ms");
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Method call from MainViewModel if DataContext existed & check item has dirty or new 
        /// </summary>
        /// <param name="isSearchMode"></param>
        public void MainWindow(bool isSearchMode)
        {
            try
            {
                bool canAddNewItem = true;

                if (SelectedWorkPermission != null && (SelectedWorkPermission.IsDirty)) //item is has edited
                {
                    if (SelectedWorkPermission.IsNew)
                        canAddNewItem = NewItemDirtyCheck(isSearchMode);
                    else
                        canAddNewItem = OldItemDirtyCheck(isSearchMode);
                }
                else
                {
                    this.IsSearchMode = isSearchMode;
                }

                if (canAddNewItem && !isSearchMode) // Change To Form & Use not stop to edit error item
                {
                    SelectedWorkPermission = new tims_WorkPermissionModel();
                    this.IsSearchMode = isSearchMode;
                }
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw ex;
            }
        }
        #endregion

        #region Override Methods

        protected override bool CanExecuteClosing()
        {
            try
            {
                if (!IsSearchMode && SelectedWorkPermission != null && (SelectedWorkPermission.IsDirty)) //item is has edited
                {
                    if (SelectedWorkPermission.IsNew)
                        return NewItemDirtyCheck(false);
                    else
                        return OldItemDirtyCheck(false);
                }
            }
            catch (Exception ex)
            {
                _log4net.Error(ex);
                throw ex;
            }
            return true;
        }


        public override void ChangeSearchMode(bool isList)
        {
            //if (ChangeViewExecute(null))
            //{
                if (!isList)
                {
                    SelectedWorkPermission = new tims_WorkPermissionModel();
                    IsSearchMode = false;
                }
                else
                    IsSearchMode = true;
            //}
        }
        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Windows.Controls;
using System.Windows.Input;
using CPC.POS.Database;
using CPC.Helper;
using CPC.POS.Model;
using CPC.POS.Repository;
using CPC.Toolkit.Command;
using System.Collections.Generic;
using CPC.Toolkit.Base;
using System.Windows;
using CPC.POS.View;

namespace CPC.POS.ViewModel
{
    class HolidayViewModel : ViewModelBase
    {
        #region define
        // create instance 
        private tims_HolidayRepository _holidayRepository = new tims_HolidayRepository();
        private tims_HolidayHistoryRepository _holidayHistoryRepository = new tims_HolidayHistoryRepository();
        private tims_TimeLogRepository _timeLogRepository = new tims_TimeLogRepository();
        private ObservableCollection<DateTime> _listDateInTimelog;
        private tims_HolidayHistory _holidayHistory = null;

        // Commands
        public ICommand NewCommand { get; private set; }
        public ICommand SaveCommand { get; private set; }
        public ICommand DeleteCommand { get; private set; }
        public ICommand BarSearchClickCommand { get; private set; }
        public RelayCommand<tims_HolidayModel> SelectionChangedCommand { get; private set; }
        public RelayCommand<tims_HolidayModel> MouseDoubleClickCommand { get; private set; }
        public RelayCommand<object> UserControlLoadedCommand { get; private set; }

        #endregion

        #region Properties
        /// <summary>
        /// Current selected Holiday
        /// </summary>
        private tims_HolidayModel _selectedHoliday;
        public tims_HolidayModel SelectedHoliday
        {
            get
            {
                return _selectedHoliday;
            }
            set
            {
                if (_selectedHoliday != value)
                {

                    _selectedHoliday = value;
                    if (value == null)
                        this.IsSearchMode = true;
                    OnPropertyChanged(() => SelectedHoliday);
                }
            }
        }

        /// <summary>
        /// All Holiday list
        /// </summary>
        private ObservableCollection<tims_HolidayModel> holidayCollection;
        public ObservableCollection<tims_HolidayModel> HolidayCollection
        {
            get
            {
                return holidayCollection;
            }
            set
            {
                holidayCollection = value;
                OnPropertyChanged(() => HolidayCollection);
            }
        }
        /// <summary>
        /// Search Mode: 
        /// true open the Search grid.
        /// false close the search grid and open data entry.
        /// </summary>
        private bool isSearchMode = true;
        public bool IsSearchMode
        {
            get { return isSearchMode; }
            set
            {
                if (value != isSearchMode)
                {
                    isSearchMode = value;
                    OnPropertyChanged(() => IsSearchMode);
                }
            }
        }

        private HolidayView View { get; set; }





        #region TotalHoliday
        private int _totalHoliday;
        /// <summary>
        /// Gets or sets the TotalHoliday.
        /// </summary>
        public int TotalHoliday
        {
            get { return _totalHoliday; }
            set
            {
                if (_totalHoliday != value)
                {
                    _totalHoliday = value;
                    OnPropertyChanged(() => TotalHoliday);
                }
            }
        }
        #endregion



        #endregion

        #region Constructor

        // Default contructor
        public HolidayViewModel()
        {
            _ownerViewModel = App.Current.MainWindow.DataContext;

            // Route the commands
            NewCommand = new RelayCommand(OnNewCommandExecute, OnNewCommandCanExecute);
            SaveCommand = new RelayCommand<object>(OnSaveCommandExecute, OnSaveCommandCanExecute);
            DeleteCommand = new RelayCommand(OnDeleteCommandExecute, OnDeleteCommandCanExecute);
            BarSearchClickCommand = new RelayCommand(OnBarSearchClickCommandExecute, OnBarSearchClickCommandCanExecute);

            // listview selection changed event to command 
            SelectionChangedCommand = new RelayCommand<tims_HolidayModel>(item => SelectedHoliday = item);
            MouseDoubleClickCommand = new RelayCommand<tims_HolidayModel>(this.OnMouseDoubleClickExecuted, this.CanMouseDoubleClickExecute);
            UserControlLoadedCommand = new RelayCommand<object>(this.OnUserControlLoadedExecuted);

            GetHolidays();
            if (View != null)
                View.dtgrdDate.SelectedItem = null;
        }

        #endregion

        #region Command Methods

        /// <summary>
        /// Method to check whether the NewCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnNewCommandCanExecute()
        {
            if (HolidayCollection != null && HolidayCollection.Count(x => x.IsNew) > 0)
                return false;
            return true;
        }
        /// <summary>
        /// Method to invoke when the NewCommand command is executed.
        /// </summary>
        private void OnNewCommandExecute()
        {
            SelectedHoliday = new tims_HolidayModel();
            HolidayCollection.Add(SelectedHoliday);
            IsSearchMode = false;
            if (View != null)
                View.txtName.Focus();
        }

        /// <summary>
        /// Method to check whether the SaveCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnSaveCommandCanExecute(object param)
        {
            if (SelectedHoliday != null && !SelectedHoliday.IsDirty && !SelectedHoliday.IsNew && !IsSearchMode)
                return false;
            if (IsSearchMode)
                return true;
            return this.IsValid;
        }
        /// <summary>
        /// Method to invoke when the SaveCommand command is executed.
        /// </summary>
        private void OnSaveCommandExecute(object param)
        {
            if (null != SelectedHoliday && !IsSearchMode)
            {
                switch (SelectedHoliday.HolidayOption)
                {
                    case 0:
                        SelectedHoliday.DayOfWeek = null;
                        SelectedHoliday.WeekOfMonth = null;
                        SelectedHoliday.FromDate = null;
                        SelectedHoliday.ToDate = null;
                        break;
                    case 1:
                        SelectedHoliday.Day = null;
                        SelectedHoliday.FromDate = null;
                        SelectedHoliday.ToDate = null;
                        SelectedHoliday.Month = SelectedHoliday.Month1;
                        break;
                    case 2:
                        SelectedHoliday.Month = null;
                        SelectedHoliday.Day = null;
                        SelectedHoliday.DayOfWeek = null;
                        SelectedHoliday.WeekOfMonth = null;
                        break;
                }
                if (SaveHoliday()) //call method
                {
                    if (param != null && (param as string).Equals("SaveAndNew"))
                    {
                        SelectedHoliday = new tims_HolidayModel();
                        HolidayCollection.Add(SelectedHoliday);
                    }
                    else
                    {
                        IsSearchMode = true;
                    }
                }
            }
            else //New command
            {
                OnNewCommandExecute();
            }
        }

        private void OnDeleteCommandExecute()
        {
            MessageBoxResult dialogResult = ShowMessageBox("Do you want to delete this item?", "TIMS", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (dialogResult == MessageBoxResult.Yes)
            {
                SelectedHoliday.ToEntity();
                var AllTimeLogModel = _timeLogRepository.GetAll();
                if (IsHasDateInTimeclock(SelectedHoliday, AllTimeLogModel))
                {
                    MessageBoxResult dialog = ShowMessageBox("Date of holiday is already existed in Timeclock. Cannot delete.\n"
                                                              + listDate(_listDateInTimelog),
                                                              "TIMS", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                if (DateTimeExt.Today.Month == 1) // If in January then can delete HolidayHistory in december of last years
                {
                    if (SelectedHoliday.tims_Holiday.Month == 12 && !SelectedHoliday.tims_Holiday.HolidayOption.Is(HolidayOption.Duration))
                    {
                        MessageBoxResult dialog = ShowMessageBox("Do you want to delete date of holiday last year?", "TIMS", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                        if (dialog == MessageBoxResult.Yes)
                        {
                            if (SelectedHoliday.tims_Holiday.HolidayOption.Is(HolidayOption.SpecificDay))
                            {
                                DateTime date = new DateTime(DateTimeExt.Today.Year - 1, SelectedHoliday.tims_Holiday.Month.Value, SelectedHoliday.tims_Holiday.Day.Value);
                                var histories = _holidayHistoryRepository.GetAll(x => x.Date == date);
                                if (histories != null)
                                {
                                    _holidayHistoryRepository.Delete(histories);
                                    _holidayHistoryRepository.Commit();
                                }
                            }
                            #region else if (holiday.HolidayOption.Is(HolidayOption.DynamicDay))
                            else if (SelectedHoliday.tims_Holiday.HolidayOption.Is(HolidayOption.DynamicDay))
                            {
                                if ((DaysOfWeek)SelectedHoliday.tims_Holiday.DayOfWeek.Value == DaysOfWeek.Day)
                                {
                                    int day = 0;
                                    if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth == WeeksOfMonth.Last)
                                    {
                                        day = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1).LastDate().Day;
                                    }
                                    else
                                    {
                                        day = (int)SelectedHoliday.WeekOfMonth;
                                    }
                                    DateTime date = new DateTime(DateTimeExt.Today.Year - 1, SelectedHoliday.tims_Holiday.Month.Value, day);
                                    var histories = _holidayHistoryRepository.GetAll(x => x.Date == date);
                                    if (histories != null)
                                    {
                                        _holidayHistoryRepository.Delete(histories);
                                        _holidayHistoryRepository.Commit();
                                    }
                                }
                                else if ((DaysOfWeek)SelectedHoliday.tims_Holiday.DayOfWeek.Value == DaysOfWeek.WeekDay)
                                {
                                    DateTime fromDate, toDate;
                                    DateTime date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1);
                                    if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.Last)
                                    {
                                        fromDate = GetFirstDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                                        toDate = GetLastDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                                    }
                                    else
                                    {
                                        fromDate = GetFirstDateOfWeekByMonth(date, SelectedHoliday.WeekOfMonth.Value);
                                        toDate = GetLastDateOfWeekByMonth(date, SelectedHoliday.WeekOfMonth.Value);
                                    }
                                    var histories = _holidayHistoryRepository.GetAll(x => x.Date >= fromDate && x.Date <= toDate);
                                    if (null != histories && histories.Count > 0)
                                    {
                                        _holidayHistoryRepository.Delete(histories);
                                        _holidayHistoryRepository.Commit();
                                    }
                                }
                                else if ((DaysOfWeek)SelectedHoliday.tims_Holiday.DayOfWeek.Value == DaysOfWeek.WeekendDay)
                                {
                                    DateTime saturday, sunday;
                                    DateTime date = new DateTime(DateTimeExt.Today.Year - 1, SelectedHoliday.Month.Value, 1);
                                    if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.Last)
                                    {
                                        saturday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Saturday);
                                        sunday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Sunday);
                                    }
                                    else
                                    {
                                        saturday = GetNthDayOfMonth(date, SelectedHoliday.WeekOfMonth.Value, DayOfWeek.Saturday);
                                        sunday = GetNthDayOfMonth(date, SelectedHoliday.WeekOfMonth.Value, DayOfWeek.Sunday);
                                    }

                                    var histories = _holidayHistoryRepository.GetAll(x => x.Date == saturday || x.Date == sunday);
                                    if (histories != null)
                                        _holidayHistoryRepository.Delete(histories);
                                    _holidayHistoryRepository.Commit();
                                }
                                else // 1 Day in (Mon,Tus,....)
                                {
                                    DateTime date = new DateTime(DateTimeExt.Today.Year - 1, SelectedHoliday.Month.Value, 1);
                                    if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.Last)
                                    {
                                        date = GetNthEndDayOfMonth(date.LastDate(), (DayOfWeek)SelectedHoliday.tims_Holiday.DayOfWeek.Value - 4);
                                    }
                                    else
                                    {
                                        date = GetNthDayOfMonth(date, SelectedHoliday.WeekOfMonth.Value, (DayOfWeek)SelectedHoliday.tims_Holiday.DayOfWeek.Value - 4);
                                    }

                                    var histories = _holidayHistoryRepository.GetAll(x => x.Date == date);
                                    if (histories != null)
                                    {
                                        _holidayHistoryRepository.Delete(histories);
                                        _holidayHistoryRepository.Commit();
                                    }
                                }
                            }
                        }
                            #endregion
                    }
                }
                DeleteHolidayHistoryByDateOfHoliday(SelectedHoliday.tims_Holiday);
                _holidayRepository.Delete(SelectedHoliday.tims_Holiday);
                _holidayRepository.Commit();
                HolidayCollection.Remove(SelectedHoliday);
                TotalHoliday = HolidayCollection.Count();
            }
        }
        private bool OnDeleteCommandCanExecute()
        {
            if (HolidayCollection != null && HolidayCollection.Count <= 0)
                return false;
            if (SelectedHoliday != null && !SelectedHoliday.IsNew)
                return true;
            return false;
        }
        /// <summary>
        ///Case Error:
        //The holiday information is not complete. Do you want to cancel this holiday? Yes (cancel this holiday) or No (keep the input status).
        //Case Not error:
        //The holiday info is not saved. Do you want to save this holiday? Yes (save this holiday) or No (don't save and open list), cancel (keep input form). 
        /// </summary>
        /// <returns></returns>
        private void OnBarSearchClickCommandExecute()
        {
            if (!this.IsValid)
            {
                if (SelectedHoliday != null && SelectedHoliday.IsDirty)
                {
                    if (SelectedHoliday.IsNew)
                    {
                        MessageBoxResult dialogResult1 = ShowMessageBox("Do you want to delete this holiday?", "TIMS", MessageBoxButton.YesNo, MessageBoxImage.Question);
                        if (dialogResult1 == MessageBoxResult.Yes)
                        {
                            IsSearchMode = !IsSearchMode;
                            HolidayCollection.Remove(SelectedHoliday);
                            SelectedHoliday.EndUpdate();
                        }
                    }
                    else
                    {
                        MessageBoxResult dialogResult1 = ShowMessageBox("Do you want to rollback this holiday?", "TIMS", MessageBoxButton.YesNo, MessageBoxImage.Question);
                        if (dialogResult1 == MessageBoxResult.Yes)
                        {
                            IsSearchMode = !IsSearchMode;
                            SelectedHoliday.ToModel();
                            SelectedHoliday.IsDirty = false;
                        }
                    }
                }
                else
                {
                    IsSearchMode = !IsSearchMode;
                    if (SelectedHoliday.IsNew)
                        HolidayCollection.Remove(SelectedHoliday);
                    else
                    {
                        SelectedHoliday.ToModel();
                        SelectedHoliday.IsDirty = false;
                    }
                }
            }
            else
            {
                if (SelectedHoliday != null && SelectedHoliday.IsDirty)
                {
                    MessageBoxResult dialogResult2 = ShowMessageBox("Do you want to save this holiday?", "TIMS", MessageBoxButton.YesNoCancel, MessageBoxImage.Question);
                    if (dialogResult2 == MessageBoxResult.Yes)
                    {
                        if (SaveHoliday())
                            IsSearchMode = !IsSearchMode;
                    }
                    else if (dialogResult2 == MessageBoxResult.No)
                    {
                        if (SelectedHoliday.IsNew)
                        {
                            HolidayCollection.Remove(SelectedHoliday);
                            SelectedHoliday.EndUpdate();
                        }
                        else
                        {
                            SelectedHoliday.ToModel();
                            SelectedHoliday.IsDirty = false;
                        }
                        IsSearchMode = !IsSearchMode;
                    }
                }
                else
                {
                    IsSearchMode = !IsSearchMode;
                }
            }
        }
        private bool OnBarSearchClickCommandCanExecute()
        {
            return true;
        }

        private bool CanMouseDoubleClickExecute(tims_HolidayModel item)
        {
            return true;
        }
        /// <summary>
        /// Occurs when MouseDoubleClick datagrid.
        /// </summary>
        /// <param name="item">The item selected of datagrid.</param>
        private void OnMouseDoubleClickExecuted(tims_HolidayModel item)
        {
            if (item == null) return;
            if (SelectedHoliday != null && SelectedHoliday.IsNew)
            {
                if (null != HolidayCollection && HolidayCollection.Count > 0)
                {
                    SelectedHoliday = HolidayCollection[HolidayCollection.Count - 1];
                }
            }
            else
                SelectedHoliday = item;

            IsSearchMode = !IsSearchMode;
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Get all Holidays
        /// </summary>
        void GetHolidays()
        {
            HolidayCollection = new ObservableCollection<tims_HolidayModel>(from holiday in _holidayRepository.GetAll()
                                                                       select new tims_HolidayModel(holiday));
            if (HolidayCollection != null && HolidayCollection.Count > 0)
            {
                foreach (var item in HolidayCollection)
                {
                    if (item.HolidayOption == 1)
                    {
                        item.Month1 = item.Month;
                        item.IsDirty = false;
                    }
                }
                SelectedHoliday = HolidayCollection.FirstOrDefault();
                SelectedHoliday.IsDirty = false;
            }
            TotalHoliday = HolidayCollection.Count();
        }
        /// <summary>
        /// Returns true if has DayOfWeek(Mon,Tue,Wed,Thu,Fri) from fist to last, otherwise false (Sat,Sun)
        /// </summary>
        /// <param name="fist">The first System.DateTime</param>
        /// <param name="last">The last System.DateTime</param>
        private bool IsHasWeekday(DateTime fist, DateTime last)
        {
            for (DateTime d = fist; d <= last; d = d.AddDays(1))
            {
                if ((d.DayOfWeek == DayOfWeek.Monday || d.DayOfWeek == DayOfWeek.Tuesday || d.DayOfWeek == DayOfWeek.Wednesday || d.DayOfWeek == DayOfWeek.Thursday || d.DayOfWeek == DayOfWeek.Friday))
                {
                    return true;
                }
            }
            return false;
        }
        private string listDate(ObservableCollection<DateTime> dates)
        {
            string dateString = string.Empty;
            if (dates != null && dates.Count > 0)
            {
                foreach (var item in dates.OrderBy(x => x.Date))
                {
                    dateString = dateString + item.ToShortDateString() + "\n";
                }
            }
            return dateString;
        }
        private bool SaveHoliday()
        {
            #region check date input (first week or end week of month)
            if (SelectedHoliday.HolidayOption.Is(HolidayOption.DynamicDay) && ((DaysOfWeek)SelectedHoliday.DayOfWeek.Value == DaysOfWeek.WeekDay))
            {
                DateTime fromDate, toDate;
                DateTime date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1);
                if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.First)
                {
                    fromDate = GetFirstDateOfWeekByMonth(date, SelectedHoliday.WeekOfMonth.Value);
                    toDate = GetLastDateOfWeekByMonth(date, SelectedHoliday.WeekOfMonth.Value);
                    if (!IsHasWeekday(fromDate, toDate))
                    {
                        ShowMessageBox("No weekday in first week of " + date.ToString("MMMM") + ". Please select other dates", "TIMS", MessageBoxButton.OK, MessageBoxImage.Error);
                        return false;
                    }
                }
                else if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.Last)
                {
                    fromDate = GetFirstDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                    toDate = GetLastDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                    if (!IsHasWeekday(fromDate, toDate))
                    {
                        ShowMessageBox("No weekday in end week of " + date.ToString("MMMM") + ". Please select other dates", "TIMS", MessageBoxButton.OK, MessageBoxImage.Error);
                        return false;
                    }
                }
            }
            #endregion

            var AllTimeLogModel = _timeLogRepository.GetAll();
            //Update or Insert data
            if (SelectedHoliday.IsNew)
            {
                //Check Date of holiday is already exists in Timeclock.
                if (IsHasDateInTimeclock(SelectedHoliday, AllTimeLogModel))
                {
                    MessageBoxResult dialog = ShowMessageBox("Date of holiday is already existed in Timeclock. Cannot insert.\n"
                                                              + listDate(_listDateInTimelog),
                                                              "TIMS", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return false;
                }
                if (IsHasDateInHoliday(_holidayRepository.GetAll()))
                {
                    ShowMessageBox("Conflicted the date in Holiday", "TIMS", MessageBoxButton.OK, MessageBoxImage.Error);
                    return false;
                }
                _holidayHistory = SaveHolidayHistory(_holidayHistory);
                SelectedHoliday.ActiveFlag = true;
                //[Fix]SelectedHoliday.CreatedByID = Define.UserLoginID;
                SelectedHoliday.CreatedDate = DateTimeExt.Now;
                SelectedHoliday.ToEntity();

                _holidayRepository.Add(SelectedHoliday.tims_Holiday);
            }
            else if (SelectedHoliday.IsDirty)
            {
                tims_Holiday holiday = _holidayRepository.GetAll(x => x.Id == SelectedHoliday.Id).SingleOrDefault();

                ObservableCollection<DateTime> oldDates, newDates;
                oldDates = DateOfHolidayInTimelog(new tims_HolidayModel(holiday), AllTimeLogModel);
                newDates = DateOfHolidayInTimelog(SelectedHoliday, AllTimeLogModel);
                if (!oldDates.Count.Equals(newDates.Count)) //if not the same
                {
                    MessageBoxResult dialog = ShowMessageBox("Date of holiday is already existed in Timeclock. Cannot modify or addition.\n"
                                                              + listDate(new ObservableCollection<DateTime>(oldDates.Concat(newDates).Distinct())),
                                                              "TIMS", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return false;
                }

                if (IsHasDateInHoliday(_holidayRepository.GetAll(x => x.Id != SelectedHoliday.Id)))
                {
                    ShowMessageBox("Conflicted the Date in Holiday", "TIMS", MessageBoxButton.OK, MessageBoxImage.Error);
                    return false;
                }
                else
                {
                    DeleteHolidayHistoryByDateOfHoliday(holiday);
                    _holidayHistory = SaveHolidayHistory(_holidayHistory);
                    //[FIX]SelectedHoliday.ModifiedByID = Define.UserLoginID;
                    SelectedHoliday.ModifiedDate = DateTimeExt.Now;
                    SelectedHoliday.ToEntity();
                    //[FIX]_holidayRepository.UpdateHoliday(SelectedHoliday.Holiday);
                }
            }
            _holidayRepository.Commit();
            if (SelectedHoliday.IsNew)
                SelectedHoliday.Id = SelectedHoliday.tims_Holiday.Id;
            SelectedHoliday.EndUpdate();
            TotalHoliday = HolidayCollection.Count();
            
            return true;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="holidayHistoryAll"></param>
        /// <param name="date"></param>
        /// <returns>Return true if date is existed in holidayHistoryAll, otherwise false</returns>
        private bool IsHasDateInHolidayHistory(IList<tims_HolidayHistory> holidayHistoryAll, DateTime date)
        {
            if (holidayHistoryAll != null && holidayHistoryAll.Count > 0)
                return (holidayHistoryAll.Where(x => x.Date == date).Count() > 0);
            return false;
        }

        private HashSet<KeyValuePair<DateTime, string>> AllDateInHoliday(IList<tims_Holiday> holidayAll)
        {
            // Get all date in holidays
            HashSet<KeyValuePair<DateTime, string>> holidays = new HashSet<KeyValuePair<DateTime, string>>();
            //Duration
            var queryDuration = holidayAll.Where(x => x.HolidayOption == (int)HolidayOption.Duration);
            if (null != queryDuration && queryDuration.Count() > 0)
            {
                foreach (var item in queryDuration)
                {
                    for (DateTime d = item.FromDate.Value; d <= item.ToDate.Value; d = d.AddDays(1))
                    {
                        holidays.Add(new KeyValuePair<DateTime, string>(d, item.Title));
                    }
                }
            }
            //SpecificDay
            var querySpecificDay = holidayAll.Where(x => x.HolidayOption == (int)HolidayOption.SpecificDay);
            if (null != querySpecificDay && querySpecificDay.Count() > 0)
            {
                holidays.UnionWith(querySpecificDay.Select(x => new KeyValuePair<DateTime, string>(new DateTime(DateTimeExt.Today.Year, x.Month.Value, x.Day.Value), x.Title)));
            }
            //DynamicDay
            var queryDynamicDay = holidayAll.Where(x => x.HolidayOption == (int)HolidayOption.DynamicDay);
            if (null != queryDynamicDay && queryDynamicDay.Count() > 0)
            {
                foreach (var item in queryDynamicDay)
                {
                    #region DynamicDay
                    if ((DaysOfWeek)item.DayOfWeek.Value == DaysOfWeek.Day)
                    {
                        int day = 0;
                        if ((WeeksOfMonth)item.WeekOfMonth == WeeksOfMonth.Last)
                        {
                            day = new DateTime(DateTimeExt.Today.Year, item.Month.Value, 1).LastDate().Day;
                        }
                        else
                        {
                            day = (int)item.WeekOfMonth;
                        }
                        DateTime date = new DateTime(DateTimeExt.Today.Year, item.Month.Value, day);
                        holidays.Add(new KeyValuePair<DateTime, string>(date, item.Title));
                    }
                    else if ((DaysOfWeek)item.DayOfWeek.Value == DaysOfWeek.WeekDay)
                    {
                        DateTime fromDate, toDate;
                        DateTime date = new DateTime(DateTimeExt.Today.Year, item.Month.Value, 1);
                        if ((WeeksOfMonth)item.WeekOfMonth.Value == WeeksOfMonth.Last)
                        {
                            fromDate = GetFirstDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                            toDate = GetLastDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                        }
                        else
                        {
                            fromDate = GetFirstDateOfWeekByMonth(date, item.WeekOfMonth.Value);
                            toDate = GetLastDateOfWeekByMonth(date, item.WeekOfMonth.Value);
                        }
                        for (DateTime d = fromDate; d <= toDate; d = d.AddDays(1))
                        {
                            if (d.DayOfWeek != DayOfWeek.Saturday && d.DayOfWeek != DayOfWeek.Sunday)
                            {
                                holidays.Add(new KeyValuePair<DateTime, string>(d, item.Title));
                            }
                        }
                    }
                    else if ((DaysOfWeek)item.DayOfWeek.Value == DaysOfWeek.WeekendDay)
                    {
                        DateTime saturday, sunday;
                        DateTime date = new DateTime(DateTimeExt.Today.Year, item.Month.Value, 1);
                        if ((WeeksOfMonth)item.WeekOfMonth.Value == WeeksOfMonth.Last)
                        {
                            saturday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Saturday);
                            holidays.Add(new KeyValuePair<DateTime, string>(saturday, item.Title));
                            sunday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Sunday);
                            holidays.Add(new KeyValuePair<DateTime, string>(saturday, item.Title));
                        }
                        else
                        {
                            saturday = GetNthDayOfMonth(date, item.WeekOfMonth.Value, DayOfWeek.Saturday);
                            holidays.Add(new KeyValuePair<DateTime, string>(saturday, item.Title));
                            sunday = GetNthDayOfMonth(date, item.WeekOfMonth.Value, DayOfWeek.Sunday);
                            holidays.Add(new KeyValuePair<DateTime, string>(saturday, item.Title));
                        }
                    }
                    else // 1 Day in (Mon,Tus,....)
                    {
                        DateTime date = new DateTime(DateTimeExt.Today.Year, item.Month.Value, 1);
                        if ((WeeksOfMonth)item.WeekOfMonth.Value == WeeksOfMonth.Last)
                        {
                            date = GetNthEndDayOfMonth(date.LastDate(), (DayOfWeek)item.DayOfWeek.Value - 4);
                        }
                        else
                        {
                            date = GetNthDayOfMonth(date, item.WeekOfMonth.Value, (DayOfWeek)item.DayOfWeek.Value - 4);
                        }
                        holidays.Add(new KeyValuePair<DateTime, string>(date, item.Title));
                    }
                    #endregion
                }
            }
            //result
            return holidays;
        }

        private bool IsHasDateInHoliday(IList<tims_Holiday> holidayAll)
        {
            HashSet<KeyValuePair<DateTime, string>> allDateInHoliday = AllDateInHoliday(holidayAll);

            if (allDateInHoliday != null && allDateInHoliday.Count > 0)
            {
                if (SelectedHoliday.HolidayOption.Is(HolidayOption.Duration))
                {
                    if (allDateInHoliday.Where(x => SelectedHoliday.FromDate.Value <= x.Key && x.Key <= SelectedHoliday.ToDate.Value).Count() > 0)
                        return true;
                }
                else if (SelectedHoliday.HolidayOption.Is(HolidayOption.SpecificDay))
                {
                    return (allDateInHoliday.Where(x => x.Key == new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, SelectedHoliday.Day.Value)).Count() > 0);
                }
                else if (SelectedHoliday.HolidayOption.Is(HolidayOption.DynamicDay))
                {
                    #region DynamicDay
                    if ((DaysOfWeek)SelectedHoliday.DayOfWeek.Value == DaysOfWeek.Day)
                    {
                        int day = 0;
                        DateTime date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1);
                        if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth == WeeksOfMonth.Last)
                        {
                            day = date.LastDate().Day;
                        }
                        else
                        {
                            day = (int)SelectedHoliday.WeekOfMonth;
                        }
                        return (allDateInHoliday.Where(x => x.Key == new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, day)).Count() > 0);
                    }
                    else if ((DaysOfWeek)SelectedHoliday.DayOfWeek.Value == DaysOfWeek.WeekDay)
                    {
                        DateTime fromDate, toDate;
                        DateTime date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1);
                        if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.Last)
                        {
                            fromDate = GetFirstDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                            toDate = GetLastDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                        }
                        else
                        {
                            fromDate = GetFirstDateOfWeekByMonth(date, SelectedHoliday.WeekOfMonth.Value);
                            toDate = GetLastDateOfWeekByMonth(date, SelectedHoliday.WeekOfMonth.Value);
                        }
                        for (DateTime d = fromDate; d <= toDate; d = d.AddDays(1))
                        {
                            if (d.DayOfWeek != DayOfWeek.Saturday && d.DayOfWeek != DayOfWeek.Sunday)
                            {
                                if (allDateInHoliday.Where(x => fromDate <= x.Key && x.Key <= toDate).Count() > 0)
                                    return true;
                            }
                        }
                    }
                    else if ((DaysOfWeek)SelectedHoliday.DayOfWeek.Value == DaysOfWeek.WeekendDay)
                    {
                        DateTime saturday, sunday;
                        DateTime date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1);
                        if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.Last)
                        {
                            saturday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Saturday);
                            sunday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Sunday);
                            if (allDateInHoliday.Where(x => x.Key == saturday || x.Key == sunday).Count() > 0)
                                return true;
                        }
                        else
                        {
                            saturday = GetNthDayOfMonth(date, SelectedHoliday.WeekOfMonth.Value, DayOfWeek.Saturday);
                            sunday = GetNthDayOfMonth(date, SelectedHoliday.WeekOfMonth.Value, DayOfWeek.Sunday);
                            if (allDateInHoliday.Where(x => x.Key == saturday || x.Key == sunday).Count() > 0)
                                return true;
                        }
                    }
                    else // 1 Day in (Mon,Tus,....)
                    {
                        DateTime date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1);
                        if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.Last)
                        {
                            return (allDateInHoliday.Where(x => x.Key == GetNthEndDayOfMonth(date.LastDate(), (DayOfWeek)SelectedHoliday.DayOfWeek.Value - 4)).Count() > 0);
                        }
                        else
                        {
                            return (allDateInHoliday.Where(x => x.Key == GetNthDayOfMonth(date, SelectedHoliday.WeekOfMonth.Value, (DayOfWeek)SelectedHoliday.DayOfWeek.Value - 4)).Count() > 0);
                        }

                    }
                    #endregion
                }
            }

            return false;
        }

        private tims_HolidayHistory SaveHolidayHistory(tims_HolidayHistory holidayHistory)
        {
            var holidayHistoryAll = _holidayHistoryRepository.GetAll();
            #region if (SelectedHoliday.HolidayOption.Is(HolidayOption.Duration))
            if (SelectedHoliday.HolidayOption.Is(HolidayOption.Duration))
            {
                if (SelectedHoliday.ToDate.Value == SelectedHoliday.FromDate.Value)
                {
                    // 1 day
                    holidayHistory = new tims_HolidayHistory { Date = SelectedHoliday.FromDate.Value, Name = SelectedHoliday.Title };
                    UpdateOrInsertHolidayHistory(holidayHistory, holidayHistoryAll);
                }
                else
                {
                    int i = 0;
                    // Many days
                    for (DateTime d = SelectedHoliday.FromDate.Value; d <= SelectedHoliday.ToDate.Value; d = d.AddDays(1))
                    {
                        holidayHistory = new tims_HolidayHistory { Date = d, Name = String.Concat((++i).Ordinal(), ", ", SelectedHoliday.Title) };
                        UpdateOrInsertHolidayHistory(holidayHistory, holidayHistoryAll);
                    }
                }
            }
            #endregion
            #region if (SelectedHoliday.HolidayOption.Is(HolidayOption.SpecificDay))
            else if (SelectedHoliday.HolidayOption.Is(HolidayOption.SpecificDay))
            {
                holidayHistory = new tims_HolidayHistory
                {
                    Date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, SelectedHoliday.Day.Value),
                    Name = SelectedHoliday.Title
                };
                UpdateOrInsertHolidayHistory(holidayHistory, holidayHistoryAll);
            }
            #endregion
            #region if (SelectedHoliday.HolidayOption.Is(HolidayOption.DynamicDay))
            else if (SelectedHoliday.HolidayOption.Is(HolidayOption.DynamicDay))
            {
                if ((DaysOfWeek)SelectedHoliday.DayOfWeek.Value == DaysOfWeek.Day)
                {
                    int day = 0;
                    DateTime date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1);
                    if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth == WeeksOfMonth.Last)
                    {
                        day = date.LastDate().Day;
                    }
                    else
                    {
                        day = (int)SelectedHoliday.WeekOfMonth;
                    }

                    holidayHistory = new tims_HolidayHistory
                    {
                        Date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, day),
                        Name = SelectedHoliday.Title
                    };
                    UpdateOrInsertHolidayHistory(holidayHistory, holidayHistoryAll);
                }
                else if ((DaysOfWeek)SelectedHoliday.DayOfWeek.Value == DaysOfWeek.WeekDay)
                {
                    DateTime fromDate, toDate;
                    DateTime date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1);
                    if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        fromDate = GetFirstDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                        toDate = GetLastDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                    }
                    else
                    {
                        fromDate = GetFirstDateOfWeekByMonth(date, SelectedHoliday.WeekOfMonth.Value);
                        toDate = GetLastDateOfWeekByMonth(date, SelectedHoliday.WeekOfMonth.Value);
                    }
                    int i = 0;
                    // Many days
                    for (DateTime d = fromDate; d <= toDate; d = d.AddDays(1))
                    {
                        if (d.DayOfWeek != DayOfWeek.Saturday && d.DayOfWeek != DayOfWeek.Sunday)
                        {
                            holidayHistory = new tims_HolidayHistory { Date = d, Name = String.Concat((++i).Ordinal(), ", ", SelectedHoliday.Title) };
                            UpdateOrInsertHolidayHistory(holidayHistory, holidayHistoryAll);
                        }
                    }
                }
                else if ((DaysOfWeek)SelectedHoliday.DayOfWeek.Value == DaysOfWeek.WeekendDay)
                {
                    DateTime saturday, sunday;
                    DateTime date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1);
                    if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        saturday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Saturday);
                        holidayHistory = new tims_HolidayHistory { Date = saturday, Name = SelectedHoliday.Title };
                        UpdateOrInsertHolidayHistory(holidayHistory, holidayHistoryAll);

                        sunday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Sunday);
                        holidayHistory = new tims_HolidayHistory { Date = sunday, Name = SelectedHoliday.Title };
                        UpdateOrInsertHolidayHistory(holidayHistory, holidayHistoryAll);
                    }
                    else
                    {
                        saturday = GetNthDayOfMonth(date, SelectedHoliday.WeekOfMonth.Value, DayOfWeek.Saturday);
                        holidayHistory = new tims_HolidayHistory { Date = saturday, Name = SelectedHoliday.Title };
                        UpdateOrInsertHolidayHistory(holidayHistory, holidayHistoryAll);

                        sunday = GetNthDayOfMonth(date, SelectedHoliday.WeekOfMonth.Value, DayOfWeek.Sunday);
                        holidayHistory = new tims_HolidayHistory { Date = sunday, Name = SelectedHoliday.Title };
                        UpdateOrInsertHolidayHistory(holidayHistory, holidayHistoryAll);
                    }
                }
                else // 1 Day in (Mon,Tus,....)
                {
                    DateTime date = new DateTime(DateTimeExt.Today.Year, SelectedHoliday.Month.Value, 1);
                    if ((WeeksOfMonth)SelectedHoliday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        var endDate =
                        date = GetNthEndDayOfMonth(date.LastDate(), (DayOfWeek)SelectedHoliday.DayOfWeek.Value - 4);
                    }
                    else
                    {
                        date = GetNthDayOfMonth(date, SelectedHoliday.WeekOfMonth.Value, (DayOfWeek)SelectedHoliday.DayOfWeek.Value - 4);
                    }
                    holidayHistory = new tims_HolidayHistory { Date = date, Name = SelectedHoliday.Title };
                    UpdateOrInsertHolidayHistory(holidayHistory, holidayHistoryAll);
                }
            }
            #endregion
            return holidayHistory;
        }

        private void DeleteHolidayHistoryByDateOfHoliday(tims_Holiday holiday)
        {
            if (holiday.HolidayOption.Is(HolidayOption.Duration))
            {
                DateTime fromDate = holiday.FromDate.Value;
                DateTime toDate = holiday.ToDate.Value;
                var histories = _holidayHistoryRepository.GetAll(x => x.Date >= fromDate && x.Date <= toDate);
                if (null != histories && histories.Count > 0)
                {
                    _holidayHistoryRepository.Delete(histories);
                    _holidayHistoryRepository.Commit();
                }
            }
            else if (holiday.HolidayOption.Is(HolidayOption.SpecificDay))
            {
                DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, holiday.Day.Value);
                var histories = _holidayHistoryRepository.GetAll(x => x.Date == date);
                if (histories != null)
                {
                    _holidayHistoryRepository.Delete(histories);
                    _holidayHistoryRepository.Commit();
                }
            }
            #region else if (holiday.HolidayOption.Is(HolidayOption.DynamicDay))
            else if (holiday.HolidayOption.Is(HolidayOption.DynamicDay))
            {
                if ((DaysOfWeek)holiday.DayOfWeek.Value == DaysOfWeek.Day)
                {
                    int day = 0;
                    if ((WeeksOfMonth)holiday.WeekOfMonth == WeeksOfMonth.Last)
                    {
                        day = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1).LastDate().Day;
                    }
                    else
                    {
                        day = (int)holiday.WeekOfMonth;
                    }

                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, day);
                    var histories = _holidayHistoryRepository.GetAll(x => x.Date == date);
                    if (histories != null)
                    {
                        _holidayHistoryRepository.Delete(histories);
                        _holidayHistoryRepository.Commit();
                    }
                }
                else if ((DaysOfWeek)holiday.DayOfWeek.Value == DaysOfWeek.WeekDay)
                {
                    DateTime fromDate, toDate;
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1);
                    if ((WeeksOfMonth)holiday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        fromDate = GetFirstDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                        toDate = GetLastDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                    }
                    else
                    {
                        fromDate = GetFirstDateOfWeekByMonth(date, holiday.WeekOfMonth.Value);
                        toDate = GetLastDateOfWeekByMonth(date, holiday.WeekOfMonth.Value);
                    }
                    var histories = _holidayHistoryRepository.GetAll(x => x.Date >= fromDate && x.Date <= toDate);
                    if (null != histories && histories.Count > 0)
                    {
                        _holidayHistoryRepository.Delete(histories);
                        _holidayHistoryRepository.Commit();
                    }
                }
                else if ((DaysOfWeek)holiday.DayOfWeek.Value == DaysOfWeek.WeekendDay)
                {
                    DateTime saturday, sunday;
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1);
                    if ((WeeksOfMonth)holiday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        saturday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Saturday);
                        sunday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Sunday);
                    }
                    else
                    {
                        saturday = GetNthDayOfMonth(date, holiday.WeekOfMonth.Value, DayOfWeek.Saturday);
                        sunday = GetNthDayOfMonth(date, holiday.WeekOfMonth.Value, DayOfWeek.Sunday);
                    }

                    var histories = _holidayHistoryRepository.GetAll(x => x.Date == saturday || x.Date == sunday);
                    if (histories != null)
                        _holidayHistoryRepository.Delete(histories);
                    _holidayHistoryRepository.Commit();
                }
                else // 1 Day in (Mon,Tus,....)
                {
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1);
                    if ((WeeksOfMonth)holiday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        date = GetNthEndDayOfMonth(date.LastDate(), (DayOfWeek)holiday.DayOfWeek.Value - 4);
                    }
                    else
                    {
                        date = GetNthDayOfMonth(date, holiday.WeekOfMonth.Value, (DayOfWeek)holiday.DayOfWeek.Value - 4);
                    }
                    var histories = _holidayHistoryRepository.GetAll(x => x.Date == date);
                    if (histories != null)
                    {
                        _holidayHistoryRepository.Delete(histories);
                        _holidayHistoryRepository.Commit();
                    }
                }
            }
            #endregion
        }

        private bool IsHasDateInTimeclock(tims_HolidayModel holiday, IList<tims_TimeLog> allTimeLog)
        {
            if (holiday.HolidayOption.Is(HolidayOption.Duration))
            {
                DateTime fromDate = holiday.FromDate.Value;
                DateTime toDate = holiday.ToDate.Value;
                var queryTimelog = allTimeLog.Where(x => x.ClockIn.Date >= fromDate && x.ClockIn.Date <= toDate);
                if (null != queryTimelog && queryTimelog.Count() > 0)
                {
                    _listDateInTimelog = new ObservableCollection<DateTime>(queryTimelog.Select(x => x.ClockIn.Date));
                    return true;
                }
            }
            else if (holiday.HolidayOption.Is(HolidayOption.SpecificDay))
            {
                DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, holiday.Day.Value);
                var queryTimelog = allTimeLog.Where(x => x.ClockIn.Date == date);
                if (null != queryTimelog && queryTimelog.Count() > 0)
                {
                    _listDateInTimelog = new ObservableCollection<DateTime>(queryTimelog.Select(x => x.ClockIn.Date));
                    return true;
                }
            }
            #region else if (holiday.HolidayOption.Is(HolidayOption.DynamicDay))
            else if (holiday.HolidayOption.Is(HolidayOption.DynamicDay))
            {
                if ((DaysOfWeek)holiday.DayOfWeek.Value == DaysOfWeek.Day)
                {
                    int day = 0;
                    if ((WeeksOfMonth)holiday.WeekOfMonth == WeeksOfMonth.Last)
                    {
                        day = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1).LastDate().Day;
                    }
                    else
                    {
                        day = (int)holiday.WeekOfMonth;
                    }
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, day);
                    var queryTimelog = allTimeLog.Where(x => x.ClockIn.Date == date);
                    if (null != queryTimelog && queryTimelog.Count() > 0)
                    {
                        _listDateInTimelog = new ObservableCollection<DateTime>(queryTimelog.Select(x => x.ClockIn.Date));
                        return true;
                    }
                }
                else if ((DaysOfWeek)holiday.DayOfWeek.Value == DaysOfWeek.WeekDay)
                {
                    DateTime fromDate, toDate;
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1);
                    if ((WeeksOfMonth)holiday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        fromDate = GetFirstDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                        toDate = GetLastDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                    }
                    else
                    {
                        fromDate = GetFirstDateOfWeekByMonth(date, holiday.WeekOfMonth.Value);
                        toDate = GetLastDateOfWeekByMonth(date, holiday.WeekOfMonth.Value);
                    }
                    var queryTimelog = allTimeLog.Where(x => x.ClockIn.Date >= fromDate && x.ClockIn.Date <= toDate);
                    if (null != queryTimelog && queryTimelog.Count() > 0)
                    {
                        _listDateInTimelog = new ObservableCollection<DateTime>(queryTimelog.Select(x => x.ClockIn.Date));
                        return true;
                    }
                }
                else if ((DaysOfWeek)holiday.DayOfWeek.Value == DaysOfWeek.WeekendDay)
                {
                    DateTime saturday, sunday;
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1);
                    if ((WeeksOfMonth)holiday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        saturday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Saturday);
                        sunday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Sunday);
                    }
                    else
                    {
                        saturday = GetNthDayOfMonth(date, holiday.WeekOfMonth.Value, DayOfWeek.Saturday);
                        sunday = GetNthDayOfMonth(date, holiday.WeekOfMonth.Value, DayOfWeek.Sunday);
                    }
                    var queryTimelogWeekendDay = allTimeLog.Where(x => x.ClockIn.Date == saturday || x.ClockIn.Date == sunday);
                    if (null != queryTimelogWeekendDay && queryTimelogWeekendDay.Count() > 0)
                    {
                        _listDateInTimelog = new ObservableCollection<DateTime>(queryTimelogWeekendDay.Select(x => x.ClockIn.Date));
                        return true;
                    }
                }
                else // 1 Day in (Mon,Tus,....)
                {
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1);
                    if ((WeeksOfMonth)holiday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        date = GetNthEndDayOfMonth(date.LastDate(), (DayOfWeek)holiday.DayOfWeek.Value - 4);
                    }
                    else
                    {
                        date = GetNthDayOfMonth(date, holiday.WeekOfMonth.Value, (DayOfWeek)holiday.DayOfWeek.Value - 4);
                    }
                    var queryTimelog = allTimeLog.Where(x => x.ClockIn.Date == date);
                    if (null != queryTimelog && queryTimelog.Count() > 0)
                    {
                        _listDateInTimelog = new ObservableCollection<DateTime>(queryTimelog.Select(x => x.ClockIn.Date));
                        return true;
                    }
                }
            }
            #endregion
            return false;
        }

        private void UpdateOrInsertHolidayHistory(tims_HolidayHistory holidayHistory, IList<tims_HolidayHistory> holidayHistoryAll)
        {
            if (IsHasDateInHolidayHistory(holidayHistoryAll, holidayHistory.Date))
            {
                //[FIX]   _holidayHistoryRepository.UpdateHolidayHistory(holidayHistory);
            }
            else
            {
                _holidayHistoryRepository.Add(holidayHistory);
            }
        }

        private ObservableCollection<DateTime> DateOfHolidayInTimelog(tims_HolidayModel holiday, IList<tims_TimeLog> allTimeLog)
        {
            if (holiday.HolidayOption.Is(HolidayOption.Duration))
            {
                DateTime fromDate = holiday.FromDate.Value;
                DateTime toDate = holiday.ToDate.Value;
                var queryTimelog = allTimeLog.Where(x => x.ClockIn.Date >= fromDate && x.ClockIn.Date <= toDate);
                if (null != queryTimelog && queryTimelog.Count() > 0)
                    return new ObservableCollection<DateTime>(queryTimelog.Select(x => x.ClockIn.Date));
                else
                    return new ObservableCollection<DateTime>();
            }
            else if (holiday.HolidayOption.Is(HolidayOption.SpecificDay))
            {
                DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, holiday.Day.Value);
                var queryTimelog = allTimeLog.Where(x => x.ClockIn.Date == date);
                if (null != queryTimelog && queryTimelog.Count() > 0)
                    return new ObservableCollection<DateTime>(queryTimelog.Select(x => x.ClockIn.Date));
            }
            #region else if (holiday.HolidayOption.Is(HolidayOption.DynamicDay))
            else if (holiday.HolidayOption.Is(HolidayOption.DynamicDay))
            {
                if ((DaysOfWeek)holiday.DayOfWeek.Value == DaysOfWeek.Day)
                {
                    int day = 0;
                    if ((WeeksOfMonth)holiday.WeekOfMonth == WeeksOfMonth.Last)
                    {
                        day = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1).LastDate().Day;
                    }
                    else
                    {
                        day = (int)holiday.WeekOfMonth;
                    }
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, day);
                    var queryTimelog = allTimeLog.Where(x => x.ClockIn.Date == date);
                    if (null != queryTimelog && queryTimelog.Count() > 0)
                        return new ObservableCollection<DateTime>(queryTimelog.Select(x => x.ClockIn.Date));
                    else
                        return new ObservableCollection<DateTime>();
                }
                else if ((DaysOfWeek)holiday.DayOfWeek.Value == DaysOfWeek.WeekDay)
                {
                    DateTime fromDate, toDate;
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1);
                    if ((WeeksOfMonth)holiday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        fromDate = GetFirstDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                        toDate = GetLastDateOfWeekByMonth(date, date.LastDate().GetWeekOfMonth());
                    }
                    else
                    {
                        fromDate = GetFirstDateOfWeekByMonth(date, holiday.WeekOfMonth.Value);
                        toDate = GetLastDateOfWeekByMonth(date, holiday.WeekOfMonth.Value);
                    }
                    var queryTimelog = allTimeLog.Where(x => x.ClockIn.Date >= fromDate && x.ClockIn.Date <= toDate);
                    if (null != queryTimelog && queryTimelog.Count() > 0)
                        return new ObservableCollection<DateTime>(queryTimelog.Select(x => x.ClockIn.Date));
                    else
                        return new ObservableCollection<DateTime>();
                }
                else if ((DaysOfWeek)holiday.DayOfWeek.Value == DaysOfWeek.WeekendDay)
                {
                    DateTime saturday, sunday;
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1);
                    if ((WeeksOfMonth)holiday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        saturday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Saturday);
                        sunday = GetNthEndDayOfMonth(date.LastDate(), DayOfWeek.Sunday);
                    }
                    else
                    {
                        saturday = GetNthDayOfMonth(date, holiday.WeekOfMonth.Value, DayOfWeek.Saturday);
                        sunday = GetNthDayOfMonth(date, holiday.WeekOfMonth.Value, DayOfWeek.Sunday);
                    }
                    var queryTimelogWeekendDay = allTimeLog.Where(x => x.ClockIn.Date == saturday || x.ClockIn.Date == sunday);
                    if (null != queryTimelogWeekendDay && queryTimelogWeekendDay.Count() > 0)
                        return new ObservableCollection<DateTime>(queryTimelogWeekendDay.Select(x => x.ClockIn.Date));
                    else
                        return new ObservableCollection<DateTime>();
                }
                else // 1 Day in (Mon,Tus,....)
                {
                    DateTime date = new DateTime(DateTimeExt.Today.Year, holiday.Month.Value, 1);
                    if ((WeeksOfMonth)holiday.WeekOfMonth.Value == WeeksOfMonth.Last)
                    {
                        date = GetNthEndDayOfMonth(date.LastDate(), (DayOfWeek)holiday.DayOfWeek.Value - 4);
                    }
                    else
                    {
                        date = GetNthDayOfMonth(date, holiday.WeekOfMonth.Value, (DayOfWeek)holiday.DayOfWeek.Value - 4);
                    }
                    var queryTimelog = allTimeLog.Where(x => x.ClockIn.Date == date);
                    if (null != queryTimelog && queryTimelog.Count() > 0)
                        return new ObservableCollection<DateTime>(queryTimelog.Select(x => x.ClockIn.Date));
                    else
                        return new ObservableCollection<DateTime>();
                }
            }
            #endregion
            return new ObservableCollection<DateTime>();
        }

        private DateTime GetFirstDateOfWeekByMonth(DateTime date, int nthWeekOfMonth)
        {
            DateTime endDate = date.AddMonths(1).AddDays(-1);
            for (DateTime d = date; d <= endDate; d = d.AddDays(1))
            {
                if (d.GetWeekOfMonth() == nthWeekOfMonth)
                {
                    return d;
                }
            }

            return DateTime.Today.Date;
        }

        private DateTime GetLastDateOfWeekByMonth(DateTime date, int nthWeekOfMonth)
        {
            DateTime endDate = date.AddMonths(1).AddDays(-1);
            for (DateTime d = endDate; d >= date; d = d.AddDays(-1))
            {
                if (d.GetWeekOfMonth() == nthWeekOfMonth)
                {
                    return d;
                }
            }

            return DateTime.Today.Date;
        }

        private static DateTime GetNthDayOfMonth(DateTime FirstDateOfMonth, int nthWeekOfMonth, DayOfWeek dayOfWeek)
        {
            DateTime date = FirstDateOfMonth.AddDays((nthWeekOfMonth - 1) * 7);
            while (date.DayOfWeek != dayOfWeek)
                date = date.AddDays(1);
            return date;
        }

        private static DateTime GetNthEndDayOfMonth(DateTime EndDateOfMonth, DayOfWeek dayOfWeek)
        {
            DateTime date = EndDateOfMonth;
            while (date.DayOfWeek != dayOfWeek)
                date = date.AddDays(-1);
            return date;
        }

        #region OnUserControlLoaded
        private void OnUserControlLoadedExecuted(object param)
        {
            if (param != null)
            {
                View = param as HolidayView;
                if (View != null && IsSearchMode)
                {
                    View.btnNew.Focus();
                }
                else
                {
                    View.txtName.Focus();
                }
            }
        }
        #endregion

        #endregion

        #region Override Methods
        protected override bool CanExecuteClosing()
        {
            if (!this.IsValid)
            {
                if (SelectedHoliday != null && SelectedHoliday.IsDirty)
                {
                    if (SelectedHoliday.IsNew)
                    {
                        MessageBoxResult dialogResult1 = ShowMessageBox("Do you want to delete this holiday?", "TIMS", MessageBoxButton.YesNo, MessageBoxImage.Question);
                        if (dialogResult1 == MessageBoxResult.Yes)
                        {
                            return true;
                        }
                        else if (dialogResult1 == MessageBoxResult.No)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        MessageBoxResult dialogResult1 = ShowMessageBox("Do you want to rollback this holiday?", "TIMS", MessageBoxButton.YesNo, MessageBoxImage.Question);
                        if (dialogResult1 == MessageBoxResult.Yes)
                        {
                            return true;
                        }
                        else if (dialogResult1 == MessageBoxResult.No)
                        {
                            return false;
                        }
                    }
                }
            }
            else
            {
                if (SelectedHoliday != null && SelectedHoliday.IsDirty)
                {
                    MessageBoxResult dialogResult2 = ShowMessageBox("Do you want to save this holiday?", "TIMS", MessageBoxButton.YesNoCancel, MessageBoxImage.Question);
                    if (dialogResult2 == MessageBoxResult.Yes)
                    {
                        return SaveHoliday();
                    }
                    else if (dialogResult2 == MessageBoxResult.No)
                    {
                        return true;
                    }
                    else if (dialogResult2 == MessageBoxResult.Cancel)
                    {
                        return false;
                    }
                }
            }
            return true;
        }
        #endregion
    }
}

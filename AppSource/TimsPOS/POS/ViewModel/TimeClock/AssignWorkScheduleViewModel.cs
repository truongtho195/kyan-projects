//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using CPC.Toolkit.Base;
using CPC.POS.Model;
using CPC.POS.Repository;
using CPC.Toolkit.Command;


namespace CPC.POS.ViewModel
{
    class AssignWorkScheduleViewModel : ViewModelBase, IDataErrorInfo
    {
        #region Define

        // Commands
        public ICommand OkCommand { get; private set; }
        public ICommand CancelCommand { get; private set; }
        public ICommand MoveCommand { get; private set; }
        public ICommand BackCommand { get; private set; }

        base_GuestRepository _employeeRepository = new base_GuestRepository();
        ICollectionView _employeeCollectionView;

        #endregion

        #region Properties

        /// <summary>
        /// Contain employees has not been assigned work schedule
        /// </summary>
        public ObservableCollection<base_GuestModel> LeftEmployeeCollection { get; set; }

        /// <summary>
        /// Contain employees assigned work schedule
        /// </summary>
        public ObservableCollection<base_GuestModel> RightEmployeeCollection { get; set; }

        private tims_WorkScheduleModel _selectedWorkSchedule;
        /// <summary>
        /// Gets or sets the SelectedWorkSchedule.
        /// </summary>
        public tims_WorkScheduleModel SelectedWorkSchedule
        {
            get { return _selectedWorkSchedule; }
            set
            {
                if (_selectedWorkSchedule != value)
                {
                    _selectedWorkSchedule = value;
                    OnPropertyChanged(() => SelectedWorkSchedule);
                }
            }
        }

        private string _textSearch;
        /// <summary>
        /// Gets or sets the TextSearch.
        /// </summary>
        public string TextSearch
        {
            get { return _textSearch; }
            set
            {
                if (_textSearch != value)
                {
                    _textSearch = value;
                    OnPropertyChanged(() => TextSearch);
                    //if (!string.IsNullOrWhiteSpace(TextSearch))
                        FilterEmployee();
                    OnPropertyChanged(() => TotalItem);
                }
            }
        }

        private DateTime? _startDate;
        /// <summary>
        /// Gets or sets the StartDate.
        /// </summary>
        public DateTime? StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    IsDirty = true;
                    _startDate = value;
                    OnPropertyChanged(() => StartDate);
                    FilterEmployee();
                }
            }
        }

        /// <summary>
        /// Get total item of filtered collection
        /// </summary>
        public int TotalItem
        {
            get
            {
                return ((CollectionView)_employeeCollectionView).Count;
            }
        }

        /// <summary>
        /// Gets or sets the IsDirty
        /// </summary>
        public bool IsDirty { get; set; }

        #endregion

        #region Constructor

        // Default constructor
        public AssignWorkScheduleViewModel(tims_WorkScheduleModel selectedWorkSchedule)
        {
            _ownerViewModel = this;

            // Route the commands
            OkCommand = new RelayCommand(OnOkCommandExecute, OnOkCommandCanExecute);
            CancelCommand = new RelayCommand(OnCancelCommandExecute, OnCancelCommandCanExecute);
            MoveCommand = new RelayCommand<object>(OnMoveCommandExecute, OnMoveCommandCanExecute);
            BackCommand = new RelayCommand<object>(OnBackCommandExecute, OnBackCommandCanExecute);

            this.SelectedWorkSchedule = selectedWorkSchedule;
            LoadDatas();

            // Initial collection view
            _employeeCollectionView = CollectionViewSource.GetDefaultView(LeftEmployeeCollection);

            if (RightEmployeeCollection.Count > 0)
                this.StartDate = RightEmployeeCollection.FirstOrDefault().EmployeeScheduleModel.StartDate;

            this.StartDate = DateTimeExt.Today;
            this.IsDirty = false;
        }

        #endregion

        #region Command Methods

        /// <summary>
        /// Method to check whether the OkCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnOkCommandCanExecute()
        {
            return IsValid && IsDirty && RightEmployeeCollection.Count > 0;
        }

        /// <summary>
        /// Method to invoke when the OkCommand command is executed.
        /// </summary>
        private void OnOkCommandExecute()
        {
            Window window = FindOwnerWindow(this);
            if (null == window) return;

            UpdateCollection(RightEmployeeCollection, SelectedWorkSchedule.EmployeeCollection);
            window.DialogResult = true;
        }

        /// <summary>
        /// Method to check whether the CancelCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnCancelCommandCanExecute()
        {
            return true;
        }

        /// <summary>
        /// Method to invoke when the CancelCommand command is executed.
        /// </summary>
        private void OnCancelCommandExecute()
        {
            Window window = FindOwnerWindow(this);
            if (null != window)
                window.Close();
        }

        /// <summary>
        /// Method to check whether the MoveCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnMoveCommandCanExecute(object param)
        {
            if (param == null)
                return false;
            return (param as ObservableCollection<object>).Count > 0;
        }

        /// <summary>
        /// Method to invoke when the MoveCommand command is executed.
        /// </summary>
        private void OnMoveCommandExecute(object param)
        {
            MoveItem(param, LeftEmployeeCollection, RightEmployeeCollection);
        }

        /// <summary>
        /// Method to check whether the BackCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnBackCommandCanExecute(object param)
        {
            if (param == null)
                return false;
            return (param as ObservableCollection<object>).Count > 0;
        }

        /// <summary>
        /// Method to invoke when the BackCommand command is executed.
        /// </summary>
        private void OnBackCommandExecute(object param)
        {
            MoveItem(param, RightEmployeeCollection, LeftEmployeeCollection);
        }

        protected override bool CanExecuteClosing()
        {
            Window window = FindOwnerWindow(this);
            if (RightEmployeeCollection.Count > 0 && IsDirty && (window != null && !window.DialogResult.HasValue))
            {
                MessageBoxResult result = _dialogService.ShowMessageBox(_ownerViewModel, "Do you want to close this form?", "TIMS", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                if (result == MessageBoxResult.No)
                    return false;
            }
            return true;
        }

        #endregion

        #region Private Methods

        private void UpdateCollection(ObservableCollection<base_GuestModel> fromCollection, ObservableCollection<base_GuestModel> toCollection)
        {
            // Update item to target collection
            var pairs = from x in fromCollection
                        join y in toCollection.Where(z => z.IsNew)
                        on x.Id equals y.Id
                        select new { x, y };
            foreach (var pair in pairs)
            {
                pair.y.EmployeeScheduleModel.StartDate = StartDate.Value;
            }

            // Add item to target collection
            var query = from x in fromCollection
                        where !(from y in toCollection.Where(z => z.IsNew)
                                select y.Id).Contains(x.Id)
                        select x;
            foreach (var base_GuestModel in query)
            {
                base_GuestModel.IsNew = true;
                base_GuestModel.EmployeeScheduleModel = new base_GuestScheduleModel
                {
                    GuestId = base_GuestModel.Id,
                    WorkScheduleId = SelectedWorkSchedule.Id,
                    StartDate = StartDate.Value.Date,
                    AssignDate = DateTimeExt.Now,
                    Status = (int)EmployeeScheduleStatuses.Pending
                };
                toCollection.Add(base_GuestModel);
            }

            // Remove item from target collection
            var query2 = from x in toCollection.Where(z => z.IsNew)
                         where !(from y in fromCollection
                                 select y.Id).Contains(x.Id)
                         select x;
            foreach (var item in query2.ToList())
                toCollection.Remove(item);
        }

        /// <summary>
        /// Move item from source to destination collectin
        /// </summary>
        /// <param name="selectedItems">Selected item collection</param>
        /// <param name="source">Source collection</param>
        /// <param name="destination">Destination collecion</param>
        private void MoveItem(object param, ObservableCollection<base_GuestModel> source, ObservableCollection<base_GuestModel> destination)
        {
            var selectedItems = param as ObservableCollection<object>;
            foreach (base_GuestModel base_GuestModel in selectedItems.ToList())
            {
                // Add to destination collection
                destination.Add(base_GuestModel);

                // Remove from source collection
                source.Remove(base_GuestModel);
            }
            OnPropertyChanged(() => TotalItem);
            IsDirty = true;
        }

        private void FilterEmployee()
        {
            _employeeCollectionView.Filter = (item) =>
            {
                // Get employee model
                base_GuestModel base_GuestModel = item as base_GuestModel;

                bool result = false;

                // If text search is null, return true
                if (string.IsNullOrWhiteSpace(TextSearch))
                    result = true;
                else
                {
                    if (string.IsNullOrWhiteSpace(base_GuestModel.GuestNo))
                        result = false;
                    else
                        result = base_GuestModel.GuestNo.ToLower().Contains(TextSearch.ToLower());

                    if (string.IsNullOrWhiteSpace(base_GuestModel.FirstName))
                        result |= false;
                    else
                        result |= base_GuestModel.FirstName.ToLower().Contains(TextSearch.ToLower());

                    if (string.IsNullOrWhiteSpace(base_GuestModel.LastName))
                        result |= false;
                    else
                        result |= base_GuestModel.LastName.ToLower().Contains(TextSearch.ToLower());
                }

                if (!StartDate.HasValue)
                    result &= true;
                else
                {
                    if (StartDate == DateTimeExt.Today)
                        result &= base_GuestModel.TimeLogCollection.Count == 0;
                    else if (StartDate < DateTimeExt.Today)
                        result &= false;
                }
                return result;
            };
        }

        /// <summary>
        /// Load datas
        /// </summary>
        private void LoadDatas()
        {
            string employeeMark = MarkType.Employee.ToDescription();
            RightEmployeeCollection = new ObservableCollection<base_GuestModel>(SelectedWorkSchedule.EmployeeCollection.Where(x => x.IsNew));

            LeftEmployeeCollection = new ObservableCollection<base_GuestModel>(
                _employeeRepository.GetAll(x => x.IsActived&& !x.IsPurged && x.Mark.Equals(employeeMark) && 
                    x.base_GuestSchedule.Count(y => y.Status != (int)EmployeeScheduleStatuses.Inactive) == 0).
                Select(x => new base_GuestModel(x)
                {
                    // Get timelog collection
                    TimeLogCollection = new CollectionBase<tims_TimeLogModel>(x.tims_TimeLog.
                        Where(y => y.ClockIn >= DateTimeExt.Today).
                        Select(y => new tims_TimeLogModel(y)))
                }).Where(x => !RightEmployeeCollection.Select(y => y.Id).Contains(x.Id)).OrderBy(x => x.GuestNo));
        }

        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;

                switch (columnName)
                {
                    case "StartDate":
                        if (!StartDate.HasValue)
                            message = "StartDate is required";
                        else if (StartDate < DateTimeExt.Today)
                            message = "StartDate is not smaller than today";
                        break;
                }

                if (!string.IsNullOrWhiteSpace(message))
                    return message;
                return null;
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using CPC.POS.Model;
using CPC.POS.Repository;
using CPC.Toolkit.Base;
using CPC.Toolkit.Command;
using CPC.POS;
using CPC.POS.View;

namespace CPC.POS.ViewModel
{
    class WorkScheduleViewModel : ViewModelBase, IDataErrorInfo
    {
        #region Define

        // Declare command properties
        public RelayCommand NewCommand { get; private set; }
        public RelayCommand<object> SaveCommand { get; private set; }
        public RelayCommand<tims_WorkScheduleModel> DeleteCommand { get; private set; }
        public RelayCommand ChangeScheduleCommand { get; private set; }
        public RelayCommand AssignWorkScheduleCommand { get; private set; }
        public RelayCommand<object> UnassignWorkScheduleCommand { get; private set; }
        public RelayCommand BarListClickCommand { get; private set; }
        public RelayCommand<object> MoveCommand { get; private set; }
        public RelayCommand<object> BackCommand { get; private set; }

        public RelayCommand<tims_WorkScheduleModel> SelectionChangedCommand { get; private set; }
        public RelayCommand<tims_WorkScheduleModel> MouseDoubleClickCommand { get; private set; }
        public RelayCommand<tims_WorkScheduleModel> SelectionCurrentCommand { get; private set; }
        public RelayCommand<tims_WorkScheduleModel> SelectionChangeToCommand { get; private set; }

        // Initial repository variables
        tims_WorkScheduleRepository _workScheduleRepository = new tims_WorkScheduleRepository();
        tims_WorkWeekRepository _workWeekRepository = new tims_WorkWeekRepository();
        base_GuestRepository _employeeRepository = new base_GuestRepository();
        base_GuestScheduleRepository _employeeScheduleRepository = new base_GuestScheduleRepository();
        tims_TimeLogRepository _timeLogRepository = new tims_TimeLogRepository();

        /// <summary>
        /// Filter left employee in change mode
        /// </summary>
        ICollectionView _leftEmployeeCollectionView;

        /// <summary>
        /// Filter right employee in change mode
        /// </summary>
        ICollectionView _rightEmployeeCollectionView;

        /// <summary>
        /// Filter employee schedule when unassign schedule
        /// </summary>
        ICollectionView _employeeScheduleCollectionView;

        #endregion

        #region Properties

        /// <summary>
        /// Store work schedule collection
        /// </summary>
        public ObservableCollection<tims_WorkScheduleModel> WorkScheduleCollection
        {
            get;
            set;
        }

        private tims_WorkScheduleModel _selectedWorkSchedule;
        /// <summary>
        /// Gets or sets the SelectedWorkSchedule.
        /// </summary>
        public tims_WorkScheduleModel SelectedWorkSchedule
        {
            get { return _selectedWorkSchedule; }
            set
            {
                if (_selectedWorkSchedule != value)
                {
                    _selectedWorkSchedule = value;
                    OnPropertyChanged(() => SelectedWorkSchedule);
                }
                OnSelectedWorkScheduleChanged();
            }
        }

        private bool _isSearchMode = true;
        /// <summary>
        /// Search Mode: 
        /// true open the Search grid.
        /// false close the search grid and open data entry.
        /// </summary>
        public bool IsSearchMode
        {
            get { return _isSearchMode; }
            set
            {
                if (_isSearchMode != value)
                {
                    _isSearchMode = value;
                    OnPropertyChanged(() => IsSearchMode);
                }
            }
        }

        private bool _isChangeMode;
        /// <summary>
        /// Gets or sets the IsChangeMode.
        /// </summary>
        public bool IsChangeMode
        {
            get { return _isChangeMode; }
            set
            {
                if (_isChangeMode != value)
                {
                    _isChangeMode = value;
                    OnPropertyChanged(() => IsChangeMode);
                    OnPropertyChanged(() => StartDate);
                }
            }
        }

        /// <summary>
        /// List of work schedule to select
        /// </summary>
        public ObservableCollection<tims_WorkScheduleModel> CurrentWorkScheduleCollection { get; set; }

        /// <summary>
        /// List of work schedule to change
        /// </summary>
        public ObservableCollection<tims_WorkScheduleModel> ChangeToWorkScheduleCollection { get; set; }

        /// <summary>
        /// List of employee assigned current work schedule
        /// </summary>
        public ObservableCollection<base_GuestModel> LeftEmployeeCollection { get; set; }

        /// <summary>
        /// List of employee assigned current work schedule
        /// </summary>
        public ObservableCollection<base_GuestModel> RightEmployeeCollection { get; set; }

        private tims_WorkScheduleModel _currentWorkSchedule;
        /// <summary>
        /// Gets or sets the CurrentWorkSchedule.
        /// </summary>
        public tims_WorkScheduleModel CurrentWorkSchedule
        {
            get { return _currentWorkSchedule; }
            set
            {
                if (_currentWorkSchedule != value)
                {
                    _currentWorkSchedule = value;
                    OnPropertyChanged(() => CurrentWorkSchedule);
                }
            }
        }

        private tims_WorkScheduleModel _changeToWorkSchedule;
        /// <summary>
        /// Gets or sets the ChangeToWorkSchedule.
        /// </summary>
        public tims_WorkScheduleModel ChangeToWorkSchedule
        {
            get { return _changeToWorkSchedule; }
            set
            {
                if (_changeToWorkSchedule != value)
                {
                    _changeToWorkSchedule = value;
                    OnPropertyChanged(() => ChangeToWorkSchedule);
                }
            }
        }

        private string _textSearch;
        /// <summary>
        /// Gets or sets the TextSearch.
        /// </summary>
        public string TextSearch
        {
            get { return _textSearch; }
            set
            {
                if (_textSearch != value)
                {
                    _textSearch = value;
                    OnPropertyChanged(() => TextSearch);
                    FilterLeftEmployee();
                }
            }
        }

        private DateTime? _startDate;
        /// <summary>
        /// Gets or sets the StartDate.
        /// </summary>
        public DateTime? StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    IsDirty = true;
                    _startDate = value;
                    OnPropertyChanged(() => StartDate);
                    FilterLeftEmployee();
                    FilterRightEmployee();
                }
            }
        }

        /// <summary>
        /// Get total item of filtered collection
        /// </summary>
        public int TotalItem
        {
            get
            {
                if (_leftEmployeeCollectionView == null)
                    return 0;
                return ((CollectionView)_leftEmployeeCollectionView).Count;
            }
        }

        /// <summary>
        /// Gets or sets the IsDirty
        /// </summary>
        public bool IsDirty { get; set; }


        #region ScheduleTotal
        private int _scheduleTotal;
        /// <summary>
        /// Gets or sets the ScheduleTotal.
        /// </summary>
        public int ScheduleTotal
        {
            get { return _scheduleTotal; }
            set
            {
                if (_scheduleTotal != value)
                {
                    _scheduleTotal = value;
                    OnPropertyChanged(() => ScheduleTotal);
                }
            }
        }
        #endregion


        #endregion

        #region Constructor

        // Default constructor
        public WorkScheduleViewModel()
        {
            //UpdateDB();
            //return;
            _ownerViewModel = App.Current.MainWindow.DataContext;

            // Route the commands
            NewCommand = new RelayCommand(OnNewCommandExecute, OnNewCommandCanExecute);
            SaveCommand = new RelayCommand<object>(OnSaveCommandExecute, OnSaveCommandCanExecute);
            DeleteCommand = new RelayCommand<tims_WorkScheduleModel>(OnDeleteCommandExecute, OnDeleteCommandCanExecute);
            ChangeScheduleCommand = new RelayCommand(OnChangeScheduleCommandExecute, OnChangeScheduleCommandCanExecute);
            AssignWorkScheduleCommand = new RelayCommand(OnAssignWorkScheduleCommandExecute, OnAssignWorkScheduleCommandCanExecute);
            UnassignWorkScheduleCommand = new RelayCommand<object>(OnUnassignWorkScheduleCommandExecute, OnUnassignWorkScheduleCommandCanExecute);
            BarListClickCommand = new RelayCommand(OnBarListClickCommandExecute);
            MoveCommand = new RelayCommand<object>(OnMoveCommandExecute, OnMoveCommandCanExecute);
            BackCommand = new RelayCommand<object>(OnBackCommandExecute, OnBackCommandCanExecute);

            // DataGrid selection changed event to command
            SelectionChangedCommand = new RelayCommand<tims_WorkScheduleModel>(OnSelectionChangedCommandExecute);
            SelectionCurrentCommand = new RelayCommand<tims_WorkScheduleModel>(OnSelectionCurrentCommandExecute);
            SelectionChangeToCommand = new RelayCommand<tims_WorkScheduleModel>(OnSelectionChangeToCommandExecute);
            // DataGrid mouse double click event to command
            MouseDoubleClickCommand = new RelayCommand<tims_WorkScheduleModel>(OnMouseDoubleClickCommandExecute);
            InitialData();

        }

        #endregion

        #region Command Methods

        /// <summary>
        /// Method to check whether the NewCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnNewCommandCanExecute()
        {
            return WorkScheduleCollection != null && WorkScheduleCollection.Count(x => x.IsNew) == 0;
        }

        /// <summary>
        /// Method to invoke when the NewCommand command is executed.
        /// </summary>
        private void OnNewCommandExecute()
        {
            if (IsSearchMode)
            {
                NewExecute();
            }
            else
                OnSaveCommandExecute("SaveNew");
        }

        /// <summary>
        /// Method to check whether the SaveCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnSaveCommandCanExecute(object param)
        {
            return IsValid && IsEdit();
            //return IsValid && IsEdit() &&
            //    !SelectedWorkSchedule.WorkWeekCollection.Has(x => x.DayOfWorkWeekCollection.Has(z => z.ExtensionErrors.Count > 0));
        }

        /// <summary>
        /// Method to invoke when the SaveCommand command is executed.
        /// </summary>
        private void OnSaveCommandExecute(object param)
        {
            if (!IsChangeMode) // Create work schedule mode
            {
                #region Add & Update Work Schedule

                // Update status for work schedule
                int numberOfEmployeeScheduleActive = SelectedWorkSchedule.EmployeeCollection.Count(x => x.EmployeeScheduleModel.Status.Is(ScheduleStatuses.Active));
                if (SelectedWorkSchedule.EmployeeCollection.Count > 0 &&
                    numberOfEmployeeScheduleActive > 0 &&
                    SelectedWorkSchedule.Status.Is(ScheduleStatuses.Pending))
                    SelectedWorkSchedule.Status = (int)ScheduleStatuses.Active;

                // Update rotate value if work schedule type is fixed or variable
                if (SelectedWorkSchedule.WorkScheduleType != (int)ScheduleTypes.Rotate)
                    // Update rotate property in model
                    SelectedWorkSchedule.Rotate = 1;
                //else if (SelectedWorkSchedule.Rotate == 1)
                //    SelectedWorkSchedule.Rotate = 2;

                // If work schedule is new, insert new to database
                if (SelectedWorkSchedule.IsNew)
                {
                    // Map value model to entity
                    SelectedWorkSchedule.WorkWeekToEntity();
                    SelectedWorkSchedule.EmployeeScheduleToEntity();

                    // Add new work schedule and work week
                    _workScheduleRepository.Add(SelectedWorkSchedule.tims_WorkSchedule);
                }
                else // If work schedule is edit, update work schedule
                {
                    //[UnKnow]SelectedWorkSchedule.ModifiedById = Define.UserLoginID;
                    SelectedWorkSchedule.ModifiedDate = DateTimeExt.Now;

                    // Update work week and turn off IsNew & IsDirty
                    UpdateWorkWeek();

                    // Update employee schedule and turn off IsNew & IsDirty
                    UpdateEmployeeSchedule();

                    // Update work schedule and sub
                    //_workScheduleRepository.UpdateWorkSchedule(SelectedWorkSchedule.WorkSchedule);
                }

                // Map work schedule model to entity
                SelectedWorkSchedule.ToEntity();

                // Accept save changes
                _workScheduleRepository.Commit();

                // Update id to work schedule and work week
                if (SelectedWorkSchedule.IsNew)
                {
                    // Add work schedule to collection
                    WorkScheduleCollection.Add(SelectedWorkSchedule);
                }

                // Update ID and turn off IsNew & IsDirty of child
                SelectedWorkSchedule.UpdateIDToModel();

                // Update number of employees
                SelectedWorkSchedule.NumberOfEmployees = SelectedWorkSchedule.EmployeeCollection.Count;

                // Raise binding properties
                SelectedWorkSchedule.RaiseWorkScheduleTypeName();
                //SelectedWorkSchedule.RaiseStatusName();

                // Turn off IsNew & IsDirty
                SelectedWorkSchedule.EndUpdate();

                // Check button is pressed
                if (param != null)
                    // If SaveNew button is pressed, call new method
                    NewExecute();
                else
                    // If SaveClose button is pressed, open search grid
                    IsSearchMode = true;

                #endregion
            }
            else // Change work schedule mode
            {
                #region Change Work Schedule For Employee

                //foreach (var workScheduleModel in ChangeToWorkScheduleCollection.Where(x => x.EmployeeCollection.Count > 0))
                //{
                // Get work schedule id that change to
                int workScheduleID = ChangeToWorkSchedule.Id;

                string conflictEmployeeSchedule = null;

                // Filtered employee list
                var filteredEmployeeList = (CollectionView)_rightEmployeeCollectionView;
                foreach (base_GuestModel employeeModel in filteredEmployeeList)
                {
                    if (employeeModel.CurrentEmployeeSchedule != null)
                    {
                        if (employeeModel.NextEmployeeSchedule == null)
                        {
                            if (employeeModel.PreviousEmployeeSchedule != null &&
                                employeeModel.PreviousEmployeeSchedule.WorkScheduleId == CurrentWorkSchedule.Id)
                            {
                                // Alert, yes is delete, no is cancel
                                conflictEmployeeSchedule += employeeModel.GuestNo + "\n";
                            }
                        }
                        else if (employeeModel.CurrentEmployeeSchedule.WorkScheduleId == CurrentWorkSchedule.Id)
                        {
                            // Alert, yes is delete, no is cancel
                            conflictEmployeeSchedule += employeeModel.GuestNo + "\n";
                        }
                        else if (employeeModel.CurrentEmployeeSchedule.Status.Is(EmployeeScheduleStatuses.Pending))
                            // Check status previous employee schedule is pending and startdate equal new employee schedule
                            // Alert, yes is delete, no is cancel
                            conflictEmployeeSchedule += employeeModel.GuestNo + "\n";
                    }
                }
                if (!string.IsNullOrWhiteSpace(conflictEmployeeSchedule))
                {
                    MessageBoxResult result = ShowMessageBox(string.Format("The follow employees {0} have one other work schedule.\nDo you want to override them?",
                        conflictEmployeeSchedule), "Employee Schedule", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                    if (result.Is(MessageBoxResult.No))
                        return;
                }
                foreach (base_GuestModel employeeModel in filteredEmployeeList)
                {
                    // If work schedule change to other current work schedule
                    if (employeeModel.EmployeeScheduleModel.WorkScheduleId != workScheduleID)
                    {
                        // Get employee ID
                        long employeeID = employeeModel.Id;

                        // Set property value for employee work schedule model
                        employeeModel.EmployeeScheduleModel = new base_GuestScheduleModel
                        {
                            GuestId = employeeID,
                            WorkScheduleId = workScheduleID,
                            StartDate = StartDate.Value.Date,
                            AssignDate = DateTimeExt.Now,
                            Status = (int)EmployeeScheduleStatuses.Pending
                        };

                        // Map value model to entity property
                        employeeModel.EmployeeScheduleModel.ToEntity();

                        if (employeeModel.CurrentEmployeeSchedule == null)
                        {
                            // Delete next schedule
                            _employeeScheduleRepository.Delete(employeeModel.NextEmployeeSchedule.base_GuestSchedule);
                        }
                        else if (employeeModel.NextEmployeeSchedule == null)
                        {
                            if (employeeModel.PreviousEmployeeSchedule != null)
                            {
                                if (employeeModel.PreviousEmployeeSchedule.WorkScheduleId == CurrentWorkSchedule.Id)
                                {
                                    // Alert, yes is delete, no is cancel
                                    //employeeModel.CurrentEmployeeSchedule.IsAlert = true;
                                }
                                // Delete current schedule
                                _employeeScheduleRepository.Delete(employeeModel.CurrentEmployeeSchedule.base_GuestSchedule);
                            }
                            else if (employeeModel.CurrentEmployeeSchedule.Status == 2)
                            {
                                // Delete current schedule
                                _employeeScheduleRepository.Delete(employeeModel.CurrentEmployeeSchedule.base_GuestSchedule);
                            }
                        }
                        else
                        {
                            if (employeeModel.CurrentEmployeeSchedule.Status.Is(EmployeeScheduleStatuses.Pending))
                                // Check status previous employee schedule is pending and startdate equal new employee schedule
                                // Delete current schedule
                                _employeeScheduleRepository.Delete(employeeModel.CurrentEmployeeSchedule.base_GuestSchedule);
                            // Delete next schedule
                            _employeeScheduleRepository.Delete(employeeModel.NextEmployeeSchedule.base_GuestSchedule);
                        }

                        // Add new employee schedule
                        if (employeeModel.EmployeeScheduleCollection.Count(x => x.Status.Is(EmployeeScheduleStatuses.Active) &&
                            x.WorkScheduleId == workScheduleID) == 0)
                            _employeeScheduleRepository.Add(employeeModel.EmployeeScheduleModel.base_GuestSchedule);
                    }
                    else
                        // Return item to it's work schedule if current duplicate change to work schedule
                        LeftEmployeeCollection.Add(employeeModel);
                }
                // Clear item in collection after save
                RightEmployeeCollection.Clear();
                //}

                // Accept save changes
                _employeeScheduleRepository.Commit();

                // Turn off IsDirty
                IsDirty = false;

                // Reload employee collection for all work schedule
                foreach (var workScheduleModel in WorkScheduleCollection)
                {
                    workScheduleModel.EmployeeCollection.Clear();
                    LoadEmployee(workScheduleModel);

                    // Update number of employees
                    workScheduleModel.NumberOfEmployees = workScheduleModel.EmployeeCollection.Count;

                    // Get status from entity
                    if (workScheduleModel.Id == workScheduleID)
                    {
                        workScheduleModel.Status = workScheduleModel.tims_WorkSchedule.Status;
                        workScheduleModel.IsDirty = false;
                    }
                }

                // Check button is pressed
                if (param == null)
                {
                    // If SaveClose button is pressed, open search grid
                    IsSearchMode = true;

                    // Turn off change work schedule mode
                    IsChangeMode = false;
                }
                else
                    // Reload schedule data
                    LoadDatasChangeSchedule();

                #endregion
            }
        }

        /// <summary>
        /// Method to check whether the DeleteCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnDeleteCommandCanExecute(tims_WorkScheduleModel item)
        {
            return item != null && item.Status.Is(ScheduleStatuses.Pending);
        }

        /// <summary>
        /// Method to invoke when the DeleteCommand command is executed.
        /// </summary>
        private void OnDeleteCommandExecute(tims_WorkScheduleModel item)
        {
            MessageBoxResult dialogResult = ShowMessageBox("Do you want to delete this item?", "Tims", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (dialogResult == MessageBoxResult.Yes)
            {
                _workScheduleRepository.Delete(item.tims_WorkSchedule);
                _workScheduleRepository.Commit();
                WorkScheduleCollection.Remove(item);
                ScheduleTotal = WorkScheduleCollection.Count();
            }
        }

        /// <summary>
        /// Method to check whether the AssignWorkScheduleCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnAssignWorkScheduleCommandCanExecute()
        {
            return true;
        }

        /// <summary>
        /// Method to invoke when the AssignWorkScheduleCommand command is executed.
        /// </summary>
        private void OnAssignWorkScheduleCommandExecute()
        {
            // Set window title by work schedule name
            string title = String.Empty;
            if (string.IsNullOrWhiteSpace(SelectedWorkSchedule.WorkScheduleName))
                title = "TIMS";
            else
                title = SelectedWorkSchedule.WorkScheduleName;

            // Show assign work schedule popup
            AssignWorkScheduleViewModel viewModel = new AssignWorkScheduleViewModel(SelectedWorkSchedule);
            _dialogService.ShowDialog<AssignWorkScheduleView>(_ownerViewModel, viewModel, title);
            SelectedWorkSchedule.NumberOfEmployees = SelectedWorkSchedule.EmployeeCollection.Count();
        }

        /// <summary>
        /// Method to check whether the UnassignWorkScheduleCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnUnassignWorkScheduleCommandCanExecute(object param)
        {
            if (param == null)
                return false;
            var selectedItems = param as ObservableCollection<object>;
            int numberOfEmployeeSchedulePending = selectedItems.Count(x => ((base_GuestModel)x).EmployeeScheduleModel.Status.Is(EmployeeScheduleStatuses.Pending));
            return numberOfEmployeeSchedulePending > 0 && numberOfEmployeeSchedulePending == selectedItems.Count;

        }

        /// <summary>
        /// Method to invoke when the UnassignWorkScheduleCommand command is executed.
        /// </summary>
        private void OnUnassignWorkScheduleCommandExecute(object param)
        {
            var selectedItems = param as ObservableCollection<object>;
            MessageBoxResult dialogResult = ShowMessageBox("Do you want to delete these item?", "Tims", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (dialogResult == MessageBoxResult.Yes)
            {
                foreach (base_GuestModel employeeModel in selectedItems.ToList())
                {
                    if (employeeModel.IsNew)
                        SelectedWorkSchedule.EmployeeCollection.Remove(employeeModel);
                    else
                        employeeModel.IsDeleted = true;
                }

                SelectedWorkSchedule.NumberOfEmployees = SelectedWorkSchedule.EmployeeCollection.Count();
            }

            _employeeScheduleCollectionView.Filter = (item) =>
            {
                base_GuestModel employeeModel = item as base_GuestModel;
                return !employeeModel.IsDeleted;
            };
        }

        /// <summary>
        /// Method to invoke when the BarListClickCommand command is executed.
        /// </summary>
        public void OnBarListClickCommandExecute()
        {
            BarListExecute();
        }

        /// <summary>
        /// Method to invoke when the MouseDoubleClickCommand command is executed.
        /// </summary>
        private void OnMouseDoubleClickCommandExecute(tims_WorkScheduleModel item)
        {
            IsSearchMode = !IsSearchMode;
            SelectedWorkSchedule = item;
            if (SelectedWorkSchedule != null)
            {
                // Load work week for work schedule
                LoadWorkWeek();

                // Load employee for work schedule
                LoadEmployee();
            }
        }

        /// <summary>
        /// Method to check whether the ChangeScheduleCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnChangeScheduleCommandCanExecute()
        {
            return true;
        }

        /// <summary>
        /// Method to invoke when the ChangeScheduleCommand command is executed.
        /// </summary>
        private void OnChangeScheduleCommandExecute()
        {
            // Turn off search mode
            IsSearchMode = false;

            // Turn on change work schedule mode
            IsChangeMode = true;

            LoadDatasChangeSchedule();
        }

        /// <summary>
        /// Method to invoke when the SelectionChangedCommand command is executed.
        /// </summary>
        private void OnSelectionChangedCommandExecute(tims_WorkScheduleModel item)
        {
            if (item != null)
                SelectedWorkSchedule = item;
        }

        /// <summary>
        /// Method to invoke when the SelectionCurrentCommand command is executed.
        /// </summary>
        private void OnSelectionCurrentCommandExecute(tims_WorkScheduleModel item)
        {
            if (item != null)
                CurrentWorkSchedule = item;
            FilterLeftEmployee();
        }

        /// <summary>
        /// Method to invoke when the SelectionChangeToCommand command is executed.
        /// </summary>
        private void OnSelectionChangeToCommandExecute(tims_WorkScheduleModel item)
        {
            if (item != null)
                ChangeToWorkSchedule = item;
        }

        /// <summary>
        /// Method to check whether the MoveCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnMoveCommandCanExecute(object param)
        {
            if (param == null)
                return false;
            return (param as ObservableCollection<object>).Count > 0;
        }

        /// <summary>
        /// Method to invoke when the MoveCommand command is executed.
        /// </summary>
        private void OnMoveCommandExecute(object param)
        {
            MoveItem(param, LeftEmployeeCollection, RightEmployeeCollection);
            OnPropertyChanged(() => RightEmployeeCollection);
            FilterRightEmployee();
        }

        /// <summary>
        /// Method to check whether the BackCommand command can be executed.
        /// </summary>
        /// <returns><c>true</c> if the command can be executed; otherwise <c>false</c></returns>
        private bool OnBackCommandCanExecute(object param)
        {
            if (param == null)
                return false;
            return (param as ObservableCollection<object>).Count > 0;
        }

        /// <summary>
        /// Method to invoke when the BackCommand command is executed.
        /// </summary>
        private void OnBackCommandExecute(object param)
        {
            MoveItem(param, RightEmployeeCollection, LeftEmployeeCollection);
        }

        protected override bool CanExecuteClosing()
        {
            return BarListExecute();
        }

        #endregion

        #region Private Methods

        private void NewExecute()
        {
            // Switch to grid content of work schedule
            IsSearchMode = false;

            tims_WorkScheduleModel workScheduleModel = new tims_WorkScheduleModel();
            workScheduleModel.WorkWeekCollection = new ObservableCollection<tims_WorkWeekModel>();
            workScheduleModel.EmployeeCollection = new ObservableCollection<base_GuestModel>();

            // Set work schedule type default is fixed
            workScheduleModel.WorkScheduleType = (int)ScheduleTypes.Fixed;

            // Set default rotate
            workScheduleModel.Rotate = 2;

            // Set work schedule status is pending
            workScheduleModel.Status = (int)ScheduleStatuses.Pending;

            workScheduleModel.CreatedDate = DateTimeExt.Now;
            //[UnKnow] workScheduleModel.CreatedByID = Define.UserLoginID;
            //WorkScheduleCollection.Add(workScheduleModel);

            // Initial one work week for work schedule
            //workScheduleModel.AddWorkWeek(1);
            SelectedWorkSchedule = workScheduleModel;
            SelectedWorkSchedule.AddWorkWeek(1);

            // Set selected tab item
            SelectedWorkSchedule.SelectedWorkWeek = workScheduleModel.WorkWeekCollection.First();

            SelectedWorkSchedule.WorkWeekEndUpdate();
            SelectedWorkSchedule.IsDirty = false;

            // Initial employee schedule collection view
            _employeeScheduleCollectionView = CollectionViewSource.GetDefaultView(SelectedWorkSchedule.EmployeeCollection);
        }

        private bool BarListExecute()
        {
            bool result = true;
            if (IsEdit())
            {
                MessageBoxResult msgResult = MessageBoxResult.None;
                if (!IsChangeMode)
                {
                    if (SelectedWorkSchedule.IsNew)
                    {
                        // Check valid
                        if (OnSaveCommandCanExecute(null))
                        {
                            msgResult = MessageBox.Show("Do you want to save this work schedule?", "TIMS", MessageBoxButton.YesNoCancel);
                            if (msgResult.Is(MessageBoxResult.Yes))
                            {
                                // Add new work schedule
                                OnSaveCommandExecute(null);

                                return true;
                            }
                            else if (msgResult.Is(MessageBoxResult.No))
                            {
                                SelectedWorkSchedule = null;
                                result = true;
                            }
                            else
                                return false;
                        }
                        else
                        {
                            msgResult = MessageBox.Show("Do you want to delete this work schedule?", "TIMS", MessageBoxButton.YesNo);
                            if (msgResult.Is(MessageBoxResult.Yes))
                            {
                                SelectedWorkSchedule = null;
                                result = true;
                            }
                            else
                                return false;
                        }
                    }
                    else
                    {
                        if (OnSaveCommandCanExecute(null))
                        {
                            msgResult = MessageBox.Show("Do you want to save this work schedule?", "TIMS", MessageBoxButton.YesNoCancel);
                            if (msgResult.Is(MessageBoxResult.Yes))
                            {
                                // Update work schedule
                                OnSaveCommandExecute(null);
                                return true;
                            }
                            else if (msgResult.Is(MessageBoxResult.No))
                            {
                                // Rollback work schedule
                                SelectedWorkSchedule.WorkWeekCollection.Clear();
                                SelectedWorkSchedule.EmployeeCollection.Clear();
                                SelectedWorkSchedule.ToModel();
                                SelectedWorkSchedule.EndUpdate();
                                LoadWorkWeek();
                                LoadEmployee();
                                result = true;
                            }
                            else
                                return false;
                        }
                        else
                        {
                            msgResult = MessageBox.Show("Do you want to rollback this work schedule?", "TIMS", MessageBoxButton.YesNo);
                            if (msgResult.Is(MessageBoxResult.Yes))
                            {
                                // Rollback work schedule
                                SelectedWorkSchedule.WorkWeekCollection.Clear();
                                SelectedWorkSchedule.EmployeeCollection.Clear();
                                SelectedWorkSchedule.ToModel();
                                SelectedWorkSchedule.EndUpdate();
                                LoadWorkWeek();
                                LoadEmployee();
                                result = true;
                            }
                            else
                                return false;
                        }
                    }
                }
                else
                {
                    if (OnSaveCommandCanExecute(null))
                    {
                        msgResult = MessageBox.Show("Do you want to save changes?", "TIMS", MessageBoxButton.YesNoCancel);
                        if (msgResult.Is(MessageBoxResult.Yes))
                        {
                            // Add new work schedule
                            OnSaveCommandExecute(null);
                            return true;
                        }
                        else if (msgResult.Is(MessageBoxResult.No))
                        {
                            // Reset form
                            foreach (var employeeModel in RightEmployeeCollection.ToList())
                            {
                                // Return back previous work schedule
                                LeftEmployeeCollection.Add(employeeModel);

                                // Remove in change to collection
                                RightEmployeeCollection.Remove(employeeModel);
                            }
                            result = true;
                        }
                        else
                            return false;
                    }
                    else
                    {
                        msgResult = MessageBox.Show("Do you want to rollback this work schedule?", "TIMS", MessageBoxButton.YesNo);
                        if (msgResult.Is(MessageBoxResult.Yes))
                        {
                            // Reset form
                            foreach (var employeeModel in RightEmployeeCollection.ToList())
                            {
                                // Return back previous work schedule
                                LeftEmployeeCollection.Add(employeeModel);

                                // Remove in change to collection
                                RightEmployeeCollection.Remove(employeeModel);
                            }
                            result = true;
                        }
                        else
                            return false;
                    }
                }
            }

            IsSearchMode = !IsSearchMode;
            if (IsChangeMode)
                IsChangeMode = false;
            return result;
        }

        /// <summary>
        /// Filter item for right employee list
        /// </summary>
        private void FilterRightEmployee()
        {
            _rightEmployeeCollectionView.Filter = (item) =>
            {
                base_GuestModel employeeModel = item as base_GuestModel;
                if (StartDate.HasValue)
                {
                    if (StartDate == DateTimeExt.Today)
                        //return employeeModel.TimeLogCollection.Count(x => x.WorkScheduleID == ChangeToWorkSchedule.WorkScheduleID) == 0;
                        return employeeModel.TimeLogCollection.Count == 0;
                    else if (StartDate < DateTimeExt.Today)
                        return false;
                }
                return true;
            };
            OnPropertyChanged(() => RightEmployeeCollection);
        }

        /// <summary>
        /// Filter item for left employee list
        /// </summary>
        private void FilterLeftEmployee()
        {
            _leftEmployeeCollectionView.Filter = (item) =>
            {
                // Get employee model
                base_GuestModel employeeModel = item as base_GuestModel;

                // Get current employee schedule
                employeeModel.EmployeeScheduleModel = employeeModel.EmployeeScheduleCollection.
                    LastOrDefault(x => x.WorkScheduleId == CurrentWorkSchedule.Id);

                bool result = false;

                // If text search is null, return true
                if (string.IsNullOrWhiteSpace(TextSearch))
                    result = true;
                else
                {
                    if (string.IsNullOrWhiteSpace(employeeModel.GuestNo))
                        result = false;
                    else
                        result = employeeModel.GuestNo.ToLower().Contains(TextSearch.ToLower());

                    if (string.IsNullOrWhiteSpace(employeeModel.FirstName))
                        result |= false;
                    else
                        result |= employeeModel.FirstName.ToLower().Contains(TextSearch.ToLower());

                    if (string.IsNullOrWhiteSpace(employeeModel.LastName))
                        result |= false;
                    else
                        result |= employeeModel.LastName.ToLower().Contains(TextSearch.ToLower());
                }

                if (CurrentWorkSchedule == null)
                    result &= true;
                else
                {
                    result &= employeeModel.EmployeeScheduleModel != null;
                }

                if (!StartDate.HasValue)
                    result &= true;
                else
                {
                    if (StartDate == DateTimeExt.Today)
                        result &= employeeModel.TimeLogCollection.Count == 0;
                    else if (StartDate < DateTimeExt.Today)
                        result &= false;
                }

                return result;
            };
            OnPropertyChanged(() => TotalItem);
            OnPropertyChanged(() => LeftEmployeeCollection);
            
        }

        /// <summary>
        /// Move item from source to destination collectin
        /// </summary>
        /// <param name="selectedItems">Selected item collection</param>
        /// <param name="source">Source collection</param>
        /// <param name="destination">Destination collecion</param>
        private void MoveItem(object param, ObservableCollection<base_GuestModel> source, ObservableCollection<base_GuestModel> destination)
        {
            var selectedItems = param as ObservableCollection<object>;
            foreach (base_GuestModel employeeModel in selectedItems.ToList())
            {
                // Add to destination collection
                destination.Add(employeeModel);

                // Remove from source collection
                source.Remove(employeeModel);
            }
            OnPropertyChanged(() => TotalItem);
            IsDirty = true;
        }

        /// <summary>
        /// Load data when turn on change mode
        /// </summary>
        private void LoadDatasChangeSchedule()
        {
            // Load active or pending work schedule
            var workSchedules = _workScheduleRepository.GetAll(x => x.Status > (int)ScheduleStatuses.Inactive).
                Select(x => new tims_WorkScheduleModel(x)
                {
                    // Initial employee collection
                    EmployeeCollection = new ObservableCollection<base_GuestModel>()
                }).OrderBy(x => x.Id);  // Sort by work schedule ID

            // Create and raise list current and change to work schedule
            CurrentWorkScheduleCollection = new ObservableCollection<tims_WorkScheduleModel>(workSchedules);
            ChangeToWorkScheduleCollection = new ObservableCollection<tims_WorkScheduleModel>(workSchedules);
            OnPropertyChanged(() => CurrentWorkScheduleCollection);
            OnPropertyChanged(() => ChangeToWorkScheduleCollection);

            // Load left list employee
            var employeeScheduleGroups = _employeeScheduleRepository.
                GetAll(x => x.base_Guest.IsActived &&
                    x.Status > (int)EmployeeScheduleStatuses.Inactive).
                GroupBy(x => x.GuestId).
                OrderBy(g => g.First().base_Guest.GuestNo);
            LeftEmployeeCollection = new ObservableCollection<base_GuestModel>();
            foreach (var employeeScheduleGroup in employeeScheduleGroups)
            {
                // Get the first employee from group
                var employeeSchedule = employeeScheduleGroup.First();
                base_GuestModel employeeModel = new base_GuestModel(employeeSchedule.base_Guest)
                {
                    // Get employee schedule collection
                    EmployeeScheduleCollection = new ObservableCollection<base_GuestScheduleModel>(
                        employeeSchedule.base_Guest.base_GuestSchedule.Where(x => !x.Status.Is(EmployeeScheduleStatuses.Inactive)).
                        OrderBy(x => x.StartDate).ThenBy(x => x.AssignDate). // Sort by StartDate and AssignDate
                        Select(x => new base_GuestScheduleModel(x))),

                    TimeLogCollection = new CollectionBase<tims_TimeLogModel>()
                    //// Get timelog collection
                    //TimeLogCollection = new CollectionBase<TimeLogModel>(employeeSchedule.WorkSchedule.TimeLog.
                    //    Where(x => x.EmployeeID == employeeSchedule.EmployeeID && x.ClockIn >= DateTimeExt.Today).
                    //    Select(x => new TimeLogModel(x)))
                };

                // Get current employee schedule that StartDate <= Today
                employeeModel.CurrentEmployeeSchedule = employeeModel.EmployeeScheduleCollection.
                    LastOrDefault(x => x.StartDate <= DateTimeExt.Today);

                // Get next employee schedule that StartDate > Today
                employeeModel.NextEmployeeSchedule = employeeModel.EmployeeScheduleCollection.
                    LastOrDefault(x => x.StartDate > DateTimeExt.Today);

                // Get previous employee schedule that StartDate > Today
                if (employeeModel.CurrentEmployeeSchedule != null)
                {
                    // Get timelog collection
                    employeeModel.TimeLogCollection = new CollectionBase<tims_TimeLogModel>(employeeSchedule.base_Guest.tims_TimeLog.
                        Where(x => x.WorkScheduleId == employeeModel.CurrentEmployeeSchedule.WorkScheduleId && x.ClockIn >= DateTimeExt.Today).
                        Select(x => new tims_TimeLogModel(x)));

                    employeeModel.PreviousEmployeeSchedule = employeeModel.EmployeeScheduleCollection.
                        LastOrDefault(x => x.StartDate < employeeModel.CurrentEmployeeSchedule.StartDate);
                }
                LeftEmployeeCollection.Add(employeeModel);
            }

            // Initial right list employee
            RightEmployeeCollection = new ObservableCollection<base_GuestModel>();

            // Initial collection view for two list
            _leftEmployeeCollectionView = CollectionViewSource.GetDefaultView(LeftEmployeeCollection);
            _rightEmployeeCollectionView = CollectionViewSource.GetDefaultView(RightEmployeeCollection);

            // Set current work schedule default or by selected
            if (CurrentWorkScheduleCollection.Count > 0)
            {
                // If work schedule is selected, set it to current work schedule
                if (SelectedWorkSchedule != null && SelectedWorkSchedule.Id > 0)
                {
                    int workScheduleID = SelectedWorkSchedule.Id;
                    CurrentWorkSchedule = CurrentWorkScheduleCollection.Single(x => x.Id == workScheduleID);
                }
                else // Set the first one to current work schedule
                    CurrentWorkSchedule = CurrentWorkScheduleCollection.First();
                FilterLeftEmployee();
            }

            // Set change to work schedule default
            if (ChangeToWorkScheduleCollection.Count > 0)
                ChangeToWorkSchedule = ChangeToWorkScheduleCollection.First();
        }

        /// <summary>
        /// Update employee schedule for work schedule
        /// </summary>
        private void UpdateEmployeeSchedule()
        {
            foreach (var employeeModel in SelectedWorkSchedule.EmployeeCollection.ToList())
            {
                // Map value model to entity property
                employeeModel.EmployeeScheduleModel.ToEntity();

                if (employeeModel.IsNew)
                {
                    long employeeID = employeeModel.Id;
                    var employeeSchedule = _employeeScheduleRepository.
                        GetAll(x => x.Status != (int)EmployeeScheduleStatuses.Active && x.GuestId == employeeID).
                        OrderBy(x => x.StartDate).LastOrDefault();
                    if (employeeSchedule != null && employeeSchedule.Status == (int)EmployeeScheduleStatuses.Pending)
                    {
                        // Delete old employee schedule that StartDate > Today
                        _employeeScheduleRepository.Delete(employeeSchedule);
                    }
                    // Add new employee schedule
                    _employeeScheduleRepository.Add(employeeModel.EmployeeScheduleModel.base_GuestSchedule);
                }
                else if (employeeModel.IsDeleted)
                {
                    if (employeeModel.EmployeeScheduleModel.base_GuestSchedule.Status == (int)EmployeeScheduleStatuses.Pending)
                        _employeeScheduleRepository.Delete(employeeModel.EmployeeScheduleModel.base_GuestSchedule);
                    else
                    {
                        // Update status property in model
                        employeeModel.EmployeeScheduleModel.Status = (int)EmployeeScheduleStatuses.Inactive;

                        // Update status property in entity
                        employeeModel.EmployeeScheduleModel.base_GuestSchedule.Status = (int)EmployeeScheduleStatuses.Inactive;

                        // Update employee schedule
                        //_employeeScheduleRepository.UpdateEmployeeSchedule(employeeModel.EmployeeScheduleModel.EmployeeSchedule);
                    }
                    // Remove employee schedule in collection
                    SelectedWorkSchedule.EmployeeCollection.Remove(employeeModel);
                }
                employeeModel.EmployeeScheduleModel.EndUpdate();
                employeeModel.EndUpdate();
            }
            //SelectedWorkSchedule.NumberOfEmployees = SelectedWorkSchedule.EmployeeCollection.Count;
        }

        /// <summary>
        /// Update work week for work schedule
        /// </summary>
        private void UpdateWorkWeek()
        {
            foreach (var workWeekModel in SelectedWorkSchedule.WorkWeekCollection.ToList())
            {
                // Delete all day of work week if work week is deleted
                if (workWeekModel.IsDeleted)
                {
                    // Get days of work week that is deleted
                    var dayOfWorkWeeks = SelectedWorkSchedule.tims_WorkSchedule.tims_WorkWeek.Where(x => x.Week == workWeekModel.Week);

                    // Remove days of work week that is deleted
                    // Use delete all function in repository
                    _workWeekRepository.Delete(dayOfWorkWeeks);

                    // Remove work week model
                    SelectedWorkSchedule.WorkWeekCollection.Remove(workWeekModel);
                }
                else
                {
                    foreach (var dayOfWorkWeekModel in workWeekModel.DayOfWorkWeekCollection.Where(x => x.IsDirty))
                    {
                        dayOfWorkWeekModel.ToEntity();
                        var dayOfWorkWeek = SelectedWorkSchedule.tims_WorkSchedule.tims_WorkWeek.FirstOrDefault(
                            x => x.Week == workWeekModel.Week && x.Day == dayOfWorkWeekModel.Day);
                        if (dayOfWorkWeek != null)
                        {
                            // Delete day of work week
                            if (!dayOfWorkWeekModel.HasWork)
                                _workWeekRepository.Delete(dayOfWorkWeekModel.tims_WorkWeek);
                            else // Update day of work week if exist
                            {
                                // Update entity value
                                //dayOfWorkWeekModel.ToEntityCustom(dayOfWorkWeek);
                                //_workWeekRepository.UpdateWorkWeek(dayOfWorkWeekModel.WorkWeek);
                            }
                        }
                        else if (dayOfWorkWeekModel.HasWork)
                            // Add new day of work week
                            SelectedWorkSchedule.tims_WorkSchedule.tims_WorkWeek.Add(dayOfWorkWeekModel.tims_WorkWeek);
                        //_workWeekRepository.AddWorkWeek(dayOfWorkWeekModel.WorkWeek);
                        dayOfWorkWeekModel.EndUpdate();
                    }
                }
                workWeekModel.EndUpdate();
            }
        }

        /// <summary>
        /// Load employee when plus-button clicked
        /// </summary>
        private void OnSelectedWorkScheduleChanged()
        {
            if (SelectedWorkSchedule != null)
            {
                // Load employee for work schedule
                LoadEmployee();

                // Initial employee schedule collection view
                _employeeScheduleCollectionView = CollectionViewSource.GetDefaultView(SelectedWorkSchedule.EmployeeCollection);
            }
        }

        /// <summary>
        /// Load employee to work schedule
        /// </summary>
        private void LoadEmployee(tims_WorkScheduleModel workScheduleModel)
        {
            // Load employee collection if it's not loaded
            if (workScheduleModel.EmployeeCollection.Count == 0)
            {
                // Get active employees of this work schedule
                int workScheduleID = workScheduleModel.Id;
                workScheduleModel.EmployeeCollection = new ObservableCollection<base_GuestModel>(_employeeScheduleRepository.
                    GetAll(x => x.base_Guest.IsActived &&
                        x.Status > (int)EmployeeScheduleStatuses.Inactive &&
                        x.WorkScheduleId == workScheduleID).
                    Select(x => new base_GuestModel(x.base_Guest)
                    {
                        // Get contact information of employee
                        //[UnKnow]ContactModel = new ContactModel(x.Employee.Contact),

                        // Get employee schedule is activing
                        EmployeeScheduleModel = new base_GuestScheduleModel(x.base_Guest.base_GuestSchedule.
                            Where(y => y.WorkScheduleId == workScheduleID).
                            OrderBy(y => y.StartDate).LastOrDefault())
                    }).OrderBy(x => x.GuestNo)); // Sort by employee number

            }
        }

        /// <summary>
        /// Load employee to work schedule
        /// </summary>
        private void LoadEmployee()
        {
            LoadEmployee(SelectedWorkSchedule);
        }

        /// <summary>
        /// Load work week to work schedule
        /// </summary>
        private void LoadWorkWeek()
        {
            // Load work week collection if it's not loaded
            if (SelectedWorkSchedule.WorkWeekCollection.Count == 0)
            {
                // Load and group work week by week
                int workScheduleID = SelectedWorkSchedule.Id;
                var workWeeks = from x in _workWeekRepository.GetAll(x => x.WorkScheduleId == workScheduleID)
                                group x by x.Week into g
                                select new { WorkScheduleID = workScheduleID, Week = g.Key, DayOfWorkWeeks = g };

                // Create temporary work week for schedule
                for (int i = 0; i < workWeeks.Count(); i++)
                    SelectedWorkSchedule.AddWorkWeek(i + 1);

                // Update temporary workk week by database
                foreach (var workWeekModel in SelectedWorkSchedule.WorkWeekCollection)
                {
                    // Get work week by week
                    var workWeek = workWeeks.Single(x => x.Week == workWeekModel.Week);
                    foreach (var dayOfWorkWeekModel in workWeekModel.DayOfWorkWeekCollection)
                    {
                        // Get work day by day
                        var dayOfWorkWeek = workWeek.DayOfWorkWeeks.FirstOrDefault(x => x.Day == dayOfWorkWeekModel.Day);

                        // Update work day if it's exist
                        if (dayOfWorkWeek != null)
                        {
                            // Update entity for work day
                            dayOfWorkWeekModel.SetEntity(dayOfWorkWeek);

                            // This day have work
                            dayOfWorkWeekModel.HasWork = true;

                            // Map entity to model
                            dayOfWorkWeekModel.ToModel();

                            // Turn off IsNew for work day
                            dayOfWorkWeekModel.IsNew = false;
                        }
                        else
                            // This day is OFF
                            dayOfWorkWeekModel.HasWork = false;

                        // Turn off IsDirty for work day
                        dayOfWorkWeekModel.IsDirty = false;
                    }

                    // Turn off IsNew & IsDirty for work week
                    workWeekModel.EndUpdate();
                }

                // Set default selected work week
                SelectedWorkSchedule.SelectedWorkWeek = SelectedWorkSchedule.WorkWeekCollection.FirstOrDefault();
            }
        }



        /// <summary>
        /// Load work schedule data
        /// </summary>
        private void InitialData()
        {
            // Get work schedule collection
            WorkScheduleCollection = new ObservableCollection<tims_WorkScheduleModel>(
                _workScheduleRepository.GetAll().Select(x => new tims_WorkScheduleModel(x)
                {
                    // Initial collections
                    WorkWeekCollection = new ObservableCollection<tims_WorkWeekModel>(),
                    EmployeeCollection = new ObservableCollection<base_GuestModel>(),

                    // Get number of employees that it's schedule status is active or pending
                    NumberOfEmployees = x.base_GuestSchedule.Count(y => y.base_Guest.IsActived &&
                        y.Status > (int)EmployeeScheduleStatuses.Inactive)
                }).OrderBy(z => z.Id)); // Sort by work schedule ID

            // Set default selected work schedule is first in collection
            SelectedWorkSchedule = WorkScheduleCollection.FirstOrDefault();
            ScheduleTotal = WorkScheduleCollection.Count();
        }

        /// <summary>
        /// Check has edit on form
        /// </summary>
        /// <returns></returns>
        private bool IsEdit()
        {
            if (IsChangeMode)
                return IsDirty && ((CollectionView)_rightEmployeeCollectionView).Count > 0;

            if (SelectedWorkSchedule == null)
                return false;

            return SelectedWorkSchedule.IsDirty ||
                SelectedWorkSchedule.EmployeeCollection.Has(x => x.IsNew | x.IsDirty | x.IsDeleted) ||
                (SelectedWorkSchedule.WorkWeekCollection != null &&
                SelectedWorkSchedule.WorkWeekCollection.Count(x => x.DayOfWorkWeekCollection.Has(y => y.IsDirty)) > 0);
        }

        #endregion

        #region Override Methods
        /// <summary>
        /// Load work schedule data
        /// </summary>
        public override void LoadData()
        {

        }
        #endregion

        #region UpdateDB


        private List<string> ReadAllStrings(string path)
        {
            List<string> stringList = new List<string>();

            using (StreamReader reader = new StreamReader(path))
            {
                string line = reader.ReadLine();
                while (line != null)
                {
                    stringList.Add(line);
                    line = reader.ReadLine();
                }
            }
            return stringList;
        }

        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;

                switch (columnName)
                {
                    case "StartDate":
                        if (IsChangeMode)
                            if (!StartDate.HasValue)
                                message = "StartDate is required";
                            else if (StartDate < DateTimeExt.Today)
                                message = "StartDate is not smaller than today";
                        break;
                }

                if (!string.IsNullOrWhiteSpace(message))
                    return message;
                return null;
            }
        }

        #endregion
    }
}

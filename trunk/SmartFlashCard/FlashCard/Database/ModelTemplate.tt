<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#@ import namespace="System.Diagnostics" #>
<#
    CodeGenerationTools code = new CodeGenerationTools(this);
    MetadataLoader loader = new MetadataLoader(this);
    CodeRegion region = new CodeRegion(this, 1);
    MetadataTools ef = new MetadataTools(this);

    string inputFile = @"..\Database\SmartFlashCardDB.edmx";
    EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
    string namespaceName = code.VsNamespaceSuggestion();

    EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

    // Emit Entity Types
    foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {
        string filename = entity.Name + "Model.cs";
        // Write out support code to primary template output file
        fileManager.StartNewFile(filename);
        WriteHeader(fileManager);
        BeginNamespace(namespaceName, code);
        BeginBodyClass(entity, code, region);
        if(!DoesFileExist(filename))
        {
            EndBodyClass();
            EndNamespace(namespaceName);
        }
        //break;
    }
    fileManager.Process();
#>

<#+
    void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
    {
        //fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using FlashCard.Models;

<#+
        //String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray());
        //fileManager.EndBlock();
    }
#>

<#+
    void BeginNamespace(string namespaceName, CodeGenerationTools code)
    {
        CodeRegion region = new CodeRegion(this);
        if (!String.IsNullOrEmpty(namespaceName))
        {
#>
namespace <#=
            code.EscapeNamespace(namespaceName)
            #>
{
<#+
            PushIndent(CodeRegion.GetIndent(1));
        }
    }
#>

<#+
    void EndNamespace(string namespaceName)
    {
        if (!String.IsNullOrEmpty(namespaceName))
        {
            PopIndent();
#>
}
<#+
        }
    }
#>

<#+
    void BeginBodyClass(EntityType entity, CodeGenerationTools code, CodeRegion region)
    {
        string customCode = string.Empty;
        string filename = entity.Name + "Model.cs";
        if(DoesFileExist(filename))
            customCode = OutputCustomCode(filename);
#>
/// <summary>
/// Model for table <#=        code.Escape(entity.Name)#> 
/// </summary>
<#=        Accessibility.ForType(entity)#> <#=        code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=        code.Escape(entity.Name + "Model")#> <#=        code.StringBefore(": ", string.IsNullOrEmpty(code.Escape(entity.BaseType)) ? "ViewModelBase" : code.Escape(entity.BaseType))#>, IDataErrorInfo
{
<#+
        region.Begin("Ctor");
        this.WriteLine(string.Empty);
        PushIndent(CodeRegion.GetIndent(1));
        #>
// Default contructor
public <#=        code.Escape(entity.Name + "Model")#>()
{
    this.IsNew = true;
    this.<#=        code.Escape(entity.Name)#> = new <#=        code.Escape(entity.Name)#>();
}
<#+        this.WriteLine(string.Empty);#>
// Default contructor that set entity to field
public <#=        code.Escape(entity.Name + "Model")#>(<#=        code.Escape(entity.Name)#> <#=        code.Escape(entity.Name).ToLower()#>)
{
    this.<#=        code.Escape(entity.Name)#> = <#=        code.Escape(entity.Name).ToLower()#>;
    ToModel();
    this.IsDirty = false;
}
<#+
        PopIndent();
        region.End();
        this.WriteLine(string.Empty);
        region.Begin("Entity Properties");
        PushIndent(CodeRegion.GetIndent(1));
        this.WriteLine(string.Empty);
#>
<#=        Accessibility.ForType(entity)#> <#=        code.Escape(entity.Name)#> <#=        code.Escape(entity.Name)#> { get; private set; }
<#+        this.WriteLine(string.Empty);#>
protected bool _isNew;
/// <summary>
/// Property Base
/// <para> Gets or sets the IsNew </para>
/// </summary>
public bool IsNew
{
    get { return _isNew; }
    set
    {
        if (_isNew != value)
        {
            _isNew = value;
            RaisePropertyChanged(() => IsNew);
        }
    }
}
<#+        this.WriteLine(string.Empty);#>
protected bool _isDirty;
/// <summary>
/// Property Base
/// <para>Gets or sets the IsDirty</para>
/// </summary>
public bool IsDirty
{
    get { return _isDirty; }
    set
    {
        if (_isDirty != value)
        {
            _isDirty = value;
            RaisePropertyChanged(() => IsDirty);
        }
    }
}
<#+        this.WriteLine(string.Empty);#>
protected bool _isDeleted;
/// <summary>
/// Property Base
///<para>Gets or sets the IsDeleted</para>
/// </summary>
public bool IsDeleted
{
    get { return _isDeleted; }
    set
    {
        if (_isDeleted != value)
        {
            _isDeleted = value;
            RaisePropertyChanged(() => IsDeleted);
        }
    }
}
<#+        this.WriteLine(string.Empty);#>
protected bool _isChecked;
/// <summary>
/// Property Base
///<para> Gets or sets the IsChecked</para>
/// </summary>
public bool IsChecked
{
    get { return _isChecked; }
    set
    {
        if (_isChecked != value)
        {
            _isChecked = value;
            RaisePropertyChanged(() => IsChecked);
        }
    }
}
<#+        this.WriteLine(string.Empty);#>

/// <summary>
///<para>Public Method</para>
/// Method for set IsNew & IsDirty = false;
/// </summary>
public void EndUpdate()
{
    this.IsNew = false;
    this.IsDirty = false;
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
///Public Method
///<para> Method for set PropertyModel to Entity</para>
/// </summary>
public void ToEntity()
{
<#+
        foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
        {
            bool isKeyProperty = ((EntityType)edmProperty.DeclaringType).KeyMembers.Contains(edmProperty);
            if(isKeyProperty)
            {
#>
    if (IsNew)
        this.<#=                code.Escape(entity.Name)#>.<#=                code.Escape(edmProperty)#> = this.<#=                code.Escape(edmProperty)#>;
<#+
            }
            else
            {
                if(code.Escape(edmProperty.TypeUsage).Equals("string"))
                {
#>
    this.<#=                    code.Escape(entity.Name)#>.<#=                    code.Escape(edmProperty)#> = this.<#=                    code.Escape(edmProperty)#>.Trim();
<#+                }else{ #>
    this.<#=                    code.Escape(entity.Name)#>.<#=                    code.Escape(edmProperty)#> = this.<#=                    code.Escape(edmProperty)#>;
<#+             
                }
            }
           
        }
#>
}

<#+        this.WriteLine(string.Empty);#>
/// <summary>
///Public Method
///<para> Method for set Entity to PropertyModel</para>
/// </summary
public void ToModel()
{
<#+
        foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
        {
#>
    this.<#=            code.Escape(edmProperty)#> = this.<#=            code.Escape(entity.Name)#>.<#=            code.Escape(edmProperty)#>;
<#+
        }
#>
}
<#+
        PopIndent();
        region.End();
        this.WriteLine(string.Empty);
        region.Begin("Primitive Properties");
        PushIndent(CodeRegion.GetIndent(1));
        this.WriteLine(string.Empty);

        foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
        {
#>
protected <#=            code.Escape(edmProperty.TypeUsage)#> <#=            "_" + CapitalCase(code.Escape(edmProperty))#>;
/// <summary>
///Property Model
///<para> Gets or sets the <#=            code.Escape(edmProperty)#>.</para>
/// </summary>
<#=            Accessibility.ForProperty(edmProperty)#> <#=            code.Escape(edmProperty.TypeUsage)#> <#=            code.Escape(edmProperty)#>
{
    <#=            code.SpaceAfter(Accessibility.ForGetter(edmProperty))#>get { return this.<#=            "_" + CapitalCase(code.Escape(edmProperty))#>; }
    <#=            code.SpaceAfter(Accessibility.ForSetter(edmProperty))#>set
    {
        if (this.<#=            "_" + CapitalCase(code.Escape(edmProperty))#> != value)
        {
            this.IsDirty = true;
            this.<#=            "_" + CapitalCase(code.Escape(edmProperty))#> = value;
            RaisePropertyChanged(() => <#=            code.Escape(edmProperty)#>);
        }
    }
}
<#+            this.WriteLine(string.Empty);#>
<#+
        }
        PopIndent();
        region.End();
        this.WriteLine(string.Empty);
        if(DoesFileExist(entity.Name + "Model.cs"))
        {
            PopIndent();
            PopIndent();
            this.Write(customCode);
        }
        else
        {
            region.Begin("Custom Code");
            this.WriteLine(string.Empty);
            region.End();
        }
    }
#>

<#+
    void EndBodyClass()
    {
#>
}
<#+
    }
#>

<#+
    bool DoesFileExist(string filename)
    {			
        return File.Exists(Path.Combine(GetCurrentDirectory(),filename));
    }
    
    string GetCurrentDirectory()
    {
        string executingDirectoryName = "";
        string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
        if(String.IsNullOrEmpty(stackTraceFileName))
        {
            throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
                ", and we could not figure out the file name from the stack trace (most likely because of running " +
                "the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
        }
        else
        {		
            executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
        }	
        return executingDirectoryName;
    }
    
    string OutputCustomCode(string filename)
    {
        using (StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(), filename)))
        {
            string textCustomRegion = "#region Custom Code";
            string line = string.Empty;
            string contents = string.Empty;
            while ((line = sr.ReadLine()) != null)
            {
                if (line.Contains(textCustomRegion))
                    contents = line + Environment.NewLine + sr.ReadToEnd();
            }
            return contents;
        }
    }

    string CapitalCase(string property)
    {
        return property.ToLower()[0] + property.Substring(1);
    }
#>
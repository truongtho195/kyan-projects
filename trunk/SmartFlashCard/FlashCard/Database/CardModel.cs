//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using FlashCard.Models;

namespace FlashCard.Database
{
    /// <summary>
    /// Model for table Card 
    /// </summary>
    public partial class CardModel : ViewModelBase, IDataErrorInfo
    {
        #region Ctor

        // Default contructor
        public CardModel()
        {
            this.IsNew = true;
            this.Card = new Card();
        }

        // Default contructor that set entity to field
        public CardModel(Card card)
        {
            this.Card = card;
            ToModel();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public Card Card { get; private set; }

        protected bool _isNew;
        /// <summary>
        /// Property Base
        /// <para> Gets or sets the IsNew </para>
        /// </summary>
        public bool IsNew
        {
            get { return _isNew; }
            set
            {
                if (_isNew != value)
                {
                    _isNew = value;
                    RaisePropertyChanged(() => IsNew);
                }
            }
        }

        protected bool _isDirty;
        /// <summary>
        /// Property Base
        /// <para>Gets or sets the IsDirty</para>
        /// </summary>
        public bool IsDirty
        {
            get { return _isDirty; }
            set
            {
                if (_isDirty != value)
                {
                    _isDirty = value;
                    RaisePropertyChanged(() => IsDirty);
                }
            }
        }

        protected bool _isDeleted;
        /// <summary>
        /// Property Base
        ///<para>Gets or sets the IsDeleted</para>
        /// </summary>
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    RaisePropertyChanged(() => IsDeleted);
                }
            }
        }

        protected bool _isChecked;
        /// <summary>
        /// Property Base
        ///<para> Gets or sets the IsChecked</para>
        /// </summary>
        public bool IsChecked
        {
            get { return _isChecked; }
            set
            {
                if (_isChecked != value)
                {
                    _isChecked = value;
                    RaisePropertyChanged(() => IsChecked);
                }
            }
        }

        
        /// <summary>
        ///<para>Public Method</para>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        ///Public Method
        ///<para> Method for set PropertyModel to Entity</para>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.Card.CardID = this.CardID;
            this.Card.CardName = this.CardName.Trim();
            this.Card.Remark = this.Remark.Trim();
        }
        

        /// <summary>
        ///Public Method
        ///<para> Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModel()
        {
            this.CardID = this.Card.CardID;
            this.CardName = this.Card.CardName;
            this.Remark = this.Card.Remark;
        }

        #endregion

        #region Primitive Properties

        protected string _cardID;
        /// <summary>
        ///Property Model
        ///<para> Gets or sets the CardID.</para>
        /// </summary>
        public string CardID
        {
            get { return this._cardID; }
            set
            {
                if (this._cardID != value)
                {
                    this.IsDirty = true;
                    this._cardID = value;
                    RaisePropertyChanged(() => CardID);
                }
            }
        }

        protected string _cardName;
        /// <summary>
        ///Property Model
        ///<para> Gets or sets the CardName.</para>
        /// </summary>
        public string CardName
        {
            get { return this._cardName; }
            set
            {
                if (this._cardName != value)
                {
                    this.IsDirty = true;
                    this._cardName = value;
                    RaisePropertyChanged(() => CardName);
                }
            }
        }

        protected string _remark;
        /// <summary>
        ///Property Model
        ///<para> Gets or sets the Remark.</para>
        /// </summary>
        public string Remark
        {
            get { return this._remark; }
            set
            {
                if (this._remark != value)
                {
                    this.IsDirty = true;
                    this._remark = value;
                    RaisePropertyChanged(() => Remark);
                }
            }
        }


        #endregion

        #region Custom Code

        #region Properties

        private ObservableCollection<LessonModel> _lessonCollection;
        /// <summary>
        ///  <para>Exention Property in CardModel</para>
        /// Gets or sets the property value.
        /// </summary>
        public ObservableCollection<LessonModel> LessonCollection
        {
            get { return _lessonCollection; }
            set
            {
                if (_lessonCollection != value)
                {
                    _lessonCollection = value;
                    RaisePropertyChanged(() => LessonCollection);
                }
            }
        }


        private bool _isFile;
        /// <summary>
        ///Extention Property in CardModel
        ///<para> Gets or sets the property value.</para>
        /// </summary>
        public bool IsFile
        {
            get { return _isFile; }
            set
            {
                if (_isFile != value)
                {
                    _isFile = value;
                    RaisePropertyChanged(() => IsFile);
                }
            }
        }


        #region" CheckedAll"
        private bool? _checkedAll=true;
        /// <summary>
        /// Gets or sets the CheckedAll.
        /// </summary>
        public bool? CheckedAll
        {
            get { return _checkedAll; }
            set
            {
                if (_checkedAll != value)
                {
                    _checkedAll = value;
                    RaisePropertyChanged(() => CheckedAll);
                }
            }
        }
        #endregion

        #endregion

        #region DataErrorInfo
        public string Error
        {
            get { throw new NotImplementedException(); }
        }
        private Dictionary<string, string> _errors = new Dictionary<string, string>();
        public Dictionary<string, string> Errors
        {
            get
            {
                return _errors;
            }
            set
            {
                if (_errors != value)
                {
                    _errors = value;
                    RaisePropertyChanged(() => Errors);
                }
            }
        }
        public string this[string columnName]
        {
            get
            {
                string message = String.Empty;
                this.Errors.Remove(columnName);
                switch (columnName)
                {
                 
                    case "CardName":
                        if (string.IsNullOrWhiteSpace(CardName))
                            message = "Card Name is required!";
                        break;
                }
                if (!String.IsNullOrEmpty(message))
                {
                    this.Errors.Add(columnName, message);
                }
                return message;
            }
        }
        #endregion

        #endregion
    }
}

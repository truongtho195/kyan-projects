//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using CPC.POS.Database;
using CPC.Toolkit.Base;
using CPC.Helper;

namespace CPC.POS.Model
{
    /// <summary>
    /// Model for table base_Configuration
    /// </summary>
    [Serializable]
    public partial class base_ConfigurationModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public base_ConfigurationModel()
        {
            this.IsNew = true;
            this.base_Configuration = new base_Configuration();
        }

        // Default constructor that set entity to field
        public base_ConfigurationModel(base_Configuration base_configuration, bool isRaiseProperties = false)
        {
            this.base_Configuration = base_configuration;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public base_Configuration base_Configuration { get; private set; }

        #endregion

        #region Primitive Properties

        protected string _companyName;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the CompanyName</para>
        /// </summary>
        public string CompanyName
        {
            get { return this._companyName; }
            set
            {
                if (this._companyName != value)
                {
                    this.IsDirty = true;
                    this._companyName = value;
                    OnPropertyChanged(() => CompanyName);
                    PropertyChangedCompleted(() => CompanyName);
                }
            }
        }

        protected string _address;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Address</para>
        /// </summary>
        public string Address
        {
            get { return this._address; }
            set
            {
                if (this._address != value)
                {
                    this.IsDirty = true;
                    this._address = value;
                    OnPropertyChanged(() => Address);
                    PropertyChangedCompleted(() => Address);
                }
            }
        }

        protected string _city;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the City</para>
        /// </summary>
        public string City
        {
            get { return this._city; }
            set
            {
                if (this._city != value)
                {
                    this.IsDirty = true;
                    this._city = value;
                    OnPropertyChanged(() => City);
                    PropertyChangedCompleted(() => City);
                }
            }
        }

        protected Nullable<short> _state;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the State</para>
        /// </summary>
        public Nullable<short> State
        {
            get { return this._state; }
            set
            {
                if (this._state != value)
                {
                    this.IsDirty = true;
                    this._state = value;
                    OnPropertyChanged(() => State);
                    PropertyChangedCompleted(() => State);
                }
            }
        }

        protected string _zipCode;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the ZipCode</para>
        /// </summary>
        public string ZipCode
        {
            get { return this._zipCode; }
            set
            {
                if (this._zipCode != value)
                {
                    this.IsDirty = true;
                    this._zipCode = value;
                    OnPropertyChanged(() => ZipCode);
                    PropertyChangedCompleted(() => ZipCode);
                }
            }
        }

        protected Nullable<short> _countryId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the CountryId</para>
        /// </summary>
        public Nullable<short> CountryId
        {
            get { return this._countryId; }
            set
            {
                if (this._countryId != value)
                {
                    this.IsDirty = true;
                    this._countryId = value;
                    OnPropertyChanged(() => CountryId);
                    PropertyChangedCompleted(() => CountryId);
                }
            }
        }

        protected string _phone;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Phone</para>
        /// </summary>
        public string Phone
        {
            get { return this._phone; }
            set
            {
                if (this._phone != value)
                {
                    this.IsDirty = true;
                    this._phone = value;
                    OnPropertyChanged(() => Phone);
                    PropertyChangedCompleted(() => Phone);
                }
            }
        }

        protected string _fax;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Fax</para>
        /// </summary>
        public string Fax
        {
            get { return this._fax; }
            set
            {
                if (this._fax != value)
                {
                    this.IsDirty = true;
                    this._fax = value;
                    OnPropertyChanged(() => Fax);
                    PropertyChangedCompleted(() => Fax);
                }
            }
        }

        protected string _email;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Email</para>
        /// </summary>
        public string Email
        {
            get { return this._email; }
            set
            {
                if (this._email != value)
                {
                    this.IsDirty = true;
                    this._email = value;
                    OnPropertyChanged(() => Email);
                    PropertyChangedCompleted(() => Email);
                }
            }
        }

        protected string _website;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Website</para>
        /// </summary>
        public string Website
        {
            get { return this._website; }
            set
            {
                if (this._website != value)
                {
                    this.IsDirty = true;
                    this._website = value;
                    OnPropertyChanged(() => Website);
                    PropertyChangedCompleted(() => Website);
                }
            }
        }

        protected string _emailPop3Server;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the EmailPop3Server</para>
        /// </summary>
        public string EmailPop3Server
        {
            get { return this._emailPop3Server; }
            set
            {
                if (this._emailPop3Server != value)
                {
                    this.IsDirty = true;
                    this._emailPop3Server = value;
                    OnPropertyChanged(() => EmailPop3Server);
                    PropertyChangedCompleted(() => EmailPop3Server);
                }
            }
        }

        protected Nullable<int> _emailPop3Port;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the EmailPop3Port</para>
        /// </summary>
        public Nullable<int> EmailPop3Port
        {
            get { return this._emailPop3Port; }
            set
            {
                if (this._emailPop3Port != value)
                {
                    this.IsDirty = true;
                    this._emailPop3Port = value;
                    OnPropertyChanged(() => EmailPop3Port);
                    PropertyChangedCompleted(() => EmailPop3Port);
                }
            }
        }

        protected string _emailAccount;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the EmailAccount</para>
        /// </summary>
        public string EmailAccount
        {
            get { return this._emailAccount; }
            set
            {
                if (this._emailAccount != value)
                {
                    this.IsDirty = true;
                    this._emailAccount = value;
                    OnPropertyChanged(() => EmailAccount);
                    PropertyChangedCompleted(() => EmailAccount);
                }
            }
        }

        protected string _emailPassword;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the EmailPassword</para>
        /// </summary>
        public string EmailPassword
        {
            get { return this._emailPassword; }
            set
            {
                if (this._emailPassword != value)
                {
                    this.IsDirty = true;
                    this._emailPassword = value;
                    OnPropertyChanged(() => EmailPassword);
                    PropertyChangedCompleted(() => EmailPassword);
                }
            }
        }

        protected Nullable<bool> _isBarcodeScannerAttached;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsBarcodeScannerAttached</para>
        /// </summary>
        public Nullable<bool> IsBarcodeScannerAttached
        {
            get { return this._isBarcodeScannerAttached; }
            set
            {
                if (this._isBarcodeScannerAttached != value)
                {
                    this.IsDirty = true;
                    this._isBarcodeScannerAttached = value;
                    OnPropertyChanged(() => IsBarcodeScannerAttached);
                    PropertyChangedCompleted(() => IsBarcodeScannerAttached);
                }
            }
        }

        protected Nullable<bool> _isEnableTouchScreenLayout;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsEnableTouchScreenLayout</para>
        /// </summary>
        public Nullable<bool> IsEnableTouchScreenLayout
        {
            get { return this._isEnableTouchScreenLayout; }
            set
            {
                if (this._isEnableTouchScreenLayout != value)
                {
                    this.IsDirty = true;
                    this._isEnableTouchScreenLayout = value;
                    OnPropertyChanged(() => IsEnableTouchScreenLayout);
                    PropertyChangedCompleted(() => IsEnableTouchScreenLayout);
                }
            }
        }

        protected Nullable<bool> _isAllowTimeClockAttached;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsAllowTimeClockAttached</para>
        /// </summary>
        public Nullable<bool> IsAllowTimeClockAttached
        {
            get { return this._isAllowTimeClockAttached; }
            set
            {
                if (this._isAllowTimeClockAttached != value)
                {
                    this.IsDirty = true;
                    this._isAllowTimeClockAttached = value;
                    OnPropertyChanged(() => IsAllowTimeClockAttached);
                    PropertyChangedCompleted(() => IsAllowTimeClockAttached);
                }
            }
        }

        protected Nullable<bool> _isAllowCollectTipCreditCard;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsAllowCollectTipCreditCard</para>
        /// </summary>
        public Nullable<bool> IsAllowCollectTipCreditCard
        {
            get { return this._isAllowCollectTipCreditCard; }
            set
            {
                if (this._isAllowCollectTipCreditCard != value)
                {
                    this.IsDirty = true;
                    this._isAllowCollectTipCreditCard = value;
                    OnPropertyChanged(() => IsAllowCollectTipCreditCard);
                    PropertyChangedCompleted(() => IsAllowCollectTipCreditCard);
                }
            }
        }

        protected Nullable<bool> _isAllowMutilUOM;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsAllowMutilUOM</para>
        /// </summary>
        public Nullable<bool> IsAllowMutilUOM
        {
            get { return this._isAllowMutilUOM; }
            set
            {
                if (this._isAllowMutilUOM != value)
                {
                    this.IsDirty = true;
                    this._isAllowMutilUOM = value;
                    OnPropertyChanged(() => IsAllowMutilUOM);
                    PropertyChangedCompleted(() => IsAllowMutilUOM);
                }
            }
        }

        protected Nullable<int> _defaultMaximumSticky;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultMaximumSticky</para>
        /// </summary>
        public Nullable<int> DefaultMaximumSticky
        {
            get { return this._defaultMaximumSticky; }
            set
            {
                if (this._defaultMaximumSticky != value)
                {
                    this.IsDirty = true;
                    this._defaultMaximumSticky = value;
                    OnPropertyChanged(() => DefaultMaximumSticky);
                    PropertyChangedCompleted(() => DefaultMaximumSticky);
                }
            }
        }

        protected Nullable<short> _defaultPriceSchema;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultPriceSchema</para>
        /// </summary>
        public Nullable<short> DefaultPriceSchema
        {
            get { return this._defaultPriceSchema; }
            set
            {
                if (this._defaultPriceSchema != value)
                {
                    this.IsDirty = true;
                    this._defaultPriceSchema = value;
                    OnPropertyChanged(() => DefaultPriceSchema);
                    PropertyChangedCompleted(() => DefaultPriceSchema);
                }
            }
        }

        protected Nullable<short> _defaultPaymentMethod;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultPaymentMethod</para>
        /// </summary>
        public Nullable<short> DefaultPaymentMethod
        {
            get { return this._defaultPaymentMethod; }
            set
            {
                if (this._defaultPaymentMethod != value)
                {
                    this.IsDirty = true;
                    this._defaultPaymentMethod = value;
                    OnPropertyChanged(() => DefaultPaymentMethod);
                    PropertyChangedCompleted(() => DefaultPaymentMethod);
                }
            }
        }

        protected Nullable<short> _defaultSaleTaxLocation;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultSaleTaxLocation</para>
        /// </summary>
        public Nullable<short> DefaultSaleTaxLocation
        {
            get { return this._defaultSaleTaxLocation; }
            set
            {
                if (this._defaultSaleTaxLocation != value)
                {
                    this.IsDirty = true;
                    this._defaultSaleTaxLocation = value;
                    OnPropertyChanged(() => DefaultSaleTaxLocation);
                    PropertyChangedCompleted(() => DefaultSaleTaxLocation);
                }
            }
        }

        protected string _defaultTaxCodeNewDepartment;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultTaxCodeNewDepartment</para>
        /// </summary>
        public string DefaultTaxCodeNewDepartment
        {
            get { return this._defaultTaxCodeNewDepartment; }
            set
            {
                if (this._defaultTaxCodeNewDepartment != value)
                {
                    this.IsDirty = true;
                    this._defaultTaxCodeNewDepartment = value;
                    OnPropertyChanged(() => DefaultTaxCodeNewDepartment);
                    PropertyChangedCompleted(() => DefaultTaxCodeNewDepartment);
                }
            }
        }

        protected string _defautlImagePath;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefautlImagePath</para>
        /// </summary>
        public string DefautlImagePath
        {
            get { return this._defautlImagePath; }
            set
            {
                if (this._defautlImagePath != value)
                {
                    this.IsDirty = true;
                    this._defautlImagePath = value;
                    OnPropertyChanged(() => DefautlImagePath);
                    PropertyChangedCompleted(() => DefautlImagePath);
                }
            }
        }

        protected int _defautlDiscountScheduleTime;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefautlDiscountScheduleTime</para>
        /// </summary>
        public int DefautlDiscountScheduleTime
        {
            get { return this._defautlDiscountScheduleTime; }
            set
            {
                if (this._defautlDiscountScheduleTime != value)
                {
                    this.IsDirty = true;
                    this._defautlDiscountScheduleTime = value;
                    OnPropertyChanged(() => DefautlDiscountScheduleTime);
                    PropertyChangedCompleted(() => DefautlDiscountScheduleTime);
                }
            }
        }

        protected Nullable<System.DateTime> _dateCreated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DateCreated</para>
        /// </summary>
        public Nullable<System.DateTime> DateCreated
        {
            get { return this._dateCreated; }
            set
            {
                if (this._dateCreated != value)
                {
                    this.IsDirty = true;
                    this._dateCreated = value;
                    OnPropertyChanged(() => DateCreated);
                    PropertyChangedCompleted(() => DateCreated);
                }
            }
        }

        protected string _userCreated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the UserCreated</para>
        /// </summary>
        public string UserCreated
        {
            get { return this._userCreated; }
            set
            {
                if (this._userCreated != value)
                {
                    this.IsDirty = true;
                    this._userCreated = value;
                    OnPropertyChanged(() => UserCreated);
                    PropertyChangedCompleted(() => UserCreated);
                }
            }
        }

        protected Nullable<short> _totalStore;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the TotalStore</para>
        /// </summary>
        public Nullable<short> TotalStore
        {
            get { return this._totalStore; }
            set
            {
                if (this._totalStore != value)
                {
                    this.IsDirty = true;
                    this._totalStore = value;
                    OnPropertyChanged(() => TotalStore);
                    PropertyChangedCompleted(() => TotalStore);
                }
            }
        }

        protected Nullable<bool> _isRequirePromotionCode;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsRequirePromotionCode</para>
        /// </summary>
        public Nullable<bool> IsRequirePromotionCode
        {
            get { return this._isRequirePromotionCode; }
            set
            {
                if (this._isRequirePromotionCode != value)
                {
                    this.IsDirty = true;
                    this._isRequirePromotionCode = value;
                    OnPropertyChanged(() => IsRequirePromotionCode);
                    PropertyChangedCompleted(() => IsRequirePromotionCode);
                }
            }
        }

        protected short _defaultDiscountType;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultDiscountType</para>
        /// </summary>
        public short DefaultDiscountType
        {
            get { return this._defaultDiscountType; }
            set
            {
                if (this._defaultDiscountType != value)
                {
                    this.IsDirty = true;
                    this._defaultDiscountType = value;
                    OnPropertyChanged(() => DefaultDiscountType);
                    PropertyChangedCompleted(() => DefaultDiscountType);
                }
            }
        }

        protected short _defaultDiscountStatus;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultDiscountStatus</para>
        /// </summary>
        public short DefaultDiscountStatus
        {
            get { return this._defaultDiscountStatus; }
            set
            {
                if (this._defaultDiscountStatus != value)
                {
                    this.IsDirty = true;
                    this._defaultDiscountStatus = value;
                    OnPropertyChanged(() => DefaultDiscountStatus);
                    PropertyChangedCompleted(() => DefaultDiscountStatus);
                }
            }
        }

        protected Nullable<short> _loginAllow;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the LoginAllow</para>
        /// </summary>
        public Nullable<short> LoginAllow
        {
            get { return this._loginAllow; }
            set
            {
                if (this._loginAllow != value)
                {
                    this.IsDirty = true;
                    this._loginAllow = value;
                    OnPropertyChanged(() => LoginAllow);
                    PropertyChangedCompleted(() => LoginAllow);
                }
            }
        }

        protected byte[] _logo;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Logo</para>
        /// </summary>
        public byte[] Logo
        {
            get { return this._logo; }
            set
            {
                if (this._logo != value)
                {
                    this.IsDirty = true;
                    this._logo = value;
                    OnPropertyChanged(() => Logo);
                    PropertyChangedCompleted(() => Logo);
                }
            }
        }

        protected Nullable<short> _defaultScanMethod;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultScanMethod</para>
        /// </summary>
        public Nullable<short> DefaultScanMethod
        {
            get { return this._defaultScanMethod; }
            set
            {
                if (this._defaultScanMethod != value)
                {
                    this.IsDirty = true;
                    this._defaultScanMethod = value;
                    OnPropertyChanged(() => DefaultScanMethod);
                    PropertyChangedCompleted(() => DefaultScanMethod);
                }
            }
        }

        protected decimal _tipPercent;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the TipPercent</para>
        /// </summary>
        public decimal TipPercent
        {
            get { return this._tipPercent; }
            set
            {
                if (this._tipPercent != value)
                {
                    this.IsDirty = true;
                    this._tipPercent = value;
                    OnPropertyChanged(() => TipPercent);
                    PropertyChangedCompleted(() => TipPercent);
                }
            }
        }

        protected Nullable<int> _acceptedPaymentMethod;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the AcceptedPaymentMethod</para>
        /// </summary>
        public Nullable<int> AcceptedPaymentMethod
        {
            get { return this._acceptedPaymentMethod; }
            set
            {
                if (this._acceptedPaymentMethod != value)
                {
                    this.IsDirty = true;
                    this._acceptedPaymentMethod = value;
                    OnPropertyChanged(() => AcceptedPaymentMethod);
                    PropertyChangedCompleted(() => AcceptedPaymentMethod);
                }
            }
        }

        protected Nullable<int> _acceptedCardType;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the AcceptedCardType</para>
        /// </summary>
        public Nullable<int> AcceptedCardType
        {
            get { return this._acceptedCardType; }
            set
            {
                if (this._acceptedCardType != value)
                {
                    this.IsDirty = true;
                    this._acceptedCardType = value;
                    OnPropertyChanged(() => AcceptedCardType);
                    PropertyChangedCompleted(() => AcceptedCardType);
                }
            }
        }

        protected Nullable<bool> _isRequireDiscountReason;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsRequireDiscountReason</para>
        /// </summary>
        public Nullable<bool> IsRequireDiscountReason
        {
            get { return this._isRequireDiscountReason; }
            set
            {
                if (this._isRequireDiscountReason != value)
                {
                    this.IsDirty = true;
                    this._isRequireDiscountReason = value;
                    OnPropertyChanged(() => IsRequireDiscountReason);
                    PropertyChangedCompleted(() => IsRequireDiscountReason);
                }
            }
        }

        protected short _workHour;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the WorkHour</para>
        /// </summary>
        public short WorkHour
        {
            get { return this._workHour; }
            set
            {
                if (this._workHour != value)
                {
                    this.IsDirty = true;
                    this._workHour = value;
                    OnPropertyChanged(() => WorkHour);
                    PropertyChangedCompleted(() => WorkHour);
                }
            }
        }

        protected int _id;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Id</para>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected Nullable<short> _defaultShipUnit;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultShipUnit</para>
        /// </summary>
        public Nullable<short> DefaultShipUnit
        {
            get { return this._defaultShipUnit; }
            set
            {
                if (this._defaultShipUnit != value)
                {
                    this.IsDirty = true;
                    this._defaultShipUnit = value;
                    OnPropertyChanged(() => DefaultShipUnit);
                    PropertyChangedCompleted(() => DefaultShipUnit);
                }
            }
        }

        protected Nullable<bool> _defaultCashiedUserName;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultCashiedUserName</para>
        /// </summary>
        public Nullable<bool> DefaultCashiedUserName
        {
            get { return this._defaultCashiedUserName; }
            set
            {
                if (this._defaultCashiedUserName != value)
                {
                    this.IsDirty = true;
                    this._defaultCashiedUserName = value;
                    OnPropertyChanged(() => DefaultCashiedUserName);
                    PropertyChangedCompleted(() => DefaultCashiedUserName);
                }
            }
        }

        protected Nullable<short> _keepLog;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the KeepLog</para>
        /// </summary>
        public Nullable<short> KeepLog
        {
            get { return this._keepLog; }
            set
            {
                if (this._keepLog != value)
                {
                    this.IsDirty = true;
                    this._keepLog = value;
                    OnPropertyChanged(() => KeepLog);
                    PropertyChangedCompleted(() => KeepLog);
                }
            }
        }

        protected bool _isAllowShift;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsAllowShift</para>
        /// </summary>
        public bool IsAllowShift
        {
            get { return this._isAllowShift; }
            set
            {
                if (this._isAllowShift != value)
                {
                    this.IsDirty = true;
                    this._isAllowShift = value;
                    OnPropertyChanged(() => IsAllowShift);
                    PropertyChangedCompleted(() => IsAllowShift);
                }
            }
        }

        protected string _defaultLanguage;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DefaultLanguage</para>
        /// </summary>
        public string DefaultLanguage
        {
            get { return this._defaultLanguage; }
            set
            {
                if (this._defaultLanguage != value)
                {
                    this.IsDirty = true;
                    this._defaultLanguage = value;
                    OnPropertyChanged(() => DefaultLanguage);
                    PropertyChangedCompleted(() => DefaultLanguage);
                }
            }
        }

        protected Nullable<int> _timeOutMinute;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the TimeOutMinute</para>
        /// </summary>
        public Nullable<int> TimeOutMinute
        {
            get { return this._timeOutMinute; }
            set
            {
                if (this._timeOutMinute != value)
                {
                    this.IsDirty = true;
                    this._timeOutMinute = value;
                    OnPropertyChanged(() => TimeOutMinute);
                    PropertyChangedCompleted(() => TimeOutMinute);
                }
            }
        }

        protected Nullable<bool> _isAutoLogout;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsAutoLogout</para>
        /// </summary>
        public Nullable<bool> IsAutoLogout
        {
            get { return this._isAutoLogout; }
            set
            {
                if (this._isAutoLogout != value)
                {
                    this.IsDirty = true;
                    this._isAutoLogout = value;
                    OnPropertyChanged(() => IsAutoLogout);
                    PropertyChangedCompleted(() => IsAutoLogout);
                }
            }
        }

        protected Nullable<bool> _isBackupWhenExit;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsBackupWhenExit</para>
        /// </summary>
        public Nullable<bool> IsBackupWhenExit
        {
            get { return this._isBackupWhenExit; }
            set
            {
                if (this._isBackupWhenExit != value)
                {
                    this.IsDirty = true;
                    this._isBackupWhenExit = value;
                    OnPropertyChanged(() => IsBackupWhenExit);
                    PropertyChangedCompleted(() => IsBackupWhenExit);
                }
            }
        }

        protected Nullable<int> _backupEvery;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the BackupEvery</para>
        /// </summary>
        public Nullable<int> BackupEvery
        {
            get { return this._backupEvery; }
            set
            {
                if (this._backupEvery != value)
                {
                    this.IsDirty = true;
                    this._backupEvery = value;
                    OnPropertyChanged(() => BackupEvery);
                    PropertyChangedCompleted(() => BackupEvery);
                }
            }
        }

        protected string _backupPath;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the BackupPath</para>
        /// </summary>
        public string BackupPath
        {
            get { return this._backupPath; }
            set
            {
                if (this._backupPath != value)
                {
                    this.IsDirty = true;
                    this._backupPath = value;
                    OnPropertyChanged(() => BackupPath);
                    PropertyChangedCompleted(() => BackupPath);
                }
            }
        }

        protected Nullable<bool> _isAllowRGO;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsAllowRGO</para>
        /// </summary>
        public Nullable<bool> IsAllowRGO
        {
            get { return this._isAllowRGO; }
            set
            {
                if (this._isAllowRGO != value)
                {
                    this.IsDirty = true;
                    this._isAllowRGO = value;
                    OnPropertyChanged(() => IsAllowRGO);
                    PropertyChangedCompleted(() => IsAllowRGO);
                }
            }
        }

        protected Nullable<short> _passwordLength;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the PasswordLength</para>
        /// </summary>
        public Nullable<short> PasswordLength
        {
            get { return this._passwordLength; }
            set
            {
                if (this._passwordLength != value)
                {
                    this.IsDirty = true;
                    this._passwordLength = value;
                    OnPropertyChanged(() => PasswordLength);
                    PropertyChangedCompleted(() => PasswordLength);
                }
            }
        }

        protected Nullable<bool> _isAllowChangeOrder;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsAllowChangeOrder</para>
        /// </summary>
        public Nullable<bool> IsAllowChangeOrder
        {
            get { return this._isAllowChangeOrder; }
            set
            {
                if (this._isAllowChangeOrder != value)
                {
                    this.IsDirty = true;
                    this._isAllowChangeOrder = value;
                    OnPropertyChanged(() => IsAllowChangeOrder);
                    PropertyChangedCompleted(() => IsAllowChangeOrder);
                }
            }
        }

        protected Nullable<bool> _isAllowNegativeStore;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsAllowNegativeStore</para>
        /// </summary>
        public Nullable<bool> IsAllowNegativeStore
        {
            get { return this._isAllowNegativeStore; }
            set
            {
                if (this._isAllowNegativeStore != value)
                {
                    this.IsDirty = true;
                    this._isAllowNegativeStore = value;
                    OnPropertyChanged(() => IsAllowNegativeStore);
                    PropertyChangedCompleted(() => IsAllowNegativeStore);
                }
            }
        }

        protected int _acceptedGiftCardMethod;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the AcceptedGiftCardMethod</para>
        /// </summary>
        public int AcceptedGiftCardMethod
        {
            get { return this._acceptedGiftCardMethod; }
            set
            {
                if (this._acceptedGiftCardMethod != value)
                {
                    this.IsDirty = true;
                    this._acceptedGiftCardMethod = value;
                    OnPropertyChanged(() => AcceptedGiftCardMethod);
                    PropertyChangedCompleted(() => AcceptedGiftCardMethod);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <para>Public Method</para>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set PropertyModel to Entity</para>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.base_Configuration.Id = this.Id;
            this.base_Configuration.CompanyName = this.CompanyName;
            this.base_Configuration.Address = this.Address;
            this.base_Configuration.City = this.City;
            this.base_Configuration.State = this.State;
            this.base_Configuration.ZipCode = this.ZipCode;
            this.base_Configuration.CountryId = this.CountryId;
            this.base_Configuration.Phone = this.Phone;
            this.base_Configuration.Fax = this.Fax;
            this.base_Configuration.Email = this.Email;
            this.base_Configuration.Website = this.Website;
            this.base_Configuration.EmailPop3Server = this.EmailPop3Server;
            this.base_Configuration.EmailPop3Port = this.EmailPop3Port;
            this.base_Configuration.EmailAccount = this.EmailAccount;
            this.base_Configuration.EmailPassword = this.EmailPassword;
            this.base_Configuration.IsBarcodeScannerAttached = this.IsBarcodeScannerAttached;
            this.base_Configuration.IsEnableTouchScreenLayout = this.IsEnableTouchScreenLayout;
            this.base_Configuration.IsAllowTimeClockAttached = this.IsAllowTimeClockAttached;
            this.base_Configuration.IsAllowCollectTipCreditCard = this.IsAllowCollectTipCreditCard;
            this.base_Configuration.IsAllowMutilUOM = this.IsAllowMutilUOM;
            this.base_Configuration.DefaultMaximumSticky = this.DefaultMaximumSticky;
            this.base_Configuration.DefaultPriceSchema = this.DefaultPriceSchema;
            this.base_Configuration.DefaultPaymentMethod = this.DefaultPaymentMethod;
            this.base_Configuration.DefaultSaleTaxLocation = this.DefaultSaleTaxLocation;
            this.base_Configuration.DefaultTaxCodeNewDepartment = this.DefaultTaxCodeNewDepartment;
            this.base_Configuration.DefautlImagePath = this.DefautlImagePath;
            this.base_Configuration.DefautlDiscountScheduleTime = this.DefautlDiscountScheduleTime;
            this.base_Configuration.DateCreated = this.DateCreated;
            this.base_Configuration.UserCreated = this.UserCreated;
            this.base_Configuration.TotalStore = this.TotalStore;
            this.base_Configuration.IsRequirePromotionCode = this.IsRequirePromotionCode;
            this.base_Configuration.DefaultDiscountType = this.DefaultDiscountType;
            this.base_Configuration.DefaultDiscountStatus = this.DefaultDiscountStatus;
            this.base_Configuration.LoginAllow = this.LoginAllow;
            this.base_Configuration.Logo = this.Logo;
            this.base_Configuration.DefaultScanMethod = this.DefaultScanMethod;
            this.base_Configuration.TipPercent = this.TipPercent;
            this.base_Configuration.AcceptedPaymentMethod = this.AcceptedPaymentMethod;
            this.base_Configuration.AcceptedCardType = this.AcceptedCardType;
            this.base_Configuration.IsRequireDiscountReason = this.IsRequireDiscountReason;
            this.base_Configuration.WorkHour = this.WorkHour;
            this.base_Configuration.DefaultShipUnit = this.DefaultShipUnit;
            this.base_Configuration.DefaultCashiedUserName = this.DefaultCashiedUserName;
            this.base_Configuration.KeepLog = this.KeepLog;
            this.base_Configuration.IsAllowShift = this.IsAllowShift;
            this.base_Configuration.DefaultLanguage = this.DefaultLanguage;
            this.base_Configuration.TimeOutMinute = this.TimeOutMinute;
            this.base_Configuration.IsAutoLogout = this.IsAutoLogout;
            this.base_Configuration.IsBackupWhenExit = this.IsBackupWhenExit;
            this.base_Configuration.BackupEvery = this.BackupEvery;
            this.base_Configuration.BackupPath = this.BackupPath;
            this.base_Configuration.IsAllowRGO = this.IsAllowRGO;
            this.base_Configuration.PasswordLength = this.PasswordLength;
            this.base_Configuration.IsAllowChangeOrder = this.IsAllowChangeOrder;
            this.base_Configuration.IsAllowNegativeStore = this.IsAllowNegativeStore;
            this.base_Configuration.AcceptedGiftCardMethod = this.AcceptedGiftCardMethod;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModel()
        {
            this._companyName = this.base_Configuration.CompanyName;
            this._address = this.base_Configuration.Address;
            this._city = this.base_Configuration.City;
            this._state = this.base_Configuration.State;
            this._zipCode = this.base_Configuration.ZipCode;
            this._countryId = this.base_Configuration.CountryId;
            this._phone = this.base_Configuration.Phone;
            this._fax = this.base_Configuration.Fax;
            this._email = this.base_Configuration.Email;
            this._website = this.base_Configuration.Website;
            this._emailPop3Server = this.base_Configuration.EmailPop3Server;
            this._emailPop3Port = this.base_Configuration.EmailPop3Port;
            this._emailAccount = this.base_Configuration.EmailAccount;
            this._emailPassword = this.base_Configuration.EmailPassword;
            this._isBarcodeScannerAttached = this.base_Configuration.IsBarcodeScannerAttached;
            this._isEnableTouchScreenLayout = this.base_Configuration.IsEnableTouchScreenLayout;
            this._isAllowTimeClockAttached = this.base_Configuration.IsAllowTimeClockAttached;
            this._isAllowCollectTipCreditCard = this.base_Configuration.IsAllowCollectTipCreditCard;
            this._isAllowMutilUOM = this.base_Configuration.IsAllowMutilUOM;
            this._defaultMaximumSticky = this.base_Configuration.DefaultMaximumSticky;
            this._defaultPriceSchema = this.base_Configuration.DefaultPriceSchema;
            this._defaultPaymentMethod = this.base_Configuration.DefaultPaymentMethod;
            this._defaultSaleTaxLocation = this.base_Configuration.DefaultSaleTaxLocation;
            this._defaultTaxCodeNewDepartment = this.base_Configuration.DefaultTaxCodeNewDepartment;
            this._defautlImagePath = this.base_Configuration.DefautlImagePath;
            this._defautlDiscountScheduleTime = this.base_Configuration.DefautlDiscountScheduleTime;
            this._dateCreated = this.base_Configuration.DateCreated;
            this._userCreated = this.base_Configuration.UserCreated;
            this._totalStore = this.base_Configuration.TotalStore;
            this._isRequirePromotionCode = this.base_Configuration.IsRequirePromotionCode;
            this._defaultDiscountType = this.base_Configuration.DefaultDiscountType;
            this._defaultDiscountStatus = this.base_Configuration.DefaultDiscountStatus;
            this._loginAllow = this.base_Configuration.LoginAllow;
            this._logo = this.base_Configuration.Logo;
            this._defaultScanMethod = this.base_Configuration.DefaultScanMethod;
            this._tipPercent = this.base_Configuration.TipPercent;
            this._acceptedPaymentMethod = this.base_Configuration.AcceptedPaymentMethod;
            this._acceptedCardType = this.base_Configuration.AcceptedCardType;
            this._isRequireDiscountReason = this.base_Configuration.IsRequireDiscountReason;
            this._workHour = this.base_Configuration.WorkHour;
            this._id = this.base_Configuration.Id;
            this._defaultShipUnit = this.base_Configuration.DefaultShipUnit;
            this._defaultCashiedUserName = this.base_Configuration.DefaultCashiedUserName;
            this._keepLog = this.base_Configuration.KeepLog;
            this._isAllowShift = this.base_Configuration.IsAllowShift;
            this._defaultLanguage = this.base_Configuration.DefaultLanguage;
            this._timeOutMinute = this.base_Configuration.TimeOutMinute;
            this._isAutoLogout = this.base_Configuration.IsAutoLogout;
            this._isBackupWhenExit = this.base_Configuration.IsBackupWhenExit;
            this._backupEvery = this.base_Configuration.BackupEvery;
            this._backupPath = this.base_Configuration.BackupPath;
            this._isAllowRGO = this.base_Configuration.IsAllowRGO;
            this._passwordLength = this.base_Configuration.PasswordLength;
            this._isAllowChangeOrder = this.base_Configuration.IsAllowChangeOrder;
            this._isAllowNegativeStore = this.base_Configuration.IsAllowNegativeStore;
            this._acceptedGiftCardMethod = this.base_Configuration.AcceptedGiftCardMethod;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModelAndRaise()
        {
            this.CompanyName = this.base_Configuration.CompanyName;
            this.Address = this.base_Configuration.Address;
            this.City = this.base_Configuration.City;
            this.State = this.base_Configuration.State;
            this.ZipCode = this.base_Configuration.ZipCode;
            this.CountryId = this.base_Configuration.CountryId;
            this.Phone = this.base_Configuration.Phone;
            this.Fax = this.base_Configuration.Fax;
            this.Email = this.base_Configuration.Email;
            this.Website = this.base_Configuration.Website;
            this.EmailPop3Server = this.base_Configuration.EmailPop3Server;
            this.EmailPop3Port = this.base_Configuration.EmailPop3Port;
            this.EmailAccount = this.base_Configuration.EmailAccount;
            this.EmailPassword = this.base_Configuration.EmailPassword;
            this.IsBarcodeScannerAttached = this.base_Configuration.IsBarcodeScannerAttached;
            this.IsEnableTouchScreenLayout = this.base_Configuration.IsEnableTouchScreenLayout;
            this.IsAllowTimeClockAttached = this.base_Configuration.IsAllowTimeClockAttached;
            this.IsAllowCollectTipCreditCard = this.base_Configuration.IsAllowCollectTipCreditCard;
            this.IsAllowMutilUOM = this.base_Configuration.IsAllowMutilUOM;
            this.DefaultMaximumSticky = this.base_Configuration.DefaultMaximumSticky;
            this.DefaultPriceSchema = this.base_Configuration.DefaultPriceSchema;
            this.DefaultPaymentMethod = this.base_Configuration.DefaultPaymentMethod;
            this.DefaultSaleTaxLocation = this.base_Configuration.DefaultSaleTaxLocation;
            this.DefaultTaxCodeNewDepartment = this.base_Configuration.DefaultTaxCodeNewDepartment;
            this.DefautlImagePath = this.base_Configuration.DefautlImagePath;
            this.DefautlDiscountScheduleTime = this.base_Configuration.DefautlDiscountScheduleTime;
            this.DateCreated = this.base_Configuration.DateCreated;
            this.UserCreated = this.base_Configuration.UserCreated;
            this.TotalStore = this.base_Configuration.TotalStore;
            this.IsRequirePromotionCode = this.base_Configuration.IsRequirePromotionCode;
            this.DefaultDiscountType = this.base_Configuration.DefaultDiscountType;
            this.DefaultDiscountStatus = this.base_Configuration.DefaultDiscountStatus;
            this.LoginAllow = this.base_Configuration.LoginAllow;
            this.Logo = this.base_Configuration.Logo;
            this.DefaultScanMethod = this.base_Configuration.DefaultScanMethod;
            this.TipPercent = this.base_Configuration.TipPercent;
            this.AcceptedPaymentMethod = this.base_Configuration.AcceptedPaymentMethod;
            this.AcceptedCardType = this.base_Configuration.AcceptedCardType;
            this.IsRequireDiscountReason = this.base_Configuration.IsRequireDiscountReason;
            this.WorkHour = this.base_Configuration.WorkHour;
            this.Id = this.base_Configuration.Id;
            this.DefaultShipUnit = this.base_Configuration.DefaultShipUnit;
            this.DefaultCashiedUserName = this.base_Configuration.DefaultCashiedUserName;
            this.KeepLog = this.base_Configuration.KeepLog;
            this.IsAllowShift = this.base_Configuration.IsAllowShift;
            this.DefaultLanguage = this.base_Configuration.DefaultLanguage;
            this.TimeOutMinute = this.base_Configuration.TimeOutMinute;
            this.IsAutoLogout = this.base_Configuration.IsAutoLogout;
            this.IsBackupWhenExit = this.base_Configuration.IsBackupWhenExit;
            this.BackupEvery = this.base_Configuration.BackupEvery;
            this.BackupPath = this.base_Configuration.BackupPath;
            this.IsAllowRGO = this.base_Configuration.IsAllowRGO;
            this.PasswordLength = this.base_Configuration.PasswordLength;
            this.IsAllowChangeOrder = this.base_Configuration.IsAllowChangeOrder;
            this.IsAllowNegativeStore = this.base_Configuration.IsAllowNegativeStore;
            this.AcceptedGiftCardMethod = this.base_Configuration.AcceptedGiftCardMethod;
        }

        #endregion

        #region Custom Code

        #region Fields

        /// <summary>
        /// Length of Zipcode (5).
        /// </summary>
        private readonly short _outZipCodeLength1 = 5;

        /// <summary>
        /// Length of Zipcode (9).
        /// </summary>
        private readonly short _outZipCodeLength2 = 9;

        /// <summary>
        /// Not select in ComboBox.
        /// </summary>
        private readonly short _notSelect = 0;

        #endregion

        #region Properties

        #region IsStoreInfoDirty

        private bool _isStoreInfoDirty;
        /// <summary>
        /// Gets or sets value whether company information is dirty.
        /// </summary>
        public bool IsStoreInfoDirty
        {
            get
            {
                return _isStoreInfoDirty;
            }
            set
            {
                if (_isStoreInfoDirty != value)
                {
                    _isStoreInfoDirty = value;
                    OnPropertyChanged(() => IsStoreInfoDirty);
                }
            }
        }

        #endregion

        #region IsUnitOfMeasureDirty

        private bool _isUnitOfMeasureDirty;
        /// <summary>
        /// Gets or sets value whether unit information is dirty.
        /// </summary>
        public bool IsUnitOfMeasureDirty
        {
            get
            {
                return _isUnitOfMeasureDirty;
            }
            set
            {
                if (_isUnitOfMeasureDirty != value)
                {
                    _isUnitOfMeasureDirty = value;
                    OnPropertyChanged(() => IsUnitOfMeasureDirty);
                }
            }
        }

        #endregion

        #region IsPricingDirty

        private bool _isPricingDirty;
        /// <summary>
        /// Gets or sets value whether pricing information is dirty.
        /// </summary>
        public bool IsPricingDirty
        {
            get
            {
                return _isPricingDirty;
            }
            set
            {
                if (_isPricingDirty != value)
                {
                    _isPricingDirty = value;
                    OnPropertyChanged(() => IsPricingDirty);
                }
            }
        }

        #endregion

        #region IsSalesDirty

        private bool _isSalesDirty;
        /// <summary>
        /// Gets or sets value whether sales information is dirty.
        /// </summary>
        public bool IsSalesDirty
        {
            get
            {
                return _isSalesDirty;
            }
            set
            {
                if (_isSalesDirty != value)
                {
                    _isSalesDirty = value;
                    OnPropertyChanged(() => IsSalesDirty);
                }
            }
        }

        #endregion

        #region IsEmailSetupDirty

        private bool _isEmailSetupDirty;
        /// <summary>
        /// Gets or sets value whether email setup is dirty.
        /// </summary>
        public bool IsEmailSetupDirty
        {
            get
            {
                return _isEmailSetupDirty;
            }
            set
            {
                if (_isEmailSetupDirty != value)
                {
                    _isEmailSetupDirty = value;
                    OnPropertyChanged(() => IsEmailSetupDirty);
                }
            }
        }

        #endregion

        #region HasError

        /// <summary>
        /// Gets value indicate that this object has error or not.
        /// </summary>
        public bool HasError
        {
            get
            {
                return !string.IsNullOrWhiteSpace(Error);
            }
        }

        #endregion

        #region HasState

        /// <summary>
        /// Gets value indicate that this object has state or not.
        /// </summary>
        public bool HasState
        {
            get
            {
                CountryItem item = Common.Countries.FirstOrDefault(x => x.Value == _countryId);
                return item == null ? false : item.HasState;
            }
        }

        #endregion

        #region RetypeEmailPassword

        private string _retypeEmailPassword;
        /// <summary>
        /// Gets or sets RetypePassword.
        /// </summary>
        public string RetypeEmailPassword
        {
            get
            {
                return _retypeEmailPassword;
            }
            set
            {
                if (_retypeEmailPassword != value)
                {
                    _isDirty = true;
                    _retypeEmailPassword = value;
                    OnPropertyChanged(() => RetypeEmailPassword);
                    PropertyChangedCompleted(() => RetypeEmailPassword);
                }
            }
        }

        #endregion

        #region SettingParts

        private SettingParts _settingParts;
        /// <summary>
        /// Gets or sets item's SettingParts.
        /// </summary>
        public SettingParts SettingParts
        {
            get
            {
                return _settingParts;
            }
            set
            {
                if (_settingParts != value)
                {
                    _settingParts = value;
                    OnPropertyChanged(() => SettingParts);
                    PropertyChangedCompleted(() => SettingParts);
                }
            }
        }

        #endregion

        #endregion

        #region Methods

        #region ShallowClone

        /// <summary>
        /// Creates a shallow copy of this object.
        /// </summary>
        /// <returns>A shallow copy of this object.</returns>
        public base_ConfigurationModel ShallowClone()
        {
            return (base_ConfigurationModel)this.MemberwiseClone();
        }

        #endregion

        #region Restore

        /// <summary>
        /// Restore this object.
        /// </summary>
        public void Restore()
        {
            ToModelAndRaise();

            if (!_countryId.HasValue)
            {
                CountryId = 0;
            }
            if (!_state.HasValue)
            {
                State = 0;
            }
            if (base_Configuration != null && !string.IsNullOrWhiteSpace(base_Configuration.EmailPassword))
            {
                EmailPassword = Define.PasswordTemp;
                RetypeEmailPassword = Define.PasswordTemp;
            }
            else
            {
                EmailPassword = null;
                RetypeEmailPassword = null;
            }

            IsDirty = false;
            IsStoreInfoDirty = false;
            IsUnitOfMeasureDirty = false;
            IsPricingDirty = false;
            IsSalesDirty = false;
            IsEmailSetupDirty = false;
        }

        #endregion

        #region RaiseDefaultPaymentMethodChanged

        /// <summary>
        /// Raise DefaultPaymentMethod property changed.
        /// </summary>
        public void RaiseDefaultPaymentMethodChanged()
        {
            OnPropertyChanged(() => DefaultPaymentMethod);
        }

        #endregion

        #endregion

        #region Override Methods

        #region PropertyChangedCompleted

        protected override void PropertyChangedCompleted(string propertyName)
        {
            switch (propertyName)
            {
                #region CompanyName...

                case "CompanyName":
                case "Address":
                case "City":
                case "State":
                case "ZipCode":
                case "Fax":
                case "Phone":
                case "Email":
                case "Website":
                case "Logo":

                    IsStoreInfoDirty = true;

                    break;

                #endregion

                #region IsAllowMutilUOM

                case "IsAllowMutilUOM":

                    IsUnitOfMeasureDirty = true;

                    break;


                #endregion

                #region CountryId

                case "CountryId":

                    IsStoreInfoDirty = true;

                    // Validates again.
                    OnPropertyChanged(() => State);
                    OnPropertyChanged(() => ZipCode);

                    break;

                #endregion

                #region DefaultPriceSchema

                case "DefaultPriceSchema":

                    IsPricingDirty = true;

                    break;

                #endregion

                #region AcceptedPaymentMethod

                case "AcceptedPaymentMethod":

                    IsSalesDirty = true;

                    break;

                #endregion

                #region AcceptedCardType

                case "AcceptedCardType":

                    IsSalesDirty = true;

                    break;

                #endregion

                #region DefaultPaymentMethod

                case "DefaultPaymentMethod":

                    IsSalesDirty = true;

                    break;

                #endregion

                #region IsAllowCollectTipCreditCard

                case "IsAllowCollectTipCreditCard":

                    if (_isAllowCollectTipCreditCard == false)
                    {
                        TipPercent = 0;
                    }

                    IsSalesDirty = true;

                    break;

                #endregion

                #region TipPercent

                case "TipPercent":

                    IsSalesDirty = true;

                    break;

                #endregion

                #region IsRequireDiscountReason

                case "IsRequireDiscountReason":

                    IsSalesDirty = true;

                    break;

                #endregion

                #region AcceptedGiftCardMethod

                case "AcceptedGiftCardMethod":

                    IsSalesDirty = true;

                    break;

                #endregion

                #region EmailPop3Server

                case "EmailPop3Server":

                    IsEmailSetupDirty = true;

                    break;

                #endregion

                #region EmailPop3Port

                case "EmailPop3Port":

                    IsEmailSetupDirty = true;

                    break;

                #endregion

                #region EmailAccount

                case "EmailAccount":

                    IsEmailSetupDirty = true;

                    break;

                #endregion

                #region EmailPassword

                case "EmailPassword":

                    IsEmailSetupDirty = true;

                    // Validates again.
                    OnPropertyChanged(() => RetypeEmailPassword);

                    break;

                #endregion

                #region RetypeEmailPassword

                case "RetypeEmailPassword":

                    IsEmailSetupDirty = true;

                    // Validates again.
                    OnPropertyChanged(() => EmailPassword);

                    break;

                #endregion

                #region SettingParts

                case "SettingParts":

                    // Validates again on StoreInfo.
                    OnPropertyChanged(() => CompanyName);
                    OnPropertyChanged(() => Address);
                    OnPropertyChanged(() => CountryId);
                    OnPropertyChanged(() => City);
                    OnPropertyChanged(() => State);
                    OnPropertyChanged(() => ZipCode);
                    OnPropertyChanged(() => Fax);
                    OnPropertyChanged(() => Phone);
                    OnPropertyChanged(() => Email);

                    // Validates again on Email.
                    OnPropertyChanged(() => EmailAccount);
                    OnPropertyChanged(() => EmailPassword);
                    OnPropertyChanged(() => RetypeEmailPassword);

                    break;

                #endregion
            }
        }

        #endregion

        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get
            {
                List<string> errors = new List<string>();
                PropertyDescriptorCollection props = TypeDescriptor.GetProperties(this);
                foreach (PropertyDescriptor prop in props)
                {
                    string msg = this[prop.Name];
                    if (!string.IsNullOrWhiteSpace(msg))
                    {
                        errors.Add(msg);
                    }
                }

                return string.Join(Environment.NewLine, errors);
            }
        }

        public string this[string columnName]
        {
            get
            {
                string message = null;

                switch (_settingParts)
                {
                    case SettingParts.General:
                        break;

                    #region StoreInfo

                    case SettingParts.StoreInfo:

                        switch (columnName)
                        {
                            case "CompanyName":

                                if (string.IsNullOrEmpty(_companyName))
                                {
                                    message = "Company's name is required.";
                                }

                                break;

                            case "Address":

                                if (string.IsNullOrEmpty(_address))
                                {
                                    message = "Address is required.";
                                }

                                break;

                            case "CountryId":

                                if (_countryId == _notSelect)
                                {
                                    message = "Required select country.";
                                }

                                break;

                            case "City":

                                if (string.IsNullOrEmpty(_city))
                                {
                                    message = "City is required.";
                                }

                                break;

                            case "State":

                                if (HasState && _state == _notSelect)
                                {
                                    message = "State select country.";
                                }

                                break;

                            case "ZipCode":

                                if (HasState && (string.IsNullOrEmpty(_zipCode) || (_zipCode.Length > _outZipCodeLength1 && _zipCode.Length < _outZipCodeLength2)))
                                {
                                    message = "Zip is wrong format.";
                                }

                                break;

                            case "Fax":

                                if (string.IsNullOrEmpty(_fax))
                                {
                                    message = "Fax is wrong format.";
                                }

                                break;

                            case "Phone":

                                if (string.IsNullOrEmpty(_phone))
                                {
                                    message = "Phone is wrong format.";
                                }

                                break;

                            case "Email":

                                if (string.IsNullOrEmpty(_email))
                                {
                                    message = "Email is wrong format.";
                                }

                                break;
                        }

                        break;

                    #endregion

                    case SettingParts.Inventory:
                        break;

                    case SettingParts.UnitOfMeasure:
                        break;

                    #region Email

                    case SettingParts.Email:

                        switch (columnName)
                        {
                            case "EmailAccount":

                                if (string.IsNullOrEmpty(_emailAccount))
                                {
                                    message = "Email is wrong format.";
                                }

                                break;

                            case "EmailPassword":
                            case "RetypeEmailPassword":

                                if (string.Compare(_emailPassword, _retypeEmailPassword, false) != 0)
                                {
                                    message = "Inexact password";
                                }

                                break;
                        }

                        break;

                    #endregion
                }


                return message;
            }
        }

        #endregion

        #endregion
    }
}

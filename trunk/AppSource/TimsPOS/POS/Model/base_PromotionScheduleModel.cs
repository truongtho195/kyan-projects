//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using CPC.POS.Database;
using CPC.Toolkit.Base;

namespace CPC.POS.Model
{
    /// <summary>
    /// Model for table base_PromotionSchedule
    /// </summary>
    [Serializable]
    public partial class base_PromotionScheduleModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public base_PromotionScheduleModel()
        {
            this.IsNew = true;
            this.base_PromotionSchedule = new base_PromotionSchedule();
        }

        // Default constructor that set entity to field
        public base_PromotionScheduleModel(base_PromotionSchedule base_promotionschedule, bool isRaiseProperties = false)
        {
            this.base_PromotionSchedule = base_promotionschedule;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public base_PromotionSchedule base_PromotionSchedule { get; private set; }

        #endregion

        #region Primitive Properties

        protected int _id;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Id</para>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected int _promotionId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the PromotionId</para>
        /// </summary>
        public int PromotionId
        {
            get { return this._promotionId; }
            set
            {
                if (this._promotionId != value)
                {
                    this.IsDirty = true;
                    this._promotionId = value;
                    OnPropertyChanged(() => PromotionId);
                    PropertyChangedCompleted(() => PromotionId);
                }
            }
        }

        protected Nullable<System.DateTime> _endDate;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the EndDate</para>
        /// </summary>
        public Nullable<System.DateTime> EndDate
        {
            get { return this._endDate; }
            set
            {
                if (this._endDate != value)
                {
                    this.IsDirty = true;
                    this._endDate = value;
                    OnPropertyChanged(() => EndDate);
                    PropertyChangedCompleted(() => EndDate);
                }
            }
        }

        protected Nullable<System.DateTime> _startDate;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the StartDate</para>
        /// </summary>
        public Nullable<System.DateTime> StartDate
        {
            get { return this._startDate; }
            set
            {
                if (this._startDate != value)
                {
                    this.IsDirty = true;
                    this._startDate = value;
                    OnPropertyChanged(() => StartDate);
                    PropertyChangedCompleted(() => StartDate);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <para>Public Method</para>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set PropertyModel to Entity</para>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.base_PromotionSchedule.Id = this.Id;
            this.base_PromotionSchedule.PromotionId = this.PromotionId;
            this.base_PromotionSchedule.EndDate = this.EndDate;
            this.base_PromotionSchedule.StartDate = this.StartDate;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModel()
        {
            this._id = this.base_PromotionSchedule.Id;
            this._promotionId = this.base_PromotionSchedule.PromotionId;
            this._endDate = this.base_PromotionSchedule.EndDate;
            this._startDate = this.base_PromotionSchedule.StartDate;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.base_PromotionSchedule.Id;
            this.PromotionId = this.base_PromotionSchedule.PromotionId;
            this.EndDate = this.base_PromotionSchedule.EndDate;
            this.StartDate = this.base_PromotionSchedule.StartDate;
        }

        #endregion

        #region Custom Code

        #region Properties

        private bool _expirationNoEndDate;
        /// <summary>
        /// Gets or sets the ExpirationNoEndDate.
        /// </summary>
        public bool ExpirationNoEndDate
        {
            get { return _expirationNoEndDate; }
            set
            {
                if (_expirationNoEndDate != value)
                {
                    this.IsDirty = true;
                    _expirationNoEndDate = value;
                    OnPropertyChanged(() => ExpirationNoEndDate);
                    if (this.ExpirationNoEndDate)
                    {
                        // StartDate or EndDate have no value, set default value
                        this.StartDate = DateTimeExt.Today;
                        this.EndDate = DateTimeExt.Today;
                        if (this.IsNew)
                            this.EndDate = DateTimeExt.Today.AddHours(Define.CONFIGURATION.DefautlDiscountScheduleTime);
                    }
                    else
                    {
                        this.StartDate = null;
                        this.EndDate = null;
                    }
                }
            }
        }

        #endregion

        #region Methods

        public void SetExpirationNoEndDate(bool value)
        {
            _expirationNoEndDate = value;
            OnPropertyChanged(() => ExpirationNoEndDate);
        }

        protected override void PropertyChangedCompleted(string propertyName)
        {
            switch (propertyName)
            {
                case "StartDate":
                //OnPropertyChanged(() => EndDate);
                //break;
                case "EndDate":
                    //OnPropertyChanged(() => StartDate);
                    OnPropertyChanged(() => ExpirationNoEndDate);
                    break;
                //case "ExpirationNoEndDate":
                //OnPropertyChanged(() => StartDate);
                //OnPropertyChanged(() => EndDate);
                //break;
            }
        }

        #endregion

        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;

                if (ExpirationNoEndDate && IsDirty)
                {
                    switch (columnName)
                    {
                        //case "StartDate":
                        //    if (!StartDate.HasValue)
                        //        message = "StartDate is required";
                        //    else if (EndDate.HasValue)
                        //    {
                        //        if (StartDate.Value > EndDate.Value)
                        //            message = "EndDate must be greater than StartDate";
                        //        else if (EndDate.Value.Subtract(StartDate.Value).TotalMinutes < Define.CONFIGURATION.DefautlDiscountScheduleTime * 60)
                        //            message = "EndDate must be greater than StartDate 12 hours";
                        //    }
                        //    break;
                        //case "EndDate":
                        //    if (!EndDate.HasValue)
                        //        message = "EndDate is required";
                        //    else if (EndDate.Value < DateTimeExt.Now)
                        //        message = "EndDate must be greater than Today";
                        //    else if (StartDate.HasValue)
                        //    {
                        //        if (StartDate.Value > EndDate.Value)
                        //            message = "EndDate must be greater than StartDate";
                        //        else if (EndDate.Value.Subtract(StartDate.Value).TotalMinutes < Define.CONFIGURATION.DefautlDiscountScheduleTime * 60)
                        //            message = "EndDate must be greater than StartDate 12 hours";
                        //    }
                        //    break;
                        case "ExpirationNoEndDate":
                            if (!StartDate.HasValue || !EndDate.HasValue)
                                message = "StartDate and EndDate is required";
                            else if (StartDate.Value > EndDate.Value)
                                message = "EndDate must be greater than StartDate";
                            else if (EndDate.Value.Subtract(StartDate.Value).TotalMinutes < Define.CONFIGURATION.DefautlDiscountScheduleTime * 60)
                                message = "EndDate must be greater than StartDate 12 hours";
                            else if (EndDate.Value < DateTimeExt.Now)
                                message = "EndDate must be greater than Today";
                            break;
                    }
                }

                if (!string.IsNullOrWhiteSpace(message))
                    return message;
                return null;
            }
        }

        #endregion
    }
}

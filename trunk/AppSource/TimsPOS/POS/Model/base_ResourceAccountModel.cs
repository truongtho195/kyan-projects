//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using CPC.POS.Database;
using CPC.Toolkit.Base;
using System.Windows;

namespace CPC.POS.Model
{
    /// <summary>
    /// Model for table base_ResourceAccount
    /// </summary>
    [Serializable]
    public partial class base_ResourceAccountModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public base_ResourceAccountModel()
        {
            this.IsNew = true;
            this.base_ResourceAccount = new base_ResourceAccount();
        }

        // Default constructor that set entity to field
        public base_ResourceAccountModel(base_ResourceAccount base_resourceaccount, bool isRaiseProperties = false)
        {
            this.base_ResourceAccount = base_resourceaccount;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public base_ResourceAccount base_ResourceAccount { get; private set; }

        #endregion

        #region Primitive Properties

        protected long _id;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Id</para>
        /// </summary>
        public long Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected System.Guid _resource;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Resource</para>
        /// </summary>
        public System.Guid Resource
        {
            get { return this._resource; }
            set
            {
                if (this._resource != value)
                {
                    this.IsDirty = true;
                    this._resource = value;
                    OnPropertyChanged(() => Resource);
                    PropertyChangedCompleted(() => Resource);
                }
            }
        }

        protected string _userResource;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the UserResource</para>
        /// </summary>
        public string UserResource
        {
            get { return this._userResource; }
            set
            {
                if (this._userResource != value)
                {
                    this.IsDirty = true;
                    this._userResource = value;
                    OnPropertyChanged(() => UserResource);
                    PropertyChangedCompleted(() => UserResource);
                }
            }
        }

        protected string _loginName;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the LoginName</para>
        /// </summary>
        public string LoginName
        {
            get { return this._loginName; }
            set
            {
                if (this._loginName != value)
                {
                    this.IsDirty = true;
                    this._loginName = value;
                    OnPropertyChanged(() => LoginName);
                    PropertyChangedCompleted(() => LoginName);
                }
            }
        }

        protected string _password;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Password</para>
        /// </summary>
        public string Password
        {
            get { return this._password; }
            set
            {
                if (this._password != value)
                {
                    this.IsDirty = true;
                    this._password = value;
                    OnPropertyChanged(() => Password);
                    PropertyChangedCompleted(() => Password);
                }
            }
        }

        protected Nullable<System.DateTime> _expiredDate;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the ExpiredDate</para>
        /// </summary>
        public Nullable<System.DateTime> ExpiredDate
        {
            get { return this._expiredDate; }
            set
            {
                if (this._expiredDate != value)
                {
                    this.IsDirty = true;
                    this._expiredDate = value;
                    OnPropertyChanged(() => ExpiredDate);
                    PropertyChangedCompleted(() => ExpiredDate);
                }
            }
        }

        protected Nullable<bool> _isLocked;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsLocked</para>
        /// </summary>
        public Nullable<bool> IsLocked
        {
            get { return this._isLocked; }
            set
            {
                if (this._isLocked != value)
                {
                    this.IsDirty = true;
                    this._isLocked = value;
                    OnPropertyChanged(() => IsLocked);
                    PropertyChangedCompleted(() => IsLocked);
                }
            }
        }

        protected Nullable<bool> _isExpired;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsExpired</para>
        /// </summary>
        public Nullable<bool> IsExpired
        {
            get { return this._isExpired; }
            set
            {
                if (this._isExpired != value)
                {
                    this.IsDirty = true;
                    this._isExpired = value;
                    OnPropertyChanged(() => IsExpired);
                    PropertyChangedCompleted(() => IsExpired);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <para>Public Method</para>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set PropertyModel to Entity</para>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
            {
                this.base_ResourceAccount.Id = this.Id;
                this.base_ResourceAccount.Resource = this.Resource;
            }
            this.base_ResourceAccount.UserResource = this.UserResource;
            this.base_ResourceAccount.LoginName = this.LoginName;
            this.base_ResourceAccount.Password = this.Password;
            this.base_ResourceAccount.ExpiredDate = this.ExpiredDate;
            this.base_ResourceAccount.IsLocked = this.IsLocked;
            this.base_ResourceAccount.IsExpired = this.IsExpired;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModel()
        {
            this._id = this.base_ResourceAccount.Id;
            this._resource = this.base_ResourceAccount.Resource;
            this._userResource = this.base_ResourceAccount.UserResource;
            this._loginName = this.base_ResourceAccount.LoginName;
            this._password = this.base_ResourceAccount.Password;
            this._expiredDate = this.base_ResourceAccount.ExpiredDate;
            this._isLocked = this.base_ResourceAccount.IsLocked;
            this._isExpired = this.base_ResourceAccount.IsExpired;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.base_ResourceAccount.Id;
            this.Resource = this.base_ResourceAccount.Resource;
            this.UserResource = this.base_ResourceAccount.UserResource;
            this.LoginName = this.base_ResourceAccount.LoginName;
            this.Password = this.base_ResourceAccount.Password;
            this.ExpiredDate = this.base_ResourceAccount.ExpiredDate;
            this.IsLocked = this.base_ResourceAccount.IsLocked;
            this.IsExpired = this.base_ResourceAccount.IsExpired;
        }

        #endregion

        #region Custom Code

        protected Nullable<long> _userLogId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the UserLogId</para>
        /// </summary>
        public Nullable<long> UserLogId
        {
            get { return this._userLogId; }
            set
            {
                if (this._userLogId != value)
                {
                    this._userLogId = value;
                    OnPropertyChanged(() => UserLogId);
                }
            }
        }

        protected string _userName;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the UserName</para>
        /// </summary>
        public string UserName
        {
            get { return this._userName; }
            set
            {
                if (this._userName != value)
                {
                    this.IsDirty = true;
                    this._userName = value;
                    OnPropertyChanged(() => UserName);
                    PropertyChangedCompleted(() => UserName);
                }
            }
        }

        protected string _department;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Department</para>
        /// </summary>
        public string Department
        {
            get { return this._department; }
            set
            {
                if (this._department != value)
                {
                    this.IsDirty = true;
                    this._department = value;
                    OnPropertyChanged(() => Department);
                    PropertyChangedCompleted(() => Department);
                }
            }
        }

        protected Nullable<short> _positionId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the PositionId</para>
        /// </summary>
        public Nullable<short> PositionId
        {
            get { return this._positionId; }
            set
            {
                if (this._positionId != value)
                {
                    this.IsDirty = true;
                    this._positionId = value;
                    OnPropertyChanged(() => PositionId);
                    PropertyChangedCompleted(() => PositionId);
                }
            }
        }

        protected string _confirmPassword;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the ConfirmPassword</para>
        /// </summary>
        public string ConfirmPassword
        {
            get { return this._confirmPassword; }
            set
            {
                if (this._confirmPassword != value)
                {
                    this.IsDirty = true;
                    this._confirmPassword = value;
                    OnPropertyChanged(() => ConfirmPassword);
                    PropertyChangedCompleted(() => ConfirmPassword);
                }
            }
        }

        protected string _clonePassword;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the ClonePassword</para>
        /// </summary>
        public string ClonePassword
        {
            get { return this._clonePassword; }
            set
            {
                if (this._clonePassword != value)
                {
                    this.IsDirty = true;
                    this._clonePassword = value;
                    OnPropertyChanged(() => ClonePassword);
                    PropertyChangedCompleted(() => ClonePassword);
                }
            }
        }

        #region AuthorizeCollection
        /// <summary>
        /// Gets or sets the AuthorizeCollection.
        /// </summary>
        private ObservableCollection<base_AuthorizeModel> _authorizeCollection = new ObservableCollection<base_AuthorizeModel>();
        public ObservableCollection<base_AuthorizeModel> AuthorizeCollection
        {
            get
            {
                return _authorizeCollection;
            }
            set
            {
                if (_authorizeCollection != value)
                {
                    _authorizeCollection = value;
                    OnPropertyChanged(() => AuthorizeCollection);
                }
            }
        }

        #endregion

        protected override void PropertyChangedCompleted(string propertyName)
        {
            switch (propertyName)
            {
                #region Password

                case "ClonePassword":
                    // Validates again.
                    OnPropertyChanged(() => ConfirmPassword);
                    break;

                #endregion
            }
        }

        #region Visibility

        protected Visibility _visibility = Visibility.Visible;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsVisible</para>
        /// </summary>
        public Visibility Visibility
        {
            get { return this._visibility; }
            set
            {
                if (this._visibility != value)
                {
                    this._visibility = value;
                    OnPropertyChanged(() => Visibility);
                }
            }
        }
        #endregion

        #region IsCheckLocked
        /// <summary>
        /// Binding with Islock.
        /// </summary>
        private bool _isCheckLocked;
        public bool IsCheckLocked
        {
            get { return _isCheckLocked; }
            set
            {
                if (value != _isCheckLocked)
                {
                    this.IsDirty = true;
                    _isCheckLocked = value;
                    OnPropertyChanged(() => IsCheckLocked);
                }
            }
        }
        #endregion

        #region IsEnablePassword
        /// <summary>
        /// Value is False when user check "Set Default" Check Box.
        /// Default value is True.
        /// </summary>
        private bool _isEnablePassword = false;
        public bool IsEnablePassword
        {
            get { return _isEnablePassword; }
            set
            {
                if (value != _isEnablePassword)
                {
                    _isEnablePassword = value;
                    OnPropertyChanged(() => IsEnablePassword);
                }
            }
        }
        #endregion

        #region IsNewUser
        /// <summary>
        /// Value is False when this user doesn't exist on base_ResourceAccount table.
        /// Default value is True.
        /// </summary>
        private bool _isNewUser;
        public bool IsNewUser
        {
            get { return _isNewUser; }
            set
            {
                if (value != _isNewUser)
                {
                    _isNewUser = value;
                    OnPropertyChanged(() => IsNewUser);
                }
            }
        }
        #endregion

        #region IpAddress
        protected string _ipAddress;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IpAddress</para>
        /// </summary>
        public string IpAddress
        {
            get { return this._ipAddress; }
            set
            {
                if (this._ipAddress != value)
                {
                    this._ipAddress = value;
                    OnPropertyChanged(() => IpAddress);
                    PropertyChangedCompleted(() => IpAddress);
                }
            }
        } 
        #endregion

        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get
            {
                List<string> errors = new List<string>();
                PropertyDescriptorCollection props = TypeDescriptor.GetProperties(this);
                foreach (PropertyDescriptor prop in props)
                {
                    string msg = this[prop.Name];
                    if (!string.IsNullOrWhiteSpace(msg))
                    {
                        errors.Add(msg);
                    }
                }
                return string.Join(Environment.NewLine, errors);
            }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;

                switch (columnName)
                {
                    case "Id":
                        break;
                    case "Resource":
                        break;
                    case "UserResource":
                        break;
                    case "LoginName":
                        if (string.IsNullOrEmpty(this.LoginName))
                            message = "LoginName is required.";
                        break;
                    case "ClonePassword":
                        if (string.IsNullOrEmpty(this.ClonePassword))
                            message = "Password is required.";
                        break;
                    case "ConfirmPassword":
                        if (string.Compare(this.ClonePassword, this.ConfirmPassword, false) != 0)
                            message = "Inexact password.";
                        break;
                }

                if (!string.IsNullOrWhiteSpace(message))
                    return message;
                return null;
            }
        }

        #endregion
    }
}

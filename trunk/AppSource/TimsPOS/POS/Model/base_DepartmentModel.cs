//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using CPC.POS.Database;
using CPC.Toolkit.Base;

namespace CPC.POS.Model
{
    /// <summary>
    /// Model for table base_Department
    /// </summary>
    [Serializable]
    public partial class base_DepartmentModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public base_DepartmentModel()
        {
            this.IsNew = true;
            this.base_Department = new base_Department();
        }

        // Default constructor that set entity to field
        public base_DepartmentModel(base_Department base_department, bool isRaiseProperties = false)
        {
            this.base_Department = base_department;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public base_Department base_Department { get; private set; }

        #endregion

        #region Primitive Properties

        protected int _id;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Id</para>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected string _name;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Name</para>
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set
            {
                if (this._name != value)
                {
                    this.IsDirty = true;
                    this._name = value;
                    OnPropertyChanged(() => Name);
                    PropertyChangedCompleted(() => Name);
                }
            }
        }

        protected Nullable<int> _parentId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the ParentId</para>
        /// </summary>
        public Nullable<int> ParentId
        {
            get { return this._parentId; }
            set
            {
                if (this._parentId != value)
                {
                    this.IsDirty = true;
                    this._parentId = value;
                    OnPropertyChanged(() => ParentId);
                    PropertyChangedCompleted(() => ParentId);
                }
            }
        }

        protected string _taxCodeId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the TaxCodeId</para>
        /// </summary>
        public string TaxCodeId
        {
            get { return this._taxCodeId; }
            set
            {
                if (this._taxCodeId != value)
                {
                    this.IsDirty = true;
                    this._taxCodeId = value;
                    OnPropertyChanged(() => TaxCodeId);
                    PropertyChangedCompleted(() => TaxCodeId);
                }
            }
        }

        protected decimal _margin;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Margin</para>
        /// </summary>
        public decimal Margin
        {
            get { return this._margin; }
            set
            {
                if (this._margin != value)
                {
                    this.IsDirty = true;
                    this._margin = value;
                    OnPropertyChanged(() => Margin);
                    PropertyChangedCompleted(() => Margin);
                }
            }
        }

        protected decimal _markUp;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the MarkUp</para>
        /// </summary>
        public decimal MarkUp
        {
            get { return this._markUp; }
            set
            {
                if (this._markUp != value)
                {
                    this.IsDirty = true;
                    this._markUp = value;
                    OnPropertyChanged(() => MarkUp);
                    PropertyChangedCompleted(() => MarkUp);
                }
            }
        }

        protected short _levelId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the LevelId</para>
        /// </summary>
        public short LevelId
        {
            get { return this._levelId; }
            set
            {
                if (this._levelId != value)
                {
                    this.IsDirty = true;
                    this._levelId = value;
                    OnPropertyChanged(() => LevelId);
                    PropertyChangedCompleted(() => LevelId);
                }
            }
        }

        protected Nullable<bool> _isActived;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsActived</para>
        /// </summary>
        public Nullable<bool> IsActived
        {
            get { return this._isActived; }
            set
            {
                if (this._isActived != value)
                {
                    this.IsDirty = true;
                    this._isActived = value;
                    OnPropertyChanged(() => IsActived);
                    PropertyChangedCompleted(() => IsActived);
                }
            }
        }

        protected string _userCreated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the UserCreated</para>
        /// </summary>
        public string UserCreated
        {
            get { return this._userCreated; }
            set
            {
                if (this._userCreated != value)
                {
                    this.IsDirty = true;
                    this._userCreated = value;
                    OnPropertyChanged(() => UserCreated);
                    PropertyChangedCompleted(() => UserCreated);
                }
            }
        }

        protected string _userUpdated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the UserUpdated</para>
        /// </summary>
        public string UserUpdated
        {
            get { return this._userUpdated; }
            set
            {
                if (this._userUpdated != value)
                {
                    this.IsDirty = true;
                    this._userUpdated = value;
                    OnPropertyChanged(() => UserUpdated);
                    PropertyChangedCompleted(() => UserUpdated);
                }
            }
        }

        protected Nullable<System.DateTime> _dateCreated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DateCreated</para>
        /// </summary>
        public Nullable<System.DateTime> DateCreated
        {
            get { return this._dateCreated; }
            set
            {
                if (this._dateCreated != value)
                {
                    this.IsDirty = true;
                    this._dateCreated = value;
                    OnPropertyChanged(() => DateCreated);
                    PropertyChangedCompleted(() => DateCreated);
                }
            }
        }

        protected Nullable<System.DateTime> _dateUpdated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DateUpdated</para>
        /// </summary>
        public Nullable<System.DateTime> DateUpdated
        {
            get { return this._dateUpdated; }
            set
            {
                if (this._dateUpdated != value)
                {
                    this.IsDirty = true;
                    this._dateUpdated = value;
                    OnPropertyChanged(() => DateUpdated);
                    PropertyChangedCompleted(() => DateUpdated);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <para>Public Method</para>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set PropertyModel to Entity</para>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.base_Department.Id = this.Id;
            this.base_Department.Name = this.Name;
            this.base_Department.ParentId = this.ParentId;
            this.base_Department.TaxCodeId = this.TaxCodeId;
            this.base_Department.Margin = this.Margin;
            this.base_Department.MarkUp = this.MarkUp;
            this.base_Department.LevelId = this.LevelId;
            this.base_Department.IsActived = this.IsActived;
            this.base_Department.UserCreated = this.UserCreated;
            this.base_Department.UserUpdated = this.UserUpdated;
            this.base_Department.DateCreated = this.DateCreated;
            this.base_Department.DateUpdated = this.DateUpdated;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModel()
        {
            this._id = this.base_Department.Id;
            this._name = this.base_Department.Name;
            this._parentId = this.base_Department.ParentId;
            this._taxCodeId = this.base_Department.TaxCodeId;
            this._margin = this.base_Department.Margin;
            this._markUp = this.base_Department.MarkUp;
            this._levelId = this.base_Department.LevelId;
            this._isActived = this.base_Department.IsActived;
            this._userCreated = this.base_Department.UserCreated;
            this._userUpdated = this.base_Department.UserUpdated;
            this._dateCreated = this.base_Department.DateCreated;
            this._dateUpdated = this.base_Department.DateUpdated;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.base_Department.Id;
            this.Name = this.base_Department.Name;
            this.ParentId = this.base_Department.ParentId;
            this.TaxCodeId = this.base_Department.TaxCodeId;
            this.Margin = this.base_Department.Margin;
            this.MarkUp = this.base_Department.MarkUp;
            this.LevelId = this.base_Department.LevelId;
            this.IsActived = this.base_Department.IsActived;
            this.UserCreated = this.base_Department.UserCreated;
            this.UserUpdated = this.base_Department.UserUpdated;
            this.DateCreated = this.base_Department.DateCreated;
            this.DateUpdated = this.base_Department.DateUpdated;
        }

        #endregion

        #region Custom Code

        #region Properties

        #region HasError

        /// <summary>
        /// Gets value indicate that this object has error or not.
        /// </summary>
        public bool HasError
        {
            get
            {
                return !string.IsNullOrWhiteSpace(Error);
            }
        }

        #endregion

        #endregion

        #region Override Methods

        protected override void PropertyChangedCompleted(string propertyName)
        {
            switch (propertyName)
            {
                case "Margin":

                    //Calculate MarkUp.
                    if (_margin >= 100)
                    {
                        _markUp = 0;
                    }
                    else
                    {
                        // -0.01 because 0.65 round to 0.6, 0.66 round to 0.7, 0.64 round to 0.6.
                        _markUp = Math.Round(Math.Round((_margin * 100) / (100 - _margin), 2) - 0.01M, 1, MidpointRounding.AwayFromZero);
                    }
                    OnPropertyChanged(() => MarkUp);

                    break;

                case "MarkUp":

                    //Calculate Margin.
                    if (_markUp < 0)
                    {
                        _margin = 0;
                    }
                    else
                    {
                        // -0.01 because 0.65 round to 0.6, 0.66 round to 0.7, 0.64 round to 0.6.
                        _margin = Math.Round(Math.Round((_markUp * 100) / (_markUp + 100), 2) - 0.01M, 1, MidpointRounding.AwayFromZero);
                    }
                    OnPropertyChanged(() => Margin);

                    break;
            }
        }

        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get
            {
                List<string> errors = new List<string>();
                PropertyDescriptorCollection props = TypeDescriptor.GetProperties(this);
                foreach (PropertyDescriptor prop in props)
                {
                    string msg = this[prop.Name];
                    if (!string.IsNullOrWhiteSpace(msg))
                    {
                        errors.Add(msg);
                    }
                }

                return string.Join(Environment.NewLine, errors);
            }
        }

        public string this[string columnName]
        {
            get
            {
                string message = null;

                switch (columnName)
                {
                    case "Name":

                        if (string.IsNullOrWhiteSpace(_name))
                        {
                            message = "Name is required.";
                        }

                        break;

                    case "TaxCodeId":

                        if (_levelId == Define.ProductCategoryLevel && string.IsNullOrWhiteSpace(_taxCodeId))
                        {
                            message = "Tax code is required.";
                        }

                        break;
                }

                return message;
            }
        }

        #endregion

        #endregion
    }
}

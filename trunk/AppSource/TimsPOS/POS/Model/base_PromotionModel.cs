//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using CPC.POS.Database;
using CPC.Toolkit.Base;

namespace CPC.POS.Model
{
    /// <summary>
    /// Model for table base_Promotion
    /// </summary>
    [Serializable]
    public partial class base_PromotionModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public base_PromotionModel()
        {
            this.IsNew = true;
            this.base_Promotion = new base_Promotion();
        }

        // Default constructor that set entity to field
        public base_PromotionModel(base_Promotion base_promotion, bool isRaiseProperties = false)
        {
            this.base_Promotion = base_promotion;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public base_Promotion base_Promotion { get; private set; }

        #endregion

        #region Primitive Properties

        protected int _id;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Id</para>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected string _name;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Name</para>
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set
            {
                if (this._name != value)
                {
                    this.IsDirty = true;
                    this._name = value;
                    OnPropertyChanged(() => Name);
                    PropertyChangedCompleted(() => Name);
                }
            }
        }

        protected string _description;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Description</para>
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set
            {
                if (this._description != value)
                {
                    this.IsDirty = true;
                    this._description = value;
                    OnPropertyChanged(() => Description);
                    PropertyChangedCompleted(() => Description);
                }
            }
        }

        protected short _promotionTypeId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the PromotionTypeId</para>
        /// </summary>
        public short PromotionTypeId
        {
            get { return this._promotionTypeId; }
            set
            {
                if (this._promotionTypeId != value)
                {
                    this.IsDirty = true;
                    this._promotionTypeId = value;
                    OnPropertyChanged(() => PromotionTypeId);
                    PropertyChangedCompleted(() => PromotionTypeId);
                }
            }
        }

        protected short _takeOffOption;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the TakeOffOption</para>
        /// </summary>
        public short TakeOffOption
        {
            get { return this._takeOffOption; }
            set
            {
                if (this._takeOffOption != value)
                {
                    this.IsDirty = true;
                    this._takeOffOption = value;
                    OnPropertyChanged(() => TakeOffOption);
                    PropertyChangedCompleted(() => TakeOffOption);
                }
            }
        }

        protected decimal _takeOff;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the TakeOff</para>
        /// </summary>
        public decimal TakeOff
        {
            get { return this._takeOff; }
            set
            {
                if (this._takeOff != value)
                {
                    this.IsDirty = true;
                    this._takeOff = value;
                    OnPropertyChanged(() => TakeOff);
                    PropertyChangedCompleted(() => TakeOff);
                }
            }
        }

        protected int _buyingQty;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the BuyingQty</para>
        /// </summary>
        public int BuyingQty
        {
            get { return this._buyingQty; }
            set
            {
                if (this._buyingQty != value)
                {
                    this.IsDirty = true;
                    this._buyingQty = value;
                    OnPropertyChanged(() => BuyingQty);
                    PropertyChangedCompleted(() => BuyingQty);
                }
            }
        }

        protected decimal _getingValue;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the GetingValue</para>
        /// </summary>
        public decimal GetingValue
        {
            get { return this._getingValue; }
            set
            {
                if (this._getingValue != value)
                {
                    this.IsDirty = true;
                    this._getingValue = value;
                    OnPropertyChanged(() => GetingValue);
                    PropertyChangedCompleted(() => GetingValue);
                }
            }
        }

        protected bool _isApplyToAboveQuantities;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsApplyToAboveQuantities</para>
        /// </summary>
        public bool IsApplyToAboveQuantities
        {
            get { return this._isApplyToAboveQuantities; }
            set
            {
                if (this._isApplyToAboveQuantities != value)
                {
                    this.IsDirty = true;
                    this._isApplyToAboveQuantities = value;
                    OnPropertyChanged(() => IsApplyToAboveQuantities);
                    PropertyChangedCompleted(() => IsApplyToAboveQuantities);
                }
            }
        }

        protected short _status;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Status</para>
        /// </summary>
        public short Status
        {
            get { return this._status; }
            set
            {
                if (this._status != value)
                {
                    this.IsDirty = true;
                    this._status = value;
                    OnPropertyChanged(() => Status);
                    PropertyChangedCompleted(() => Status);
                }
            }
        }

        protected short _affectDiscount;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the AffectDiscount</para>
        /// </summary>
        public short AffectDiscount
        {
            get { return this._affectDiscount; }
            set
            {
                if (this._affectDiscount != value)
                {
                    this.IsDirty = true;
                    this._affectDiscount = value;
                    OnPropertyChanged(() => AffectDiscount);
                    PropertyChangedCompleted(() => AffectDiscount);
                }
            }
        }

        protected System.DateTime _dateCreated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DateCreated</para>
        /// </summary>
        public System.DateTime DateCreated
        {
            get { return this._dateCreated; }
            set
            {
                if (this._dateCreated != value)
                {
                    this.IsDirty = true;
                    this._dateCreated = value;
                    OnPropertyChanged(() => DateCreated);
                    PropertyChangedCompleted(() => DateCreated);
                }
            }
        }

        protected string _userCreated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the UserCreated</para>
        /// </summary>
        public string UserCreated
        {
            get { return this._userCreated; }
            set
            {
                if (this._userCreated != value)
                {
                    this.IsDirty = true;
                    this._userCreated = value;
                    OnPropertyChanged(() => UserCreated);
                    PropertyChangedCompleted(() => UserCreated);
                }
            }
        }

        protected System.DateTime _dateUpdated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DateUpdated</para>
        /// </summary>
        public System.DateTime DateUpdated
        {
            get { return this._dateUpdated; }
            set
            {
                if (this._dateUpdated != value)
                {
                    this.IsDirty = true;
                    this._dateUpdated = value;
                    OnPropertyChanged(() => DateUpdated);
                    PropertyChangedCompleted(() => DateUpdated);
                }
            }
        }

        protected string _userUpdated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the UserUpdated</para>
        /// </summary>
        public string UserUpdated
        {
            get { return this._userUpdated; }
            set
            {
                if (this._userUpdated != value)
                {
                    this.IsDirty = true;
                    this._userUpdated = value;
                    OnPropertyChanged(() => UserUpdated);
                    PropertyChangedCompleted(() => UserUpdated);
                }
            }
        }

        protected System.Guid _resource;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Resource</para>
        /// </summary>
        public System.Guid Resource
        {
            get { return this._resource; }
            set
            {
                if (this._resource != value)
                {
                    this.IsDirty = true;
                    this._resource = value;
                    OnPropertyChanged(() => Resource);
                    PropertyChangedCompleted(() => Resource);
                }
            }
        }

        protected Nullable<System.DateTime> _couponExpire;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the CouponExpire</para>
        /// </summary>
        public Nullable<System.DateTime> CouponExpire
        {
            get { return this._couponExpire; }
            set
            {
                if (this._couponExpire != value)
                {
                    this.IsDirty = true;
                    this._couponExpire = value;
                    OnPropertyChanged(() => CouponExpire);
                    PropertyChangedCompleted(() => CouponExpire);
                }
            }
        }

        protected bool _isCouponExpired;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsCouponExpired</para>
        /// </summary>
        public bool IsCouponExpired
        {
            get { return this._isCouponExpired; }
            set
            {
                if (this._isCouponExpired != value)
                {
                    this.IsDirty = true;
                    this._isCouponExpired = value;
                    OnPropertyChanged(() => IsCouponExpired);
                    PropertyChangedCompleted(() => IsCouponExpired);
                }
            }
        }

        protected Nullable<int> _priceSchemaRange;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the PriceSchemaRange</para>
        /// </summary>
        public Nullable<int> PriceSchemaRange
        {
            get { return this._priceSchemaRange; }
            set
            {
                if (this._priceSchemaRange != value)
                {
                    this.IsDirty = true;
                    this._priceSchemaRange = value;
                    OnPropertyChanged(() => PriceSchemaRange);
                    PropertyChangedCompleted(() => PriceSchemaRange);
                }
            }
        }

        protected string _reasonReActive;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the ReasonReActive</para>
        /// </summary>
        public string ReasonReActive
        {
            get { return this._reasonReActive; }
            set
            {
                if (this._reasonReActive != value)
                {
                    this.IsDirty = true;
                    this._reasonReActive = value;
                    OnPropertyChanged(() => ReasonReActive);
                    PropertyChangedCompleted(() => ReasonReActive);
                }
            }
        }

        protected int _sold;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Sold</para>
        /// </summary>
        public int Sold
        {
            get { return this._sold; }
            set
            {
                if (this._sold != value)
                {
                    this.IsDirty = true;
                    this._sold = value;
                    OnPropertyChanged(() => Sold);
                    PropertyChangedCompleted(() => Sold);
                }
            }
        }

        protected decimal _totalPrice;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the TotalPrice</para>
        /// </summary>
        public decimal TotalPrice
        {
            get { return this._totalPrice; }
            set
            {
                if (this._totalPrice != value)
                {
                    this.IsDirty = true;
                    this._totalPrice = value;
                    OnPropertyChanged(() => TotalPrice);
                    PropertyChangedCompleted(() => TotalPrice);
                }
            }
        }

        protected Nullable<int> _categoryId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the CategoryId</para>
        /// </summary>
        public Nullable<int> CategoryId
        {
            get { return this._categoryId; }
            set
            {
                if (this._categoryId != value)
                {
                    this.IsDirty = true;
                    this._categoryId = value;
                    OnPropertyChanged(() => CategoryId);
                    PropertyChangedCompleted(() => CategoryId);
                }
            }
        }

        protected Nullable<long> _vendorId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the VendorId</para>
        /// </summary>
        public Nullable<long> VendorId
        {
            get { return this._vendorId; }
            set
            {
                if (this._vendorId != value)
                {
                    this.IsDirty = true;
                    this._vendorId = value;
                    OnPropertyChanged(() => VendorId);
                    PropertyChangedCompleted(() => VendorId);
                }
            }
        }

        protected string _couponBarCode;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the CouponBarCode</para>
        /// </summary>
        public string CouponBarCode
        {
            get { return this._couponBarCode; }
            set
            {
                if (this._couponBarCode != value)
                {
                    this.IsDirty = true;
                    this._couponBarCode = value;
                    OnPropertyChanged(() => CouponBarCode);
                    PropertyChangedCompleted(() => CouponBarCode);
                }
            }
        }

        protected string _barCodeNumber;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the BarCodeNumber</para>
        /// </summary>
        public string BarCodeNumber
        {
            get { return this._barCodeNumber; }
            set
            {
                if (this._barCodeNumber != value)
                {
                    this.IsDirty = true;
                    this._barCodeNumber = value;
                    OnPropertyChanged(() => BarCodeNumber);
                    PropertyChangedCompleted(() => BarCodeNumber);
                }
            }
        }

        protected byte[] _barCodeImage;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the BarCodeImage</para>
        /// </summary>
        public byte[] BarCodeImage
        {
            get { return this._barCodeImage; }
            set
            {
                if (this._barCodeImage != value)
                {
                    this.IsDirty = true;
                    this._barCodeImage = value;
                    OnPropertyChanged(() => BarCodeImage);
                    PropertyChangedCompleted(() => BarCodeImage);
                }
            }
        }

        protected bool _isConflict;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsConflict</para>
        /// </summary>
        public bool IsConflict
        {
            get { return this._isConflict; }
            set
            {
                if (this._isConflict != value)
                {
                    this.IsDirty = true;
                    this._isConflict = value;
                    OnPropertyChanged(() => IsConflict);
                    PropertyChangedCompleted(() => IsConflict);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <para>Public Method</para>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set PropertyModel to Entity</para>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.base_Promotion.Id = this.Id;
            this.base_Promotion.Name = this.Name;
            this.base_Promotion.Description = this.Description;
            this.base_Promotion.PromotionTypeId = this.PromotionTypeId;
            this.base_Promotion.TakeOffOption = this.TakeOffOption;
            this.base_Promotion.TakeOff = this.TakeOff;
            this.base_Promotion.BuyingQty = this.BuyingQty;
            this.base_Promotion.GetingValue = this.GetingValue;
            this.base_Promotion.IsApplyToAboveQuantities = this.IsApplyToAboveQuantities;
            this.base_Promotion.Status = this.Status;
            this.base_Promotion.AffectDiscount = this.AffectDiscount;
            this.base_Promotion.DateCreated = this.DateCreated;
            this.base_Promotion.UserCreated = this.UserCreated;
            this.base_Promotion.DateUpdated = this.DateUpdated;
            this.base_Promotion.UserUpdated = this.UserUpdated;
            this.base_Promotion.Resource = this.Resource;
            this.base_Promotion.CouponExpire = this.CouponExpire;
            this.base_Promotion.IsCouponExpired = this.IsCouponExpired;
            this.base_Promotion.PriceSchemaRange = this.PriceSchemaRange;
            this.base_Promotion.ReasonReActive = this.ReasonReActive;
            this.base_Promotion.Sold = this.Sold;
            this.base_Promotion.TotalPrice = this.TotalPrice;
            this.base_Promotion.CategoryId = this.CategoryId;
            this.base_Promotion.VendorId = this.VendorId;
            this.base_Promotion.CouponBarCode = this.CouponBarCode;
            this.base_Promotion.BarCodeNumber = this.BarCodeNumber;
            this.base_Promotion.BarCodeImage = this.BarCodeImage;
            this.base_Promotion.IsConflict = this.IsConflict;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModel()
        {
            this._id = this.base_Promotion.Id;
            this._name = this.base_Promotion.Name;
            this._description = this.base_Promotion.Description;
            this._promotionTypeId = this.base_Promotion.PromotionTypeId;
            this._takeOffOption = this.base_Promotion.TakeOffOption;
            this._takeOff = this.base_Promotion.TakeOff;
            this._buyingQty = this.base_Promotion.BuyingQty;
            this._getingValue = this.base_Promotion.GetingValue;
            this._isApplyToAboveQuantities = this.base_Promotion.IsApplyToAboveQuantities;
            this._status = this.base_Promotion.Status;
            this._affectDiscount = this.base_Promotion.AffectDiscount;
            this._dateCreated = this.base_Promotion.DateCreated;
            this._userCreated = this.base_Promotion.UserCreated;
            this._dateUpdated = this.base_Promotion.DateUpdated;
            this._userUpdated = this.base_Promotion.UserUpdated;
            this._resource = this.base_Promotion.Resource;
            this._couponExpire = this.base_Promotion.CouponExpire;
            this._isCouponExpired = this.base_Promotion.IsCouponExpired;
            this._priceSchemaRange = this.base_Promotion.PriceSchemaRange;
            this._reasonReActive = this.base_Promotion.ReasonReActive;
            this._sold = this.base_Promotion.Sold;
            this._totalPrice = this.base_Promotion.TotalPrice;
            this._categoryId = this.base_Promotion.CategoryId;
            this._vendorId = this.base_Promotion.VendorId;
            this._couponBarCode = this.base_Promotion.CouponBarCode;
            this._barCodeNumber = this.base_Promotion.BarCodeNumber;
            this._barCodeImage = this.base_Promotion.BarCodeImage;
            this._isConflict = this.base_Promotion.IsConflict;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.base_Promotion.Id;
            this.Name = this.base_Promotion.Name;
            this.Description = this.base_Promotion.Description;
            this.PromotionTypeId = this.base_Promotion.PromotionTypeId;
            this.TakeOffOption = this.base_Promotion.TakeOffOption;
            this.TakeOff = this.base_Promotion.TakeOff;
            this.BuyingQty = this.base_Promotion.BuyingQty;
            this.GetingValue = this.base_Promotion.GetingValue;
            this.IsApplyToAboveQuantities = this.base_Promotion.IsApplyToAboveQuantities;
            this.Status = this.base_Promotion.Status;
            this.AffectDiscount = this.base_Promotion.AffectDiscount;
            this.DateCreated = this.base_Promotion.DateCreated;
            this.UserCreated = this.base_Promotion.UserCreated;
            this.DateUpdated = this.base_Promotion.DateUpdated;
            this.UserUpdated = this.base_Promotion.UserUpdated;
            this.Resource = this.base_Promotion.Resource;
            this.CouponExpire = this.base_Promotion.CouponExpire;
            this.IsCouponExpired = this.base_Promotion.IsCouponExpired;
            this.PriceSchemaRange = this.base_Promotion.PriceSchemaRange;
            this.ReasonReActive = this.base_Promotion.ReasonReActive;
            this.Sold = this.base_Promotion.Sold;
            this.TotalPrice = this.base_Promotion.TotalPrice;
            this.CategoryId = this.base_Promotion.CategoryId;
            this.VendorId = this.base_Promotion.VendorId;
            this.CouponBarCode = this.base_Promotion.CouponBarCode;
            this.BarCodeNumber = this.base_Promotion.BarCodeNumber;
            this.BarCodeImage = this.base_Promotion.BarCodeImage;
            this.IsConflict = this.base_Promotion.IsConflict;
        }

        #endregion

        #region Custom Code

        #region Fields

        private BarcodeLib.Barcode _barcode = new BarcodeLib.Barcode();
        private bool _isShowTotalProducts;

        #endregion

        #region Properties

        private base_PromotionScheduleModel _promotionScheduleModel;
        /// <summary>
        /// Gets or sets the PromotionScheduleModel.
        /// </summary>
        public base_PromotionScheduleModel PromotionScheduleModel
        {
            get { return _promotionScheduleModel; }
            set
            {
                if (_promotionScheduleModel != value)
                {
                    _promotionScheduleModel = value;
                    OnPropertyChanged(() => PromotionScheduleModel);
                }
            }
        }

        /// <summary>
        /// Gets or sets the PromotionAffectList
        /// </summary>
        public CollectionBase<base_PromotionAffectModel> PromotionAffectList { get; set; }

        /// <summary>
        /// Gets the TotalSelectedProducts
        /// </summary>
        public string TotalSelectedProducts
        {
            get
            {
                int totalSelectedProducts = 0;
                if (PromotionAffectList != null)
                    totalSelectedProducts = PromotionAffectList.Count;
                string product = totalSelectedProducts > 1 ? "products" : "product";
                if (_isShowTotalProducts)
                    return string.Format("({0} {1})", totalSelectedProducts, product);
                else
                    return string.Empty;
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Raise TotalSelectedProducts
        /// </summary>
        public void RaiseTotalSelectedProducts()
        {
            _isShowTotalProducts = true;
            OnPropertyChanged(() => TotalSelectedProducts);
        }

        #endregion

        #region Override Methods

        /// <summary>
        /// Override property changed complete function
        /// </summary>
        /// <param name="propertyName"></param>
        protected override void PropertyChangedCompleted(string propertyName)
        {
            switch (propertyName)
            {
                case "PromotionTypeId":
                    // Update TakeOffOption value
                    switch (this.PromotionTypeId)
                    {
                        // Discount by percent
                        case 1:
                        case 4:
                            this.TakeOffOption = 1;
                            break;
                        // Discount by dollar
                        case 2:
                        case 3:
                            this.TakeOffOption = 2;
                            break;
                    }

                    // Update TakeOff
                    if (this.TakeOff != 0)
                        this.TakeOff = 0;
                    else
                        OnPropertyChanged(() => TakeOff);

                    // Update BuyingQty
                    if (this.BuyingQty != 0)
                        this.BuyingQty = 0;
                    else
                        OnPropertyChanged(() => BuyingQty);

                    // Update GetingValue
                    if (this.GetingValue != 0)
                        this.GetingValue = 0;
                    else
                        OnPropertyChanged(() => GetingValue);

                    OnPropertyChanged(() => CouponBarCode);
                    break;
                case "BuyingQty":
                case "GetingValue":
                    // Auto calculate TakeOff when PromotionType is Buy X get $Y
                    if (this.PromotionTypeId == 3 && this.BuyingQty > 0)
                        this.TakeOff = (decimal)((double)this.GetingValue / this.BuyingQty * 1.0);
                    break;
                case "IsCouponExpired":
                    OnPropertyChanged(() => CouponExpire);
                    break;
                case "CouponBarCode":
                    if (!string.IsNullOrWhiteSpace(CouponBarCode))
                    {
                        _barcode.IncludeLabel = true;
                        switch (Define.CONFIGURATION.DefaultScanMethod.Value)
                        {
                            case 1: // UPC-A
                                if (CouponBarCode.Length == 11 || CouponBarCode.Length == 12)
                                    _barcode.Encode(BarcodeLib.TYPE.UPCA, CouponBarCode, 200, 70);
                                break;
                            case 2: // EAN-13
                                if (CouponBarCode.Length >= 12)
                                    _barcode.Encode(BarcodeLib.TYPE.EAN13, CouponBarCode, 200, 70);
                                break;
                            case 3: // Code 128
                                if (CouponBarCode.Length >= 1)
                                    _barcode.Encode(BarcodeLib.TYPE.CODE128, CouponBarCode, 200, 70);
                                break;
                        }
                        BarCodeImage = _barcode.Encoded_Image_Bytes;
                        BarCodeNumber = _barcode.RawData;
                    }
                    break;
                case "AffectDiscount":
                    switch (AffectDiscount)
                    {
                        case 1:
                            _categoryId = 0;
                            OnPropertyChanged(() => CategoryId);
                            OnPropertyChanged(() => VendorId);
                            break;
                        case 2:
                            _vendorId = 0;
                            OnPropertyChanged(() => VendorId);
                            OnPropertyChanged(() => CategoryId);
                            break;
                        case 0:
                        case 3:
                            _categoryId = 0;
                            _vendorId = 0;
                            OnPropertyChanged(() => CategoryId);
                            OnPropertyChanged(() => VendorId);
                            break;
                    }
                    break;
            }
        }

        #endregion

        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;

                if (IsDirty || IsNew)
                {
                    switch (columnName)
                    {
                        case "Name":
                            if (string.IsNullOrWhiteSpace(Name))
                                message = "Name is required";
                            break;
                        case "TakeOff":
                            if (TakeOff == 0 && PromotionTypeId != 3)
                                message = "TakeOff is required";
                            break;
                        case "BuyingQty":
                            if (BuyingQty == 0 && (PromotionTypeId == 3 || PromotionTypeId == 4))
                                message = "BuyingQty is required";
                            break;
                        case "GetingValue":
                            if (GetingValue == 0 && PromotionTypeId == 3)
                                message = "GetingValue is required";
                            break;
                        case "CouponBarCode":
                            if (PromotionTypeId == 5)
                            {
                                if (string.IsNullOrWhiteSpace(CouponBarCode))
                                    message = "CouponBarCode is required";
                                else if (CouponBarCode.Length < 11)
                                    message = "CouponBarCode is greater than 11 characters";
                            }
                            break;
                        case "CouponExpire":
                            if (IsCouponExpired)
                            {
                                if (!CouponExpire.HasValue)
                                    message = "CouponExpire is required";
                                else if (CouponExpire.Value < DateTimeExt.Now)
                                    message = "CouponExpire must be greater than Today";
                                else if (PromotionScheduleModel != null && CouponExpire.Value < PromotionScheduleModel.EndDate)
                                    message = "CouponExpire must be greater than EndDate";
                            }
                            break;
                        case "PriceSchemaRange":
                            if (PriceSchemaRange == 0)
                                message = "PriceSchemaRange must be selected";
                            break;
                        case "CategoryId":
                            if (AffectDiscount == 1 && CategoryId.HasValue && CategoryId.Value == 0)
                                message = "CategoryId is required";
                            break;
                        case "VendorId":
                            if (AffectDiscount == 2 && VendorId.HasValue && VendorId.Value == 0)
                                message = "VendorId is required";
                            break;
                    }
                }

                if (!string.IsNullOrWhiteSpace(message))
                    return message;
                return null;
            }
        }

        #endregion
    }
}

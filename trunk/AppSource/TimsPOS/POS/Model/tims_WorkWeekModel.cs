//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using CPC.POS.Database;
using CPC.Toolkit.Base;
using System.Linq;

namespace CPC.POS.Model
{
    /// <summary>
    /// Model for table tims_WorkWeek
    /// </summary>
    [Serializable]
    public partial class tims_WorkWeekModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public tims_WorkWeekModel()
        {
            this.IsNew = true;
            this.tims_WorkWeek = new tims_WorkWeek();
        }

        // Default constructor that set entity to field
        public tims_WorkWeekModel(tims_WorkWeek tims_workweek, bool isRaiseProperties = false)
        {
            this.tims_WorkWeek = tims_workweek;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public tims_WorkWeek tims_WorkWeek { get; private set; }

        #endregion

        #region Primitive Properties

        protected int _id;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Id</para>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected int _workScheduleId;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the WorkScheduleId</para>
        /// </summary>
        public int WorkScheduleId
        {
            get { return this._workScheduleId; }
            set
            {
                if (this._workScheduleId != value)
                {
                    this.IsDirty = true;
                    this._workScheduleId = value;
                    OnPropertyChanged(() => WorkScheduleId);
                    PropertyChangedCompleted(() => WorkScheduleId);
                }
            }
        }

        protected int _week;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Week</para>
        /// </summary>
        public int Week
        {
            get { return this._week; }
            set
            {
                if (this._week != value)
                {
                    this.IsDirty = true;
                    this._week = value;
                    OnPropertyChanged(() => Week);
                    PropertyChangedCompleted(() => Week);
                }
            }
        }

        protected int _day;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Day</para>
        /// </summary>
        public int Day
        {
            get { return this._day; }
            set
            {
                if (this._day != value)
                {
                    this.IsDirty = true;
                    this._day = value;
                    OnPropertyChanged(() => Day);
                    PropertyChangedCompleted(() => Day);
                }
            }
        }

        protected System.DateTime _workIn;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the WorkIn</para>
        /// </summary>
        public System.DateTime WorkIn
        {
            get { return this._workIn; }
            set
            {
                if (this._workIn != value)
                {
                    this.IsDirty = true;
                    this._workIn = value;
                    OnPropertyChanged(() => WorkIn);
                    PropertyChangedCompleted(() => WorkIn);
                }
            }
        }

        protected System.DateTime _workOut;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the WorkOut</para>
        /// </summary>
        public System.DateTime WorkOut
        {
            get { return this._workOut; }
            set
            {
                if (this._workOut != value)
                {
                    this.IsDirty = true;
                    this._workOut = value;
                    OnPropertyChanged(() => WorkOut);
                    PropertyChangedCompleted(() => WorkOut);
                }
            }
        }

        protected Nullable<System.DateTime> _lunchOut;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the LunchOut</para>
        /// </summary>
        public Nullable<System.DateTime> LunchOut
        {
            get { return this._lunchOut; }
            set
            {
                if (this._lunchOut != value)
                {
                    this.IsDirty = true;
                    this._lunchOut = value;
                    OnPropertyChanged(() => LunchOut);
                    PropertyChangedCompleted(() => LunchOut);
                }
            }
        }

        protected Nullable<System.DateTime> _lunchIn;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the LunchIn</para>
        /// </summary>
        public Nullable<System.DateTime> LunchIn
        {
            get { return this._lunchIn; }
            set
            {
                if (this._lunchIn != value)
                {
                    this.IsDirty = true;
                    this._lunchIn = value;
                    OnPropertyChanged(() => LunchIn);
                    PropertyChangedCompleted(() => LunchIn);
                }
            }
        }

        protected bool _lunchBreakFlag;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the LunchBreakFlag</para>
        /// </summary>
        public bool LunchBreakFlag
        {
            get { return this._lunchBreakFlag; }
            set
            {
                if (this._lunchBreakFlag != value)
                {
                    this.IsDirty = true;
                    this._lunchBreakFlag = value;
                    OnPropertyChanged(() => LunchBreakFlag);
                    PropertyChangedCompleted(() => LunchBreakFlag);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <para>Public Method</para>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set PropertyModel to Entity</para>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.tims_WorkWeek.Id = this.Id;
            this.tims_WorkWeek.WorkScheduleId = this.WorkScheduleId;
            this.tims_WorkWeek.Week = this.Week;
            this.tims_WorkWeek.Day = this.Day;
            this.tims_WorkWeek.WorkIn = this.WorkIn;
            this.tims_WorkWeek.WorkOut = this.WorkOut;
            this.tims_WorkWeek.LunchOut = this.LunchOut;
            this.tims_WorkWeek.LunchIn = this.LunchIn;
            this.tims_WorkWeek.LunchBreakFlag = this.LunchBreakFlag;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModel()
        {
            this._id = this.tims_WorkWeek.Id;
            this._workScheduleId = this.tims_WorkWeek.WorkScheduleId;
            this._week = this.tims_WorkWeek.Week;
            this._day = this.tims_WorkWeek.Day;
            this._workIn = this.tims_WorkWeek.WorkIn;
            this._workOut = this.tims_WorkWeek.WorkOut;
            this._lunchOut = this.tims_WorkWeek.LunchOut;
            this._lunchIn = this.tims_WorkWeek.LunchIn;
            this._lunchBreakFlag = this.tims_WorkWeek.LunchBreakFlag;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.tims_WorkWeek.Id;
            this.WorkScheduleId = this.tims_WorkWeek.WorkScheduleId;
            this.Week = this.tims_WorkWeek.Week;
            this.Day = this.tims_WorkWeek.Day;
            this.WorkIn = this.tims_WorkWeek.WorkIn;
            this.WorkOut = this.tims_WorkWeek.WorkOut;
            this.LunchOut = this.tims_WorkWeek.LunchOut;
            this.LunchIn = this.tims_WorkWeek.LunchIn;
            this.LunchBreakFlag = this.tims_WorkWeek.LunchBreakFlag;
        }

        #endregion

        #region Custom Code

        /// <summary>
        /// Constructor that set entity to field with parent
        /// </summary>
        /// <param name="parent"></param>
        /// <param name="workweek"></param>
        public tims_WorkWeekModel(tims_WorkWeekModel parent, tims_WorkWeek workweek)
        {
            Parent = parent;
            this.tims_WorkWeek = workweek;
            this.ToModel();
            this.IsDirty = false;
        }

        #region Properties
        /// <summary>
        /// Use to raise TotalHours
        /// </summary>
        public tims_WorkWeekModel Parent { get; set; }

        /// <summary>
        /// Gets or sets the DayOfWorkWeekCollection
        /// </summary>
        public ObservableCollection<tims_WorkWeekModel> DayOfWorkWeekCollection { get; set; }

        private bool _hasWork;
        /// <summary>
        /// Gets or sets the HasWork.
        /// </summary>
        public bool HasWork
        {
            get { return _hasWork; }
            set
            {
                if (_hasWork != value)
                {
                    IsDirty = true;
                    _hasWork = value;
                    OnPropertyChanged(() => HasWork);
                    HasWorkChanged();
                    RaiseAllProperties();
                }
            }
        }

        /// <summary>
        /// Gets the HasAlert.
        /// </summary>
        public bool HasAlert
        {
            get
            {
                if (HasWork)
                {
                    double totalHours = GetDuration().Value.TotalHours;
                    return (totalHours > 8);
                }
                return false;
            }
        }

        /// <summary>
        /// Gets or sets the Duration.
        /// </summary>
        public string Duration
        {
            get { return GetDuration().Value.ToHours(); }
        }

        /// <summary>
        /// Gets total work hours in a week
        /// </summary>
        public string TotalHours
        {
            get
            {
                TimeSpan totalHours = new TimeSpan(DayOfWorkWeekCollection.Where(x => x.HasWork).Sum(x => x.GetDuration().Value.Ticks));
                return totalHours.ToHours();
            }
        }

        private bool _isNotHasWorkDay;
        /// <summary>
        /// Check work week have least a work day
        /// </summary>
        public bool IsNotHasWorkDay
        {
            get { return _isNotHasWorkDay; }
            set
            {
                if (_isNotHasWorkDay != value)
                {
                    _isNotHasWorkDay = value;
                    OnPropertyChanged(() => IsNotHasWorkDay);
                }
            }
        } 
        #endregion

        #region Public Methods
        /// <summary>
        /// Set entity value from an other
        /// </summary>
        /// <param name="workWeek">Work week entity</param>
        public void SetEntity(tims_WorkWeek workWeek)
        {
            this.tims_WorkWeek = workWeek;
        }

        /// <summary>
        /// Raise IsNotHasWorkDay to remove error
        /// </summary>
        public void RaiseIsNotHasWorkDay()
        {
            foreach (var dayOfWorkWeekModel in DayOfWorkWeekCollection)
                dayOfWorkWeekModel.RaiseErrors();
            OnPropertyChanged(() => IsNotHasWorkDay);
        }

        public void RaiseErrors()
        {
            OnPropertyChanged(() => WorkIn);
            OnPropertyChanged(() => WorkOut);
            OnPropertyChanged(() => LunchIn);
            OnPropertyChanged(() => LunchOut);
        } 
        #endregion

        #region Private Methods

        private void RaiseAllProperties()
        {
            OnPropertyChanged(() => WorkIn);
            OnPropertyChanged(() => WorkOut);
            OnPropertyChanged(() => LunchIn);
            OnPropertyChanged(() => LunchOut);
            OnPropertyChanged(() => LunchBreakFlag);
            OnPropertyChanged(() => Duration);
            OnPropertyChanged(() => HasAlert);
            Parent.RaiseTotalHours();

            // Forcing the CommandManager to raise the RequerySuggested event
            System.Windows.Input.CommandManager.InvalidateRequerySuggested();
        }

        /// <summary>
        /// Raise when has work changed
        /// </summary>
        private void HasWorkChanged()
        {
            if (HasWork)
            {
                // Get first day of work week
                var dayOfWorkWeek = Parent.DayOfWorkWeekCollection.FirstOrDefault(x => x.HasWork);
                if (dayOfWorkWeek != null)
                {
                    // Copy time of day of first day of work week to current
                    this.WorkIn = this.WorkIn.AddTicks(dayOfWorkWeek.WorkIn.TimeOfDay.Ticks - this.WorkIn.TimeOfDay.Ticks);
                    this.WorkOut = this.WorkOut.AddTicks(dayOfWorkWeek.WorkOut.TimeOfDay.Ticks - this.WorkOut.TimeOfDay.Ticks);
                    this.LunchIn = this.LunchIn.Value.AddTicks(dayOfWorkWeek.LunchIn.Value.TimeOfDay.Ticks - this.LunchIn.Value.TimeOfDay.Ticks);
                    this.LunchOut = this.LunchOut.Value.AddTicks(dayOfWorkWeek.LunchOut.Value.TimeOfDay.Ticks - this.LunchOut.Value.TimeOfDay.Ticks);
                    this.LunchBreakFlag = dayOfWorkWeek.LunchBreakFlag;
                }
            }

            // Check work week have least a work day
            if (Parent.DayOfWorkWeekCollection.Count > 0)
                Parent.IsNotHasWorkDay = Parent.DayOfWorkWeekCollection.Count(x => x.HasWork) == 0;
        }

        /// <summary>
        /// Raise TotalHours Property of parent
        /// </summary>
        private void RaiseTotalHours()
        {
            OnPropertyChanged(() => TotalHours);
        }

        /// <summary>
        /// Get work time in a day
        /// </summary>
        /// <returns></returns>
        private TimeSpan? GetDuration()
        {
            TimeSpan? duration = WorkOut - WorkIn;
            if (LunchBreakFlag && LunchOut.HasValue && LunchIn.HasValue)
                duration = duration - (LunchIn - LunchOut);
            return duration.Value;
        }

        #endregion

        #endregion


        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;
                bool isError = Parent != null && !Parent.IsDeleted && HasWork;
                switch (columnName)
                {
                    case "WorkIn":
                        if (isError && WorkIn > WorkOut)
                            message = "WorkIn is not greater than WorkOut";
                        break;
                    case "WorkOut":
                        if (isError && WorkIn > WorkOut)
                            message = "WorkOut is not smaller than WorkIn";
                        break;
                    case "LunchOut":
                        if (isError && LunchBreakFlag)
                            if (WorkOut < LunchOut || LunchOut < WorkIn)
                                message = "LunchOut is between WorkIn and WorkOut";
                            else if (LunchOut > LunchIn)
                                message = "LunchOut is not greater than LunchIn";
                        break;
                    case "LunchIn":
                        if (isError && LunchBreakFlag)
                            if (WorkOut < LunchIn || LunchIn < WorkIn)
                                message = "LunchIn is between WorkIn and WorkOut";
                            else if (LunchOut > LunchIn)
                                message = "LunchOut is not smaller than LunchIn";
                        break;
                    //case "Duration":
                    //    if (GetDuration().Value.TotalHours < 0)
                    //        message = "Duration is not negative";
                    //    break;
                    case "IsNotHasWorkDay":
                        if (!IsDeleted && IsNotHasWorkDay)
                            message = "Each work week must have least a work day";
                        break;
                }

                if (!string.IsNullOrWhiteSpace(message))
                {
                    return message;
                }
                return null;
            }
        }

        #endregion
    }
}

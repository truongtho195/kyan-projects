//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using CPC.Helper;
using CPC.POS.Database;
using CPC.Toolkit.Base;
using System.Reflection;

namespace CPC.POS.Model
{
    /// <summary>
    /// Model for table base_CustomField
    /// </summary>
    [Serializable]
    public partial class base_CustomFieldModel : ModelBase, IDataErrorInfo, IEditableObject
    {
        #region Constructor

        // Default constructor
        public base_CustomFieldModel()
        {
            this.IsNew = true;
            this.base_CustomField = new base_CustomField();
        }

        // Default constructor that set entity to field
        public base_CustomFieldModel(base_CustomField base_customfield, bool isRaiseProperties = false)
        {
            this.base_CustomField = base_customfield;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public base_CustomField base_CustomField { get; private set; }

        #endregion

        #region Primitive Properties

        protected int _id;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Id</param>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected string _mark;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Mark</param>
        /// </summary>
        public string Mark
        {
            get { return this._mark; }
            set
            {
                if (this._mark != value)
                {
                    this.IsDirty = true;
                    this._mark = value;
                    OnPropertyChanged(() => Mark);
                    PropertyChangedCompleted(() => Mark);
                }
            }
        }

        protected string _fieldName;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the FieldName</param>
        /// </summary>
        public string FieldName
        {
            get { return this._fieldName; }
            set
            {
                if (this._fieldName != value)
                {
                    this.IsDirty = true;
                    this._fieldName = value;
                    OnPropertyChanged(() => FieldName);
                    PropertyChangedCompleted(() => FieldName);
                }
            }
        }

        protected bool _isShow;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the IsShow</param>
        /// </summary>
        public bool IsShow
        {
            get { return this._isShow; }
            set
            {
                if (this._isShow != value)
                {
                    this.IsDirty = true;
                    this._isShow = value;
                    OnPropertyChanged(() => IsShow);
                    PropertyChangedCompleted(() => IsShow);
                }
            }
        }

        protected string _label;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Label</param>
        /// </summary>
        public string Label
        {
            get { return this._label; }
            set
            {
                if (this._label != value)
                {
                    this.IsDirty = true;
                    this._label = value;
                    OnPropertyChanged(() => Label);
                    PropertyChangedCompleted(() => Label);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <param>Public Method</param>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set PropertyModel to Entity</param>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.base_CustomField.Id = this.Id;
            if (this.Mark != null)
                this.base_CustomField.Mark = this.Mark.Trim();
            if (this.FieldName != null)
                this.base_CustomField.FieldName = this.FieldName.Trim();
            this.base_CustomField.IsShow = this.IsShow;
            if (this.Label != null)
                this.base_CustomField.Label = this.Label.Trim();
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set Entity to PropertyModel</param>
        /// </summary
        public void ToModel()
        {
            this._id = this.base_CustomField.Id;
            this._mark = this.base_CustomField.Mark;
            this._fieldName = this.base_CustomField.FieldName;
            this._isShow = this.base_CustomField.IsShow;
            this._label = this.base_CustomField.Label;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set Entity to PropertyModel</param>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.base_CustomField.Id;
            this.Mark = this.base_CustomField.Mark;
            this.FieldName = this.base_CustomField.FieldName;
            this.IsShow = this.base_CustomField.IsShow;
            this.Label = this.base_CustomField.Label;
        }

        #endregion

        #region Custom Code

        #region Fields

        /// <summary>
        /// Holds backup of this object.
        /// </summary>
        private base_CustomFieldModel _backup;

        #endregion

        #region Properties

        #region HasError

        /// <summary>
        /// Gets value indicate that this object has error or not.
        /// </summary>
        public bool HasError
        {
            get
            {
                return !string.IsNullOrWhiteSpace(Error);
            }
        }

        #endregion

        #region Description

        public string Description
        {
            get
            {
                FieldInfo fieldInfo = typeof(MarkType).GetFields().FirstOrDefault(x =>
                x.GetCustomAttributes(typeof(DescriptionAttribute), false).Length > 0 &&
                ((DescriptionAttribute[])x.GetCustomAttributes(typeof(DescriptionAttribute), false))[0].Description == _mark);
                if (fieldInfo != null)
                {
                    return string.Format("{0} {1}", fieldInfo.Name, _fieldName);
                }

                return null;
            }
        }

        #endregion

        #endregion

        #region Override Methods

        protected override void PropertyChangedCompleted(string propertyName)
        {
            base.PropertyChangedCompleted(propertyName);
            switch (propertyName)
            {
                case "Mark":
                case "FieldName":

                    OnPropertyChanged(() => Description);

                    break;
            }
        }

        #endregion

        #region Methods

        #region ShallowClone

        /// <summary>
        /// Creates a shallow copy of this object.
        /// </summary>
        /// <returns>A shallow copy of this object.</returns>
        public base_CustomFieldModel ShallowClone()
        {
            return (base_CustomFieldModel)this.MemberwiseClone();
        }

        #endregion

        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get
            {
                List<string> errors = new List<string>();
                PropertyDescriptorCollection props = TypeDescriptor.GetProperties(this);
                foreach (PropertyDescriptor prop in props)
                {
                    string msg = this[prop.Name];
                    if (!string.IsNullOrWhiteSpace(msg))
                    {
                        errors.Add(msg);
                    }
                }

                return string.Join(Environment.NewLine, errors);
            }
        }

        public string this[string columnName]
        {
            get
            {
                string message = null;

                switch (columnName)
                {
                    case "Label":

                        if (string.IsNullOrWhiteSpace(_label))
                        {
                            message = "Label is required.";
                        }

                        break;
                }

                return message;
            }
        }

        #endregion

        #region IEditableObject Members

        void IEditableObject.BeginEdit()
        {
            if (_backup == null)
            {
                _backup = ShallowClone();
            }
        }

        void IEditableObject.CancelEdit()
        {
            if (_backup != null)
            {
                Id = _backup.Id;
                Mark = _backup.Mark;
                FieldName = _backup.FieldName;
                IsShow = _backup.IsShow;
                Label = _backup.Label;
                IsChecked = _backup.IsChecked;
                IsDeleted = _backup.IsDeleted;
                IsNew = _backup.IsNew;
                IsDirty = _backup.IsDirty;
                _backup = null;
            }
        }

        void IEditableObject.EndEdit()
        {
            if (_backup != null)
            {
                _backup = null;
            }
        }

        #endregion

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using CPC.Helper;
using CPC.POS.Database;
using CPC.Toolkit.Base;

namespace CPC.POS.Model
{
    /// <summary>
    /// Model for table tims_WorkSchedule
    /// </summary>
    [Serializable]
    public partial class tims_WorkScheduleModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public tims_WorkScheduleModel()
        {
            this.IsNew = true;
            this.tims_WorkSchedule = new tims_WorkSchedule();
        }

        // Default constructor that set entity to field
        public tims_WorkScheduleModel(tims_WorkSchedule tims_workschedule, bool isRaiseProperties = false)
        {
            this.tims_WorkSchedule = tims_workschedule;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public tims_WorkSchedule tims_WorkSchedule { get; private set; }

        #endregion

        #region Primitive Properties

        protected int _id;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Id</param>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected string _workScheduleName;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the WorkScheduleName</param>
        /// </summary>
        public string WorkScheduleName
        {
            get { return this._workScheduleName; }
            set
            {
                if (this._workScheduleName != value)
                {
                    this.IsDirty = true;
                    this._workScheduleName = value;
                    OnPropertyChanged(() => WorkScheduleName);
                    PropertyChangedCompleted(() => WorkScheduleName);
                }
            }
        }

        protected int _workScheduleType;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the WorkScheduleType</param>
        /// </summary>
        public int WorkScheduleType
        {
            get { return this._workScheduleType; }
            set
            {
                if (this._workScheduleType != value)
                {
                    this.IsDirty = true;
                    this._workScheduleType = value;
                    OnPropertyChanged(() => WorkScheduleType);
                    PropertyChangedCompleted(() => WorkScheduleType);
                }
            }
        }

        protected int _rotate;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Rotate</param>
        /// </summary>
        public int Rotate
        {
            get { return this._rotate; }
            set
            {
                if (this._rotate != value)
                {
                    this.IsDirty = true;
                    this._rotate = value;
                    OnPropertyChanged(() => Rotate);
                    PropertyChangedCompleted(() => Rotate);
                }
            }
        }

        protected int _status;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Status</param>
        /// </summary>
        public int Status
        {
            get { return this._status; }
            set
            {
                if (this._status != value)
                {
                    this.IsDirty = true;
                    this._status = value;
                    OnPropertyChanged(() => Status);
                    PropertyChangedCompleted(() => Status);
                }
            }
        }

        protected System.DateTime _dateCreated;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the DateCreated</param>
        /// </summary>
        public System.DateTime DateCreated
        {
            get { return this._dateCreated; }
            set
            {
                if (this._dateCreated != value)
                {
                    this.IsDirty = true;
                    this._dateCreated = value;
                    OnPropertyChanged(() => DateCreated);
                    PropertyChangedCompleted(() => DateCreated);
                }
            }
        }

        protected string _userCreated;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the UserCreated</param>
        /// </summary>
        public string UserCreated
        {
            get { return this._userCreated; }
            set
            {
                if (this._userCreated != value)
                {
                    this.IsDirty = true;
                    this._userCreated = value;
                    OnPropertyChanged(() => UserCreated);
                    PropertyChangedCompleted(() => UserCreated);
                }
            }
        }

        protected string _userUpdated;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the UserUpdated</param>
        /// </summary>
        public string UserUpdated
        {
            get { return this._userUpdated; }
            set
            {
                if (this._userUpdated != value)
                {
                    this.IsDirty = true;
                    this._userUpdated = value;
                    OnPropertyChanged(() => UserUpdated);
                    PropertyChangedCompleted(() => UserUpdated);
                }
            }
        }

        protected Nullable<System.DateTime> _dateUpdated;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the DateUpdated</param>
        /// </summary>
        public Nullable<System.DateTime> DateUpdated
        {
            get { return this._dateUpdated; }
            set
            {
                if (this._dateUpdated != value)
                {
                    this.IsDirty = true;
                    this._dateUpdated = value;
                    OnPropertyChanged(() => DateUpdated);
                    PropertyChangedCompleted(() => DateUpdated);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <param>Public Method</param>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set PropertyModel to Entity</param>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.tims_WorkSchedule.Id = this.Id;
            if (this.WorkScheduleName != null)
                this.tims_WorkSchedule.WorkScheduleName = this.WorkScheduleName.Trim();
            this.tims_WorkSchedule.WorkScheduleType = this.WorkScheduleType;
            this.tims_WorkSchedule.Rotate = this.Rotate;
            this.tims_WorkSchedule.Status = this.Status;
            this.tims_WorkSchedule.DateCreated = this.DateCreated;
            if (this.UserCreated != null)
                this.tims_WorkSchedule.UserCreated = this.UserCreated.Trim();
            if (this.UserUpdated != null)
                this.tims_WorkSchedule.UserUpdated = this.UserUpdated.Trim();
            this.tims_WorkSchedule.DateUpdated = this.DateUpdated;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set Entity to PropertyModel</param>
        /// </summary
        public void ToModel()
        {
            this._id = this.tims_WorkSchedule.Id;
            this._workScheduleName = this.tims_WorkSchedule.WorkScheduleName;
            this._workScheduleType = this.tims_WorkSchedule.WorkScheduleType;
            this._rotate = this.tims_WorkSchedule.Rotate;
            this._status = this.tims_WorkSchedule.Status;
            this._dateCreated = this.tims_WorkSchedule.DateCreated;
            this._userCreated = this.tims_WorkSchedule.UserCreated;
            this._userUpdated = this.tims_WorkSchedule.UserUpdated;
            this._dateUpdated = this.tims_WorkSchedule.DateUpdated;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set Entity to PropertyModel</param>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.tims_WorkSchedule.Id;
            this.WorkScheduleName = this.tims_WorkSchedule.WorkScheduleName;
            this.WorkScheduleType = this.tims_WorkSchedule.WorkScheduleType;
            this.Rotate = this.tims_WorkSchedule.Rotate;
            this.Status = this.tims_WorkSchedule.Status;
            this.DateCreated = this.tims_WorkSchedule.DateCreated;
            this.UserCreated = this.tims_WorkSchedule.UserCreated;
            this.UserUpdated = this.tims_WorkSchedule.UserUpdated;
            this.DateUpdated = this.tims_WorkSchedule.DateUpdated;
        }

        #endregion

        #region Custom Code

        #region Properties

        private ObservableCollection<tims_WorkWeekModel> _workWeekCollection;
        /// <summary>
        /// Store work week collection
        /// </summary>
        public ObservableCollection<tims_WorkWeekModel> WorkWeekCollection
        {
            get { return _workWeekCollection; }
            set
            {
                if (_workWeekCollection != value)
                {
                    _workWeekCollection = value;
                    OnPropertyChanged(() => WorkWeekCollection);
                }
            }
        }

        private CollectionBase<base_GuestModel> _employeeCollection;
        /// <summary>
        /// Gets or sets the EmployeeCollection.
        /// </summary>
        public CollectionBase<base_GuestModel> EmployeeCollection
        {
            get { return _employeeCollection; }
            set
            {
                if (_employeeCollection != value)
                {
                    _employeeCollection = value;
                    OnPropertyChanged(() => EmployeeCollection);
                }
            }
        }

        private tims_WorkWeekModel _selectedWorkWeek;
        /// <summary>
        /// Gets or sets the SelectedWorkWeek.
        /// </summary>
        public tims_WorkWeekModel SelectedWorkWeek
        {
            get { return _selectedWorkWeek; }
            set
            {
                if (_selectedWorkWeek != value)
                {
                    _selectedWorkWeek = value;
                    OnPropertyChanged(() => SelectedWorkWeek);
                }
            }
        }

        private int _numberOfEmployees;
        /// <summary>
        /// Gets or sets the NumberOfEmployees.
        /// </summary>
        public int NumberOfEmployees
        {
            get { return _numberOfEmployees; }
            set
            {
                if (_numberOfEmployees != value)
                {
                    _numberOfEmployees = value;
                    OnPropertyChanged(() => NumberOfEmployees);
                    OnPropertyChanged(() => HasEmployee);
                }
            }
        }

        /// <summary>
        /// Check number of employee assigned this work schedule
        /// </summary>
        public bool HasEmployee
        {
            get
            {
                bool result = NumberOfEmployees > 0;
                if (!result)
                    IsChecked = false;
                return result;
            }
        }

        /// <summary>
        /// Get work schedule type name
        /// </summary>
        public string WorkScheduleTypeName
        {
            get
            {
                //return Enum.GetNames(typeof(ScheduleTypes)).ElementAt(WorkScheduleType);
                //return Enum.GetName(typeof(ScheduleTypes), WorkScheduleType);
                return Common.ScheduleTypes.Single(x => x.Value == WorkScheduleType).Text;
            }
        }

        /// <summary>
        /// Get status name
        /// </summary>
        public string StatusName
        {
            get
            {
                return Common.ScheduleStatuses.Single(x => x.Value == Status).Text;
            }
        }

        /// <summary>
        /// Gets the MinRotation.
        /// </summary>
        public int MinRotation
        {
            get
            {
                return WorkScheduleType.Equals((int)ScheduleTypes.Rotate) ? 2 : 1;
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Add or remove work week upon work schedule type changed
        /// </summary>
        private void WorkScheduleTypeChanged()
        {
            if (WorkWeekCollection != null && WorkWeekCollection.Count > 0)
            {
                // If work schedule type is Fixed or Variable
                if (!WorkScheduleType.Is(ScheduleTypes.Rotate))
                {
                    // Remove work week
                    for (int i = WorkWeekCollection.Count - 1; i > 0; i--)
                    {
                        //WorkWeekCollection.RemoveAt(i);
                        WorkWeekCollection[i].IsDeleted = true;
                        WorkWeekCollection[i].RaiseIsNotHasWorkDay();
                    }
                    SelectedWorkWeek = WorkWeekCollection.FirstOrDefault();
                }
                else // Work schedule type is Rotation
                {
                    // If work schedule type is Rotate, add a new work week
                    if (WorkWeekCollection.Count(x => x.IsDeleted) > 0)
                        foreach (var workWeekModel in WorkWeekCollection.Where(x => x.IsDeleted && x.Week <= Rotate))
                        {
                            workWeekModel.IsDeleted = false;
                            workWeekModel.RaiseIsNotHasWorkDay();
                        }
                    else
                        AddWorkWeek(2);
                }
            }
        }

        /// <summary>
        /// Add or remove work week upon rotate changed
        /// </summary>
        private void RotateChanged()
        {
            if (WorkWeekCollection != null)
            {
                int numOfWorkWeek = WorkWeekCollection.Count(x => !x.IsDeleted);
                int delta = Math.Abs(numOfWorkWeek - Rotate);
                int indexWeek = numOfWorkWeek - 1;
                if (numOfWorkWeek < Rotate)
                    // Rotate increasement
                    switch (numOfWorkWeek)
                    {
                        case 2:
                        case 3:
                            for (int i = 1; i <= delta; i++)
                            {
                                if (++indexWeek == WorkWeekCollection.Count)
                                    AddWorkWeek(indexWeek + 1);
                                else
                                {
                                    tims_WorkWeekModel workWeekModel = WorkWeekCollection[indexWeek];
                                    workWeekModel.IsDeleted = false;
                                    workWeekModel.RaiseIsNotHasWorkDay();
                                }
                            }
                            break;
                    }
                else
                    // Rotate decreasement
                    switch (numOfWorkWeek)
                    {
                        case 3:
                        case 4:
                            for (int i = 0; i < delta; i++)
                            {
                                //WorkWeekCollection.RemoveAt(week--);
                                tims_WorkWeekModel workWeekModel = WorkWeekCollection[indexWeek--];
                                workWeekModel.IsDeleted = true;
                                workWeekModel.RaiseIsNotHasWorkDay();
                            }
                            SelectedWorkWeek = WorkWeekCollection[indexWeek];
                            break;
                    }
            }
        }

        /// <summary>
        /// Add default a work week
        /// </summary>
        /// <param name="week"></param>
        public void AddWorkWeek(int week)
        {
            tims_WorkWeekModel workWeekModel = new tims_WorkWeekModel { Week = week };
            workWeekModel.DayOfWorkWeekCollection = new CollectionBase<tims_WorkWeekModel>();
            DateTime today = DateTimeExt.Today;
            int dayOfWeek = (int)today.DayOfWeek;
            for (int i = 0; i < 7; i++)
            {
                tims_WorkWeekModel dayOfWorkWeekModel = new tims_WorkWeekModel();
                dayOfWorkWeekModel.WorkScheduleId = this.Id;
                dayOfWorkWeekModel.Parent = workWeekModel;
                if (i == 0)
                    dayOfWorkWeekModel.HasWork = true;
                dayOfWorkWeekModel.Week = week;
                dayOfWorkWeekModel.Day = i + 1;
                dayOfWorkWeekModel.WorkIn = today.AddDays(i + 1 - dayOfWeek).AddHours(9);
                dayOfWorkWeekModel.WorkOut = dayOfWorkWeekModel.WorkIn.AddHours(9);
                dayOfWorkWeekModel.LunchBreakFlag = true;
                dayOfWorkWeekModel.LunchOut = dayOfWorkWeekModel.WorkIn.AddHours(3);
                dayOfWorkWeekModel.LunchIn = dayOfWorkWeekModel.WorkIn.AddHours(4);
                workWeekModel.DayOfWorkWeekCollection.Add(dayOfWorkWeekModel);
            }
            WorkWeekCollection.Add(workWeekModel);
        }

        /// <summary>
        /// Map day of work week model to entity
        /// </summary>
        public void WorkWeekToEntity()
        {
            foreach (var workWeekModel in WorkWeekCollection.ToList())
            {
                if (!workWeekModel.IsDeleted)
                    foreach (var dayOfWorkWeekModel in workWeekModel.DayOfWorkWeekCollection.Where(x => x.HasWork))
                    {
                        dayOfWorkWeekModel.ToEntity();
                        this.tims_WorkSchedule.tims_WorkWeek.Add(dayOfWorkWeekModel.tims_WorkWeek);
                    }
                else if (workWeekModel.Week > Rotate)
                    // Remove temp work weeks
                    WorkWeekCollection.Remove(workWeekModel);
            }
        }

        /// <summary>
        /// Map employee schedule model to entity
        /// </summary>
        public void EmployeeScheduleToEntity()
        {
            foreach (var employeeModel in EmployeeCollection)
            {
                employeeModel.EmployeeScheduleModel.ToEntity();
                this.tims_WorkSchedule.base_GuestSchedule.Add(employeeModel.EmployeeScheduleModel.base_GuestSchedule);
                if (IsNew)
                {
                    employeeModel.EndUpdate();
                    employeeModel.EmployeeScheduleModel.EndUpdate();
                }
            }
        }

        /// <summary>
        /// Update id for model and sub model
        /// Use in insert a new work schedule
        /// </summary>
        public void UpdateIDToModel()
        {
            // First update id for work schedule model
            this.Id = this.tims_WorkSchedule.Id;

            // Then update id for work week model
            foreach (var workWeekModel in WorkWeekCollection)
            {
                foreach (var dayOfWorkWeekModel in workWeekModel.DayOfWorkWeekCollection)
                {
                    if (dayOfWorkWeekModel.HasWork)
                    {
                        dayOfWorkWeekModel.Id = dayOfWorkWeekModel.tims_WorkWeek.Id;
                        dayOfWorkWeekModel.WorkScheduleId = this.Id;
                    }
                    dayOfWorkWeekModel.EndUpdate();
                }
                workWeekModel.EndUpdate();
            }
        }

        /// <summary>
        /// Set IsNew & IsDirty = false for work week
        /// </summary>
        public void WorkWeekEndUpdate()
        {
            foreach (var workWeekModel in WorkWeekCollection)
            {
                foreach (var dayOfWorkWeekModel in workWeekModel.DayOfWorkWeekCollection)
                    dayOfWorkWeekModel.EndUpdate();
                workWeekModel.EndUpdate();
            }
        }

        /// <summary>
        /// Raise work schedule type name after save
        /// </summary>
        public void RaiseWorkScheduleTypeName()
        {
            OnPropertyChanged(() => WorkScheduleTypeName);
        }

        ///// <summary>
        ///// Raise status name after save
        ///// </summary>
        //public void RaiseStatusName()
        //{
        //    OnPropertyChanged(() => StatusName);
        //}

        /// <summary>
        /// Create New Entity
        /// </summary>
        public void SetEntity(tims_WorkSchedule workSchedule)
        {
            this.tims_WorkSchedule = workSchedule;
        }

        public void WorkWeekToEntityExt()
        {
            foreach (var workWeekModel in WorkWeekCollection)
                foreach (var dayOfWorkWeekModel in workWeekModel.DayOfWorkWeekCollection.Where(x => x.HasWork))
                {
                    dayOfWorkWeekModel.SetEntity(new tims_WorkWeek());
                    dayOfWorkWeekModel.ToEntity();
                    this.tims_WorkSchedule.tims_WorkWeek.Add(dayOfWorkWeekModel.tims_WorkWeek);
                }
        }

        #endregion

        #region Override Methods

        protected override void PropertyChangedCompleted(string propertyName)
        {
            switch (propertyName)
            {
                case "Rotate":
                    RotateChanged();
                    break;
                case "WorkScheduleType":
                    WorkScheduleTypeChanged();
                    if (WorkScheduleType.Is(ScheduleTypes.Rotate))
                    {
                        Rotate = Rotate > 2 ? Rotate : 2;
                    }
                    break;
                case "Status":
                    OnPropertyChanged(() => StatusName);
                    break;
                default:
                    break;
            }
        }

        #endregion

        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;

                switch (columnName)
                {
                    case "Id":
                        break;
                    case "WorkScheduleName":
                        if (string.IsNullOrWhiteSpace(WorkScheduleName))
                            message = "WorkScheduleName is required";
                        break;
                    case "WorkScheduleType":
                        break;
                    case "Rotate":
                        break;
                    case "Status":
                        break;
                    case "CreatedDate":
                        break;
                    case "CreatedById":
                        break;
                    case "ModifiedDate":
                        break;
                    case "ModifiedById":
                        break;
                }

                if (!string.IsNullOrWhiteSpace(message))
                    return message;
                return null;
            }
        }

        #endregion
    }
}

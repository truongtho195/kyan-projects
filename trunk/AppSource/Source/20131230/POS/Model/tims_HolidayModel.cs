//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using CPC.Helper;
using CPC.POS.Database;
using CPC.Toolkit.Base;

namespace CPC.POS.Model
{
    /// <summary>
    /// Model for table tims_Holiday
    /// </summary>
    [Serializable]
    public partial class tims_HolidayModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public tims_HolidayModel()
        {
            this.IsNew = true;
            this.tims_Holiday = new tims_Holiday();
        }

        // Default constructor that set entity to field
        public tims_HolidayModel(tims_Holiday tims_holiday, bool isRaiseProperties = false)
        {
            this.tims_Holiday = tims_holiday;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public tims_Holiday tims_Holiday { get; private set; }

        #endregion

        #region Primitive Properties

        protected int _id;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Id</param>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected string _title;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Title</param>
        /// </summary>
        public string Title
        {
            get { return this._title; }
            set
            {
                if (this._title != value)
                {
                    this.IsDirty = true;
                    this._title = value;
                    OnPropertyChanged(() => Title);
                    PropertyChangedCompleted(() => Title);
                }
            }
        }

        protected int _holidayOption;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the HolidayOption</param>
        /// </summary>
        public int HolidayOption
        {
            get { return this._holidayOption; }
            set
            {
                if (this._holidayOption != value)
                {
                    this.IsDirty = true;
                    this._holidayOption = value;
                    OnPropertyChanged(() => HolidayOption);
                    PropertyChangedCompleted(() => HolidayOption);
                }
            }
        }

        protected Nullable<System.DateTime> _fromDate;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the FromDate</param>
        /// </summary>
        public Nullable<System.DateTime> FromDate
        {
            get { return this._fromDate; }
            set
            {
                if (this._fromDate != value)
                {
                    this.IsDirty = true;
                    this._fromDate = value;
                    OnPropertyChanged(() => FromDate);
                    PropertyChangedCompleted(() => FromDate);
                }
            }
        }

        protected Nullable<System.DateTime> _toDate;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the ToDate</param>
        /// </summary>
        public Nullable<System.DateTime> ToDate
        {
            get { return this._toDate; }
            set
            {
                if (this._toDate != value)
                {
                    this.IsDirty = true;
                    this._toDate = value;
                    OnPropertyChanged(() => ToDate);
                    PropertyChangedCompleted(() => ToDate);
                }
            }
        }

        protected Nullable<int> _month;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Month</param>
        /// </summary>
        public Nullable<int> Month
        {
            get { return this._month; }
            set
            {
                if (this._month != value)
                {
                    this.IsDirty = true;
                    this._month = value;
                    OnPropertyChanged(() => Month);
                    PropertyChangedCompleted(() => Month);
                }
            }
        }

        protected Nullable<int> _day;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the Day</param>
        /// </summary>
        public Nullable<int> Day
        {
            get { return this._day; }
            set
            {
                if (this._day != value)
                {
                    this.IsDirty = true;
                    this._day = value;
                    OnPropertyChanged(() => Day);
                    PropertyChangedCompleted(() => Day);
                }
            }
        }

        protected Nullable<int> _dayOfWeek;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the DayOfWeek</param>
        /// </summary>
        public Nullable<int> DayOfWeek
        {
            get { return this._dayOfWeek; }
            set
            {
                if (this._dayOfWeek != value)
                {
                    this.IsDirty = true;
                    this._dayOfWeek = value;
                    OnPropertyChanged(() => DayOfWeek);
                    PropertyChangedCompleted(() => DayOfWeek);
                }
            }
        }

        protected Nullable<int> _weekOfMonth;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the WeekOfMonth</param>
        /// </summary>
        public Nullable<int> WeekOfMonth
        {
            get { return this._weekOfMonth; }
            set
            {
                if (this._weekOfMonth != value)
                {
                    this.IsDirty = true;
                    this._weekOfMonth = value;
                    OnPropertyChanged(() => WeekOfMonth);
                    PropertyChangedCompleted(() => WeekOfMonth);
                }
            }
        }

        protected bool _activeFlag;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the ActiveFlag</param>
        /// </summary>
        public bool ActiveFlag
        {
            get { return this._activeFlag; }
            set
            {
                if (this._activeFlag != value)
                {
                    this.IsDirty = true;
                    this._activeFlag = value;
                    OnPropertyChanged(() => ActiveFlag);
                    PropertyChangedCompleted(() => ActiveFlag);
                }
            }
        }

        protected System.DateTime _dateCreated;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the DateCreated</param>
        /// </summary>
        public System.DateTime DateCreated
        {
            get { return this._dateCreated; }
            set
            {
                if (this._dateCreated != value)
                {
                    this.IsDirty = true;
                    this._dateCreated = value;
                    OnPropertyChanged(() => DateCreated);
                    PropertyChangedCompleted(() => DateCreated);
                }
            }
        }

        protected Nullable<System.DateTime> _dateUpdated;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the DateUpdated</param>
        /// </summary>
        public Nullable<System.DateTime> DateUpdated
        {
            get { return this._dateUpdated; }
            set
            {
                if (this._dateUpdated != value)
                {
                    this.IsDirty = true;
                    this._dateUpdated = value;
                    OnPropertyChanged(() => DateUpdated);
                    PropertyChangedCompleted(() => DateUpdated);
                }
            }
        }

        protected string _userCreated;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the UserCreated</param>
        /// </summary>
        public string UserCreated
        {
            get { return this._userCreated; }
            set
            {
                if (this._userCreated != value)
                {
                    this.IsDirty = true;
                    this._userCreated = value;
                    OnPropertyChanged(() => UserCreated);
                    PropertyChangedCompleted(() => UserCreated);
                }
            }
        }

        protected string _userUpdated;
        /// <summary>
        /// Property Model
        /// <param>Gets or sets the UserUpdated</param>
        /// </summary>
        public string UserUpdated
        {
            get { return this._userUpdated; }
            set
            {
                if (this._userUpdated != value)
                {
                    this.IsDirty = true;
                    this._userUpdated = value;
                    OnPropertyChanged(() => UserUpdated);
                    PropertyChangedCompleted(() => UserUpdated);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <param>Public Method</param>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set PropertyModel to Entity</param>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.tims_Holiday.Id = this.Id;
            if (this.Title != null)
                this.tims_Holiday.Title = this.Title.Trim();
            this.tims_Holiday.HolidayOption = this.HolidayOption;
            this.tims_Holiday.FromDate = this.FromDate;
            this.tims_Holiday.ToDate = this.ToDate;
            this.tims_Holiday.Month = this.Month;
            this.tims_Holiday.Day = this.Day;
            this.tims_Holiday.DayOfWeek = this.DayOfWeek;
            this.tims_Holiday.WeekOfMonth = this.WeekOfMonth;
            this.tims_Holiday.ActiveFlag = this.ActiveFlag;
            this.tims_Holiday.DateCreated = this.DateCreated;
            this.tims_Holiday.DateUpdated = this.DateUpdated;
            if (this.UserCreated != null)
                this.tims_Holiday.UserCreated = this.UserCreated.Trim();
            if (this.UserUpdated != null)
                this.tims_Holiday.UserUpdated = this.UserUpdated.Trim();
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set Entity to PropertyModel</param>
        /// </summary
        public void ToModel()
        {
            this._id = this.tims_Holiday.Id;
            this._title = this.tims_Holiday.Title;
            this._holidayOption = this.tims_Holiday.HolidayOption;
            this._fromDate = this.tims_Holiday.FromDate;
            this._toDate = this.tims_Holiday.ToDate;
            this._month = this.tims_Holiday.Month;
            this._day = this.tims_Holiday.Day;
            this._dayOfWeek = this.tims_Holiday.DayOfWeek;
            this._weekOfMonth = this.tims_Holiday.WeekOfMonth;
            this._activeFlag = this.tims_Holiday.ActiveFlag;
            this._dateCreated = this.tims_Holiday.DateCreated;
            this._dateUpdated = this.tims_Holiday.DateUpdated;
            this._userCreated = this.tims_Holiday.UserCreated;
            this._userUpdated = this.tims_Holiday.UserUpdated;
        }

        /// <summary>
        /// Public Method
        /// <param>Method for set Entity to PropertyModel</param>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.tims_Holiday.Id;
            this.Title = this.tims_Holiday.Title;
            this.HolidayOption = this.tims_Holiday.HolidayOption;
            this.FromDate = this.tims_Holiday.FromDate;
            this.ToDate = this.tims_Holiday.ToDate;
            this.Month = this.tims_Holiday.Month;
            this.Day = this.tims_Holiday.Day;
            this.DayOfWeek = this.tims_Holiday.DayOfWeek;
            this.WeekOfMonth = this.tims_Holiday.WeekOfMonth;
            this.ActiveFlag = this.tims_Holiday.ActiveFlag;
            this.DateCreated = this.tims_Holiday.DateCreated;
            this.DateUpdated = this.tims_Holiday.DateUpdated;
            this.UserCreated = this.tims_Holiday.UserCreated;
            this.UserUpdated = this.tims_Holiday.UserUpdated;
        }

        #endregion

        #region Custom Code

        #region Properties

        protected string _date;
        /// <summary>
        ///Property Model
        ///<para> Gets or sets the Date.</para>
        /// </summary>
        public string Date
        {
            get
            {
                switch (HolidayOption)
                {
                    case 0:
                        if (Month != null && Month > 0 && Day != null && Day > 0)
                            _date = (Month <= 9 ? "0" + Month.ToString() : Month.ToString())
                                    + "/" + (Day <= 9 ? "0" + Day.ToString() : Day.ToString())
                                    + "/" + DateTimeExt.Today.Year.ToString();
                        else
                            _date = string.Empty;
                        break;
                    case 1:
                        if (WeekOfMonth != null && WeekOfMonth > 0 && DayOfWeek != null && DayOfWeek > 0 && Month1 != null && Month1 > 0)
                            _date = "On " + GetWeeksOfMonth(WeekOfMonth) + " " + GetDaysOfWeek(DayOfWeek) + " of " + GetMonths(Month1);
                        else
                            _date = string.Empty;
                        break;
                    case 2:
                        if (FromDate != null && ToDate != null)
                            if (FromDate.Equals(ToDate))
                                _date = String.Format("{0:MM/dd/yyyy}", FromDate);
                            else
                                _date = String.Format("{0:MM/dd/yyyy} - {1:MM/dd/yyyy}", FromDate, ToDate);
                        else if (FromDate != null && ToDate == null)
                        {
                            _date = String.Format("{0:MM/dd/yyyy}", FromDate);
                        }
                        else
                            _date = string.Empty;
                        break;
                    default:
                        _date = string.Empty;
                        break;
                }
                return this._date;
            }
            set
            {
                if (this._date != value)
                {
                    this.IsDirty = true;
                    this._date = value;
                    OnPropertyChanged(() => Date);
                }
            }
        }

        private Nullable<int> _month1;
        /// <summary>
        /// Gets or sets the Month1.
        /// </summary>
        public Nullable<int> Month1
        {
            get { return _month1; }
            set
            {
                if (_month1 != value)
                {
                    this.IsDirty = true;
                    _month1 = value;
                    OnPropertyChanged(() => Month1);
                }
            }
        }

        [NonSerialized]
        private ComboItem _weekOfMonthItem;
        /// <summary>
        /// Gets or sets the WeekOfMonthItem.
        /// </summary>
        public ComboItem WeekOfMonthItem
        {
            get { return _weekOfMonthItem; }
            set
            {
                if (_weekOfMonthItem != value)
                {
                    _weekOfMonthItem = value;
                    OnPropertyChanged(() => WeekOfMonthItem);
                }
            }
        }

        [NonSerialized]
        private ComboItem _dayOfWeekItem;
        /// <summary>
        /// Gets or sets the DayOfWeekItem.
        /// </summary>
        public ComboItem DayOfWeekItem
        {
            get { return _dayOfWeekItem; }
            set
            {
                if (_dayOfWeekItem != value)
                {
                    _dayOfWeekItem = value;
                    OnPropertyChanged(() => DayOfWeekItem);
                }
            }
        }

        [NonSerialized]
        private ComboItem _monthItem;
        /// <summary>
        /// Gets or sets the MonthItem.
        /// </summary>
        public ComboItem MonthItem
        {
            get { return _monthItem; }
            set
            {
                if (_monthItem != value)
                {
                    _monthItem = value;
                    OnPropertyChanged(() => MonthItem);
                }
            }
        }

        [NonSerialized]
        private ComboItem _month1Item;
        /// <summary>
        /// Gets or sets the Month1Item.
        /// </summary>
        public ComboItem Month1Item
        {
            get { return _month1Item; }
            set
            {
                if (_month1Item != value)
                {
                    _month1Item = value;
                    OnPropertyChanged(() => Month1Item);
                }
            }
        }

        #endregion

        #region Methods

        public string GetWeeksOfMonth(int? week)
        {
            string WeeksOfMonth = string.Empty;

            switch (week)
            {
                case 1:
                    WeeksOfMonth = "first";
                    break;
                case 2:
                    WeeksOfMonth = "second";
                    break;
                case 3:
                    WeeksOfMonth = "third";
                    break;
                case 4:
                    WeeksOfMonth = "fourth";
                    break;
                case 5:
                    WeeksOfMonth = "last";
                    break;
            }

            return WeeksOfMonth;
        }

        public string GetMonths(int? month)
        {
            string months = string.Empty;
            switch (month)
            {
                case 1:
                    months = "January";
                    break;
                case 2:
                    months = "February";
                    break;
                case 3:
                    months = "March";
                    break;
                case 4:
                    months = "April";
                    break;
                case 5:
                    months = "May";
                    break;
                case 6:
                    months = "June";
                    break;
                case 7:
                    months = "July";
                    break;
                case 8:
                    months = "August";
                    break;
                case 9:
                    months = "September";
                    break;
                case 10:
                    months = "October";
                    break;
                case 11:
                    months = "November";
                    break;
                case 12:
                    months = "December";
                    break;
            }
            return months;
        }

        public string GetDaysOfWeek(int? day)
        {
            string daysOfWeek = string.Empty;
            switch (day)
            {
                case 1:
                    daysOfWeek = "Day";
                    break;
                case 2:
                    daysOfWeek = "WeekDay";
                    break;
                case 3:
                    daysOfWeek = "Weekend Day";
                    break;
                case 4:
                    daysOfWeek = "Sunday";
                    break;
                case 5:
                    daysOfWeek = "Monday";
                    break;
                case 6:
                    daysOfWeek = "Tuesday";
                    break;
                case 7:
                    daysOfWeek = "Wednesday";
                    break;
                case 8:
                    daysOfWeek = "Thursday";
                    break;
                case 9:
                    daysOfWeek = "Friday";
                    break;
                case 10:
                    daysOfWeek = "Saturday";
                    break;
            }
            return daysOfWeek;
        }

        #endregion

        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;

                switch (columnName)
                {
                    case "Id":
                        break;
                    case "Title":
                        if (string.IsNullOrWhiteSpace(Title))
                            message = "Title is required";


                        break;
                    case "Description":
                        break;
                    case "HolidayOption":
                        OnPropertyChanged(() => Month);
                        OnPropertyChanged(() => Day);
                        OnPropertyChanged(() => FromDate);
                        OnPropertyChanged(() => ToDate);
                        OnPropertyChanged(() => WeekOfMonth);
                        OnPropertyChanged(() => DayOfWeek);
                        OnPropertyChanged(() => Month1);
                        break;
                    case "FromDate":
                        if (HolidayOption == 2)
                        {
                            if (!FromDate.HasValue)
                            {
                                message = "From Date is required";
                            }
                            if (FromDate.HasValue && ToDate.HasValue && FromDate.Value > ToDate.Value)
                            {
                                message = "From Date must be less than To Date";
                            }
                            OnPropertyChanged(() => Date);
                        }
                        break;
                    case "ToDate":
                        if (HolidayOption == 2)
                        {
                            if (!ToDate.HasValue)
                            {
                                message = "To Date is required";
                            }
                            if (FromDate.HasValue && ToDate.HasValue && FromDate.Value > ToDate.Value)
                            {
                                message = "To Date must be greater than From Date";
                            }
                            OnPropertyChanged(() => Date);
                        }
                        break;
                    case "Month":
                        if (HolidayOption == 0)
                        {
                            OnPropertyChanged(() => Day);
                            if (null == Month || Month <= 0)
                            {
                                message = "Month is required";
                            }
                        }
                        break;
                    case "Month1":
                        if (HolidayOption == 1)
                        {
                            OnPropertyChanged(() => Date);
                            if (null == Month1 || Month1 <= 0)
                            {
                                message = "Month is required";
                            }
                        }
                        break;
                    case "Day":
                        if (HolidayOption == 0)
                        {
                            OnPropertyChanged(() => Date);

                            if (null == Day || Day <= 0)
                                message = "Day must be less than 31";
                            //In one year, the month has 30 days 4,6,9,11 but the 1,3,5,7,8,10,12 month is 31 days. Particularly in February may have 28 or 29 days
                            if (Month == 4 || Month == 6 || Month == 9 || Month == 11)
                            {
                                if (Day > 30)
                                {
                                    message = "Day must be less than 30";
                                }
                            }
                            else if (Month == 1 || Month == 3 || Month == 5 || Month == 7 || Month == 8 || Month == 10 || Month == 12)
                            {
                                if (Day > 31)
                                {
                                    message = "Day must be less than 30";
                                }
                            }
                            else if (Month == 2)
                            {
                                int year = DateTimeExt.Now.Year;
                                if (DateTime.IsLeapYear(year))
                                {
                                    if (Day > 29)
                                    {
                                        message = "Day must be less than 29";
                                    }
                                }
                                else
                                {
                                    if (Day > 28)
                                    {
                                        message = "Day must be less than 28";
                                    }
                                }
                            }
                        }
                        break;
                    case "DayOfWeek":
                        if (HolidayOption == 1)
                        {
                            OnPropertyChanged(() => Date);
                            if (null == DayOfWeek || DayOfWeek <= 0)
                            {
                                message = "Day Of Week is required";
                            }
                        }
                        break;
                    case "WeekOfMonth":
                        if (HolidayOption == 1)
                        {
                            OnPropertyChanged(() => Date);
                            if (null == WeekOfMonth || WeekOfMonth <= 0)
                            {
                                message = "Week Of Month is required";
                            }
                        }
                        break;
                    case "ActiveFlag":
                        break;
                    case "CreatedDate":
                        break;
                    case "CreatedById":
                        break;
                    case "ModifiedDate":
                        break;
                    case "ModifiedByID":
                        break;
                }

                if (!string.IsNullOrWhiteSpace(message))
                    return message;
                return null;
            }
        }

        #endregion
    }
}

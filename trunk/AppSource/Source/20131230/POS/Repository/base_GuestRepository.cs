//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq;
using System.Linq.Expressions;
using CPC.POS.Database;

namespace CPC.POS.Repository
{
    /// <summary>
    /// Repository for table base_Guest 
    /// </summary>
    public partial class base_GuestRepository
    {
        #region Auto Generate Code

        #region Constructors

        // Default constructor
        public base_GuestRepository()
        {
        }

        #endregion

        #region Basic C.R.U.D. Operations

        /// <summary>
        /// Add new base_Guest.
        /// </summary>
        /// <param name="base_Guest">base_Guest to add.</param>
        /// <returns>base_Guest have been added.</returns>
        public base_Guest Add(base_Guest base_Guest)
        {
            UnitOfWork.Add<base_Guest>(base_Guest);
            return base_Guest;
        }

        /// <summary>
        /// Adds a sequence of new base_Guest.
        /// </summary>
        /// <param name="base_Guest">Sequence of new base_Guest to add.</param>
        /// <returns>Sequence of new base_Guest have been added.</returns>
        public IEnumerable<base_Guest> Add(IEnumerable<base_Guest> base_Guest)
        {
            UnitOfWork.Add<base_Guest>(base_Guest);
            return base_Guest;
        }

        /// <summary>
        /// Delete a existed base_Guest.
        /// </summary>
        /// <param name="base_Guest">base_Guest to delete.</param>
        public void Delete(base_Guest base_Guest)
        {
            Refresh(base_Guest);
            if (base_Guest.EntityState != System.Data.EntityState.Detached)
                UnitOfWork.Delete<base_Guest>(base_Guest);
        }

        /// <summary>
        /// Delete a sequence of existed base_Guest.
        /// </summary>
        /// <param name="base_Guest">Sequence of existed base_Guest to delete.</param>
        public void Delete(IEnumerable<base_Guest> base_Guest)
        {
            int total = base_Guest.Count();
            for (int i = total - 1; i >= 0; i--)
                Delete(base_Guest.ElementAt(i));
        }

        /// <summary>
        /// Returns the first base_Guest of a sequence that satisfies a specified condition or 
        /// a default value if no such base_Guest is found.
        /// </summary>
        /// <param name="expression">A function to test each base_Guest for a condition.</param>
        /// <returns>    
        /// Null if source is empty or if no base_Guest passes the test specified by expression; 
        /// otherwise, the first base_Guest in source that passes the test specified by expression.
        /// </returns>
        public base_Guest Get(Expression<Func<base_Guest, bool>> expression)
        {
            return UnitOfWork.Get<base_Guest>(expression);
        }

        /// <summary>
        /// Get all base_Guest.
        /// </summary>
        /// <returns>The new IList&lt;base_Guest&gt; instance.</returns>
        public IList<base_Guest> GetAll()
        {
            return UnitOfWork.GetAll<base_Guest>();
        }

        /// <summary>
        /// Get all base_Guest that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each base_Guest for a condition.</param>
        /// <returns>The new IList&lt;base_Guest&gt; instance.</returns>
        public IList<base_Guest> GetAll(Expression<Func<base_Guest, bool>> expression)
        {
            return UnitOfWork.GetAll<base_Guest>(expression);
        }

        /// <summary>
        /// Get all base_Guest.
        /// </summary>
        /// <returns>The new IEnumerable&lt;base_Guest&gt; instance.</returns>
        public IEnumerable<base_Guest> GetIEnumerable()
        {
            return UnitOfWork.GetIEnumerable<base_Guest>();
        }

        /// <summary>
        /// Get all base_Guest that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each base_Guest for a condition.</param>
        /// <returns>The new IEnumerable&lt;base_Guest&gt; instance.</returns>
        public IEnumerable<base_Guest> GetIEnumerable(Expression<Func<base_Guest, bool>> expression)
        {
            return UnitOfWork.GetIEnumerable<base_Guest>(expression);
        }

        /// <summary>
        /// Get all base_Guest.
        /// </summary>
        /// <returns>The new IQueryable&lt;base_Guest&gt; instance.</returns>
        public IQueryable<base_Guest> GetIQueryable()
        {
            return UnitOfWork.GetIQueryable<base_Guest>();
        }

        /// <summary>
        /// Get all base_Guest that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each base_Guest for a condition.</param>
        /// <returns>The new IQueryable&lt;base_Guest&gt; instance.</returns>
        public IQueryable<base_Guest> GetIQueryable(Expression<Func<base_Guest, bool>> expression)
        {
            return UnitOfWork.GetIQueryable<base_Guest>(expression);
        }

        /// <summary>
        /// Take a few base_Guest in a sequence was sorted on server.
        /// </summary>
        /// <param name="ignoreCount">Number of base_Guest will ignore.</param>
        /// <param name="takeCount">Number of base_Guest will take.</param>
        /// <param name="keys">The key columns by which to order the results.</param>
        /// <returns>The new IList&lt;base_Guest&gt; instance.</returns>
        public IList<base_Guest> GetRange(int ignoreCount, int takeCount, string keys)
        {
            return UnitOfWork.GetRange<base_Guest>(ignoreCount, takeCount, keys);
        }

        /// <summary>
        /// Take a few base_Guest in a sequence was sorted on server.
        /// </summary>
        /// <param name="ignoreCount">Number of base_Guest will ignore.</param>
        /// <param name="takeCount">Number of base_Guest will take.</param>
        /// <param name="keys">The key columns by which to order the results.</param>
        /// <param name="expression">A function to test each base_Guest for a condition.</param>
        /// <returns>The new IList&lt;base_Guest&gt; instance.</returns>
        public IList<base_Guest> GetRange(int ignoreCount, int takeCount, string keys, Expression<Func<base_Guest, bool>> expression)
        {
            return UnitOfWork.GetRange<base_Guest>(ignoreCount, takeCount, keys, expression);
        }

        /// <summary>
        /// Take a few base_Guest in sequence was sorted by descending on server.
        /// </summary>
        /// <typeparam name="TKey">Type of base_Guest to sort</typeparam>
        /// <param name="ignoreCount">Number of base_Guest will ignore.</param>
        /// <param name="takeCount">Number of base_Guest will take.</param>
        /// <param name="keySelector">The key columns by which to order the results.</param>
        /// <returns>The new IList&lt;base_Guest&gt; instance.</returns>
        public IList<base_Guest> GetRangeDescending<TKey>(int ignoreCount, int takeCount, Expression<Func<base_Guest, TKey>> keySelector)
        {
            return UnitOfWork.GetRangeDescending(ignoreCount, takeCount, keySelector);
        }

        /// <summary>
        /// Take a few base_Guest in sequence was sorted by descending on server.
        /// </summary>
        /// <typeparam name="TKey">Type of base_Guest to sort</typeparam>
        /// <param name="ignoreCount">Number of base_Guest will ignore.</param>
        /// <param name="takeCount">Number of base_Guest will take.</param>
        /// <param name="keySelector">The key columns by which to order the results.</param>
        /// <param name="expression">A function to test each object for a condition.</param>
        /// <returns>The new IList&lt;base_Guest&gt; instance.</returns>
        public IList<base_Guest> GetRangeDescending<TKey>(int ignoreCount, int takeCount, Expression<Func<base_Guest, TKey>> keySelector, Expression<Func<base_Guest, bool>> expression)
        {
            return UnitOfWork.GetRangeDescending(ignoreCount, takeCount, keySelector, expression);
        }

        /// <summary>
        /// Updates an base_Guest in the object context with data from the data source.
        /// </summary>
        /// <param name="base_Guest">The base_Guest to be refreshed.</param>
        public base_Guest Refresh(base_Guest base_Guest)
        {
            UnitOfWork.Refresh<base_Guest>(base_Guest);
            if (base_Guest.EntityState != System.Data.EntityState.Detached)
                return base_Guest;
            return null;
        }

        /// <summary>
        /// Updates a sequence of base_Guest in the object context with data from the data source.
        /// </summary>
        /// <typeparam name="base_Guest">Type of object in a sequence to refresh.</typeparam>
        /// <param name="base_Guest">Object collection to be refreshed.</param>
        public void Refresh(IEnumerable<base_Guest> base_Guest)
        {
            UnitOfWork.Refresh<base_Guest>(base_Guest);
        }

        /// <summary>
        /// Updates a sequence of base_Guest in the object context with data from the data source.
        /// </summary>
        public void Refresh()
        {
            UnitOfWork.Refresh<base_Guest>();
        }

        /// <summary>
        /// Persists all updates to the data source and resets change tracking in the object context.
        /// </summary>
        public void Commit()
        {
            UnitOfWork.Commit();
        }

        /// <summary>
        /// Persists all updates to the data source with the specified System.Data.Objects.SaveOptions.
        /// </summary>
        /// <param name="options">A System.Data.Objects.SaveOptions value that determines the behavior of the operation.</param>
        public void Commit(SaveOptions options)
        {
            UnitOfWork.Commit(options);
        }

        /// <summary>
        /// Starts a database transaction.
        /// </summary>
        public void BeginTransaction()
        {
            UnitOfWork.BeginTransaction();
        }

        /// <summary>
        /// Commits the database transaction.
        /// </summary>
        public void CommitTransaction()
        {
            UnitOfWork.CommitTransaction();
        }

        /// <summary>
        /// Rolls back a transaction from a pending state.
        /// </summary>
        public void RollbackTransaction()
        {
            UnitOfWork.RollbackTransaction();
        }

        #endregion

        #endregion

        #region Custom Code

        /// <summary>
        /// Take a few base_Guest in a sequence was sorted on server.
        /// </summary>
        /// <param name="ignoreCount">Number of base_Guest will ignore.</param>
        /// <param name="takeCount">Number of base_Guest will take.</param>
        /// <param name="keys">The key columns by which to order the results.</param>
        /// <param name="expression">A function to test each base_Guest for a condition.</param>
        /// <returns>The new IList&lt;base_Guest&gt; instance.</returns>
        public IList<base_Guest> GetRange<TKey>(int ignoreCount, int takeCount, Expression<Func<base_Guest, TKey>> keySelector, Expression<Func<base_Guest, bool>> expression)
        {
            return UnitOfWork.GetRangeDescending<base_Guest, TKey>(ignoreCount, takeCount, keySelector, expression);
        }


        public IEnumerable<base_Guest> GetRangeIEnumerable(int ignoreCount, int takeCount, string keys, Expression<Func<base_Guest, bool>> expression)
        {
            return UnitOfWork.GetRange<base_Guest>(ignoreCount, takeCount, keys, expression);
        }


        public base_Guest CreateDefaultCustomer()
        {
            int defaultGuest = Define.DefaultGuestId;

            try
            {
                string guidString = defaultGuest.ToString("00000000-0000-0000-0000-00000000000#");
                Guid defaultGuid = Guid.Parse(guidString);
                IQueryable<base_Guest> query= UnitOfWork.GetIQueryable<base_Guest>(x => x.Resource == defaultGuid);
                if (query.Any())
                    return query.FirstOrDefault();

                UnitOfWork.BeginTransaction();
                base_Guest customer = new base_Guest();
                customer.GuestNo = defaultGuest.ToString("00000000000#");
                
                customer.LastName = "Guest";
                customer.FirstName = "Guest";
                customer.Resource = defaultGuid;
                customer.IsActived = true;
                customer.IsPurged = true;
                customer.DateCreated = DateTimeExt.Now;
                customer.DateUpdated = DateTimeExt.Now;
                customer.UserCreated = Define.USER.LoginName;
                customer.UserUpdated = Define.USER.LoginName;

                //Bill & Ship Address
                base_GuestAddress billAddress = new base_GuestAddress();
                billAddress.IsDefault = true;
                billAddress.AddressTypeId = 2;
                billAddress.AddressLine1 = "Unknow";
                billAddress.AddressLine2 = "Unknow";
                billAddress.City = "Unknow";
                billAddress.Resource = Guid.NewGuid();
                billAddress.GuestResource = customer.Resource.ToString();
                billAddress.DateCreated = DateTimeExt.Now;
                billAddress.DateUpdated = DateTimeExt.Now;
                billAddress.UserCreated = Define.USER.LoginName;
                billAddress.UserUpdated = Define.USER.LoginName;

                customer.base_GuestAddress.Add(billAddress);

                //Ship Address
                base_GuestAddress shipAddress = new base_GuestAddress();
                shipAddress.AddressTypeId = 3;
                shipAddress.AddressLine1 = "Unknow";
                shipAddress.AddressLine2 = "Unknow";
                shipAddress.City = "Unknow";
                shipAddress.GuestResource = customer.Resource.ToString();
                shipAddress.Resource = Guid.NewGuid();
                shipAddress.DateCreated = DateTimeExt.Now;
                shipAddress.DateUpdated = DateTimeExt.Now;
                shipAddress.UserCreated = Define.USER.LoginName;
                shipAddress.UserUpdated = Define.USER.LoginName;

                customer.base_GuestAddress.Add(shipAddress);
                
                UnitOfWork.Add<base_Guest>(customer);
                UnitOfWork.Commit();

                UnitOfWork.CommitTransaction();
                
                return customer;
            }
            catch (Exception ex)
            {
                UnitOfWork.RollbackTransaction();
                throw ex;
            }
        }


        #endregion
    }
}

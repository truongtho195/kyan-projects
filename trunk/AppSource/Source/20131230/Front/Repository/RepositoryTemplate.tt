<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Globalization" #>
<#
    CodeGenerationTools code = new CodeGenerationTools(this);
    MetadataLoader loader = new MetadataLoader(this);
    CodeRegion region = new CodeRegion(this, 1);
    MetadataTools ef = new MetadataTools(this);

    string inputFile = @"..\Database\POS.edmx";
    EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
    string namespaceName = code.VsNamespaceSuggestion();

    EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

    // Emit Entity Types
    foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {
        string filename = entity.Name + "Repository.cs";

        // Write out support code to primary template output file
        fileManager.StartNewFile(filename);
        WriteHeader(fileManager);
        BeginNamespace(namespaceName, code);
        BeginBodyClass(entity, code, region);

        if(!DoesFileExist(filename))
        {
            EndBodyClass();
            EndNamespace(namespaceName);
        }
        //break;
    }
    fileManager.Process();
#>

<#+
    void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
    {
        //fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq;
using System.Linq.Expressions;
using CPC.POS.Database;

<#+
        //String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray());
        //fileManager.EndBlock();
    }
#>

<#+
    void BeginNamespace(string namespaceName, CodeGenerationTools code)
    {
        CodeRegion region = new CodeRegion(this);
        if (!String.IsNullOrEmpty(namespaceName))
        {
#>
namespace <#=
            code.EscapeNamespace(namespaceName)
            #>
{
<#+
            PushIndent(CodeRegion.GetIndent(1));
        }
    }
#>

<#+
    void EndNamespace(string namespaceName)
    {
        if (!String.IsNullOrEmpty(namespaceName))
        {
            PopIndent();
#>
}
<#+
        }
    }
#>

<#+
    void BeginBodyClass(EntityType entity, CodeGenerationTools code, CodeRegion region)
    {
        string customCode = string.Empty;
        string filename = entity.Name + "Repository.cs";
        if(DoesFileExist(filename))
            customCode = OutputCustomCode(filename);

        string tableName = entity.Name;
        string camelCaseName = CamelCaseName(tableName);
        string pluralName = PluralName(camelCaseName);
        string escapedName = "<" + tableName + ">";
        string notEscapeName = "&lt;" + tableName + "&gt;";
#>
/// <summary>
/// Repository for table <#=        code.Escape(entity.Name)#> 
/// </summary>
<#=        Accessibility.ForType(entity)#> <#=        code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=        code.Escape(entity.Name + "Repository")#><#=        code.StringBefore(" : ", code.Escape(entity.BaseType))#>
{
<#+
        region.Begin("Auto Generate Code");
        PopIndent();
        this.WriteLine(string.Empty);
        region.Begin("Constructors");
        PushIndent(CodeRegion.GetIndent(2));
        this.WriteLine(string.Empty);
        #>
// Default constructor
public <#=        code.Escape(entity.Name + "Repository")#>()
{
}
<#+
        PopIndent();
        region.End();
        this.WriteLine(string.Empty);
        region.Begin("Basic C.R.U.D. Operations");
        PushIndent(CodeRegion.GetIndent(2));
        this.WriteLine(string.Empty);
#>
/// <summary>
/// Add new <#=        code.Escape(entity.Name)#>.
/// </summary>
/// <param name="<#=        code.Escape(camelCaseName)#>"><#=        code.Escape(entity.Name)#> to add.</param>
/// <returns><#=        code.Escape(entity.Name)#> have been added.</returns>
public <#=        code.Escape(entity.Name)#> Add(<#=        code.Escape(entity.Name)#> <#=        code.Escape(camelCaseName)#>)
{
    UnitOfWork.Add<#=        code.Escape(escapedName)#>(<#=        code.Escape(camelCaseName)#>);
    return <#=        code.Escape(camelCaseName)#>;
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Adds a sequence of new <#=        code.Escape(pluralName)#>.
/// </summary>
/// <param name="<#=        code.Escape(pluralName)#>">Sequence of new <#=        code.Escape(pluralName)#> to add.</param>
/// <returns>Sequence of new <#=        code.Escape(pluralName)#> have been added.</returns>
public IEnumerable<#=        code.Escape(escapedName)#> Add(IEnumerable<#=        code.Escape(escapedName)#> <#=        code.Escape(pluralName)#>)
{
    UnitOfWork.Add<#=        code.Escape(escapedName)#>(<#=        code.Escape(pluralName)#>);
    return <#=        code.Escape(pluralName)#>;
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Delete a existed <#=        code.Escape(entity.Name)#>.
/// </summary>
/// <param name="<#=        code.Escape(camelCaseName)#>"><#=        code.Escape(entity.Name)#> to delete.</param>
public void Delete(<#=        code.Escape(entity.Name)#> <#=        code.Escape(camelCaseName)#>)
{
    Refresh(<#=        code.Escape(camelCaseName)#>);
    if (<#=        code.Escape(camelCaseName)#>.EntityState != System.Data.EntityState.Detached)
        UnitOfWork.Delete<<#=        code.Escape(entity.Name)#>>(<#=        code.Escape(camelCaseName)#>);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Delete a sequence of existed <#=        code.Escape(pluralName)#>.
/// </summary>
/// <param name="<#=        code.Escape(pluralName)#>">Sequence of existed <#=        code.Escape(pluralName)#> to delete.</param>
public void Delete(IEnumerable<#=        code.Escape(escapedName)#> <#=        code.Escape(pluralName)#>)
{
    int total = <#=        code.Escape(pluralName)#>.Count();
    for (int i = total - 1; i >= 0; i--)
        Delete(<#=        code.Escape(pluralName)#>.ElementAt(i));
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Returns the first <#=        code.Escape(camelCaseName)#> of a sequence that satisfies a specified condition or 
/// a default value if no such <#=        code.Escape(camelCaseName)#> is found.
/// </summary>
/// <param name="expression">A function to test each <#=        code.Escape(camelCaseName)#> for a condition.</param>
/// <returns>    
/// Null if source is empty or if no <#=        code.Escape(camelCaseName)#> passes the test specified by expression; 
/// otherwise, the first <#=        code.Escape(camelCaseName)#> in source that passes the test specified by expression.
/// </returns>
public <#=        code.Escape(entity.Name)#> Get(Expression<Func<<#=        code.Escape(entity.Name)#>, bool>> expression)
{
    return UnitOfWork.Get<#=        code.Escape(escapedName)#>(expression);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Get all <#=        code.Escape(pluralName)#>.
/// </summary>
/// <returns>The new IList<#=        code.Escape(notEscapeName)#> instance.</returns>
public IList<#=        code.Escape(escapedName)#> GetAll()
{
    return UnitOfWork.GetAll<#=        code.Escape(escapedName)#>();
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Get all <#=        code.Escape(pluralName)#> that satisfies a specified condition.
/// </summary>
/// <param name="expression">A function to test each <#=        code.Escape(camelCaseName)#> for a condition.</param>
/// <returns>The new IList<#=        code.Escape(notEscapeName)#> instance.</returns>
public IList<#=        code.Escape(escapedName)#> GetAll(Expression<Func<<#=        code.Escape(entity.Name)#>, bool>> expression)
{
    return UnitOfWork.GetAll<#=        code.Escape(escapedName)#>(expression);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Get all <#=        code.Escape(pluralName)#>.
/// </summary>
/// <returns>The new IEnumerable<#=        code.Escape(notEscapeName)#> instance.</returns>
public IEnumerable<#=        code.Escape(escapedName)#> GetIEnumerable()
{
    return UnitOfWork.GetIEnumerable<#=        code.Escape(escapedName)#>();
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Get all <#=        code.Escape(pluralName)#> that satisfies a specified condition.
/// </summary>
/// <param name="expression">A function to test each <#=        code.Escape(camelCaseName)#> for a condition.</param>
/// <returns>The new IEnumerable<#=        code.Escape(notEscapeName)#> instance.</returns>
public IEnumerable<#=        code.Escape(escapedName)#> GetIEnumerable(Expression<Func<<#=        code.Escape(entity.Name)#>, bool>> expression)
{
    return UnitOfWork.GetIEnumerable<#=        code.Escape(escapedName)#>(expression);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Get all <#=        code.Escape(pluralName)#>.
/// </summary>
/// <returns>The new IQueryable<#=        code.Escape(notEscapeName)#> instance.</returns>
public IQueryable<#=        code.Escape(escapedName)#> GetIQueryable()
{
    return UnitOfWork.GetIQueryable<#=        code.Escape(escapedName)#>();
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Get all <#=        code.Escape(pluralName)#> that satisfies a specified condition.
/// </summary>
/// <param name="expression">A function to test each <#=        code.Escape(camelCaseName)#> for a condition.</param>
/// <returns>The new IQueryable<#=        code.Escape(notEscapeName)#> instance.</returns>
public IQueryable<#=        code.Escape(escapedName)#> GetIQueryable(Expression<Func<<#=        code.Escape(entity.Name)#>, bool>> expression)
{
    return UnitOfWork.GetIQueryable<#=        code.Escape(escapedName)#>(expression);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Take a few <#=        code.Escape(pluralName)#> in a sequence was sorted on server.
/// </summary>
/// <param name="ignoreCount">Number of <#=        code.Escape(pluralName)#> will ignore.</param>
/// <param name="takeCount">Number of <#=        code.Escape(pluralName)#> will take.</param>
/// <param name="keys">The key columns by which to order the results.</param>
/// <returns>The new IList<#=        code.Escape(notEscapeName)#> instance.</returns>
public IList<#=        code.Escape(escapedName)#> GetRange(int ignoreCount, int takeCount, string keys)
{
    return UnitOfWork.GetRange<#=        code.Escape(escapedName)#>(ignoreCount, takeCount, keys);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Take a few <#=        code.Escape(pluralName)#> in a sequence was sorted on server.
/// </summary>
/// <param name="ignoreCount">Number of <#=        code.Escape(pluralName)#> will ignore.</param>
/// <param name="takeCount">Number of <#=        code.Escape(pluralName)#> will take.</param>
/// <param name="keys">The key columns by which to order the results.</param>
/// <param name="expression">A function to test each <#=        code.Escape(camelCaseName)#> for a condition.</param>
/// <returns>The new IList<#=        code.Escape(notEscapeName)#> instance.</returns>
public IList<#=        code.Escape(escapedName)#> GetRange(int ignoreCount, int takeCount, string keys, Expression<Func<<#=        code.Escape(entity.Name)#>, bool>> expression)
{
    return UnitOfWork.GetRange<<#=        code.Escape(entity.Name)#>>(ignoreCount, takeCount, keys, expression);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Take a few <#=        code.Escape(pluralName)#> in sequence was sorted by descending on server.
/// </summary>
/// <typeparam name="TKey">Type of <#=        code.Escape(pluralName)#> to sort</typeparam>
/// <param name="ignoreCount">Number of <#=        code.Escape(pluralName)#> will ignore.</param>
/// <param name="takeCount">Number of <#=        code.Escape(pluralName)#> will take.</param>
/// <param name="keySelector">The key columns by which to order the results.</param>
/// <returns>The new IList<#=        code.Escape(notEscapeName)#> instance.</returns>
public IList<#=        code.Escape(escapedName)#> GetRangeDescending<TKey>(int ignoreCount, int takeCount, Expression<Func<<#=        code.Escape(entity.Name)#>, TKey>> keySelector)
{
    return UnitOfWork.GetRangeDescending(ignoreCount, takeCount, keySelector);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Take a few <#=        code.Escape(pluralName)#> in sequence was sorted by descending on server.
/// </summary>
/// <typeparam name="TKey">Type of <#=        code.Escape(pluralName)#> to sort</typeparam>
/// <param name="ignoreCount">Number of <#=        code.Escape(pluralName)#> will ignore.</param>
/// <param name="takeCount">Number of <#=        code.Escape(pluralName)#> will take.</param>
/// <param name="keySelector">The key columns by which to order the results.</param>
/// <param name="expression">A function to test each object for a condition.</param>
/// <returns>The new IList<#=        code.Escape(notEscapeName)#> instance.</returns>
public IList<#=        code.Escape(escapedName)#> GetRangeDescending<TKey>(int ignoreCount, int takeCount, Expression<Func<<#=        code.Escape(entity.Name)#>, TKey>> keySelector, Expression<Func<<#=        code.Escape(entity.Name)#>, bool>> expression)
{
    return UnitOfWork.GetRangeDescending(ignoreCount, takeCount, keySelector, expression);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Updates an <#=        code.Escape(pluralName)#> in the object context with data from the data source.
/// </summary>
/// <param name="<#=        code.Escape(camelCaseName)#>">The <#=        code.Escape(camelCaseName)#> to be refreshed.</param>
public <#=        code.Escape(entity.Name)#> Refresh(<#=        code.Escape(entity.Name)#> <#=        code.Escape(camelCaseName)#>)
{
    UnitOfWork.Refresh<#=        code.Escape(escapedName)#>(<#=        code.Escape(camelCaseName)#>);
    if (<#=        code.Escape(camelCaseName)#>.EntityState != System.Data.EntityState.Detached)
        return <#=        code.Escape(camelCaseName)#>;
    return null;
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Updates a sequence of <#=        code.Escape(pluralName)#> in the object context with data from the data source.
/// </summary>
/// <typeparam name="<#=        code.Escape(camelCaseName)#>">Type of object in a sequence to refresh.</typeparam>
/// <param name="<#=        code.Escape(camelCaseName)#>">Object collection to be refreshed.</param>
public void Refresh(IEnumerable<<#=        code.Escape(pluralName)#>> <#=        code.Escape(pluralName)#>)
{
    UnitOfWork.Refresh<#=        code.Escape(escapedName)#>(<#=        code.Escape(pluralName)#>);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Updates a sequence of <#=        code.Escape(pluralName)#> in the object context with data from the data source.
/// </summary>
public void Refresh()
{
    UnitOfWork.Refresh<#=        code.Escape(escapedName)#>();
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Persists all updates to the data source and resets change tracking in the object context.
/// </summary>
public void Commit()
{
    UnitOfWork.Commit();
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Persists all updates to the data source with the specified System.Data.Objects.SaveOptions.
/// </summary>
/// <param name="options">A System.Data.Objects.SaveOptions value that determines the behavior of the operation.</param>
public void Commit(SaveOptions options)
{
    UnitOfWork.Commit(options);
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Starts a database transaction.
/// </summary>
public void BeginTransaction()
{
    UnitOfWork.BeginTransaction();
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Commits the database transaction.
/// </summary>
public void CommitTransaction()
{
    UnitOfWork.CommitTransaction();
}
<#+        this.WriteLine(string.Empty);#>
/// <summary>
/// Rolls back a transaction from a pending state.
/// </summary>
public void RollbackTransaction()
{
    UnitOfWork.RollbackTransaction();
}
<#+
        PopIndent();
        region.End();
        PushIndent(CodeRegion.GetIndent(1));
        region.End();
        this.WriteLine(string.Empty);
        if(DoesFileExist(filename))
        {
            PopIndent();
            this.Write(customCode);
        }
        else
        {
            region.Begin("Custom Code");
            this.WriteLine(string.Empty);
            region.End();
        }
    }
#>

<#+
    void EndBodyClass()
    {
#>
}
<#+
    }
#>

<#+
    bool DoesFileExist(string filename)
    {
        return File.Exists(Path.Combine(GetCurrentDirectory(),filename));
    }
    
    string GetCurrentDirectory()
    {
        string executingDirectoryName = "";
        string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
        if(String.IsNullOrEmpty(stackTraceFileName))
        {
            throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
                ", and we could not figure out the file name from the stack trace (most likely because of running " +
                "the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
        }
        else
        {
            executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
        }
        return executingDirectoryName;
    }
    
    string OutputCustomCode(string filename)
    {
        using (StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(), filename)))
        {
            string textCustomRegion = "#region Custom Code";
            string line = string.Empty;
            string contents = string.Empty;
            while ((line = sr.ReadLine()) != null)
            {
                if (line.Contains(textCustomRegion))
                    contents = line + Environment.NewLine + sr.ReadToEnd();
            }
            return contents;
        }
    }

    string CamelCaseName(string name)
    {
        if(name.Length > 1)
            return char.ToLower(name[0]) + name.Substring(1, name.Length - 1);
        else
            return name.ToLower();
    }

    string PluralName(string name)
    {
        if(name.Length > 1)
            return PluralizationService.CreateService(new CultureInfo("en-US")).Pluralize(name);
        else
            return name;
    }
#>
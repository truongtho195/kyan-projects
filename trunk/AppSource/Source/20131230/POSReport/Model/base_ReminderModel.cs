//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using CPC.POSReport.Database;
using Toolkit.Base;

namespace CPC.POSReport.Model
{
    /// <summary>
    /// Model for table base_Reminder
    /// </summary>
    [Serializable]
    public partial class base_ReminderModel : ModelBase, IDataErrorInfo
    {
        #region Constructor

        // Default constructor
        public base_ReminderModel()
        {
            this.IsNew = true;
            this.base_Reminder = new base_Reminder();
        }

        // Default constructor that set entity to field
        public base_ReminderModel(base_Reminder base_reminder, bool isRaiseProperties = false)
        {
            this.base_Reminder = base_reminder;
            if (!isRaiseProperties)
                this.ToModel();
            else
                this.ToModelAndRaise();
            this.IsDirty = false;
        }

        #endregion

        #region Entity Properties

        public base_Reminder base_Reminder { get; private set; }

        #endregion

        #region Primitive Properties

        protected int _id;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Id</para>
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set
            {
                if (this._id != value)
                {
                    this.IsDirty = true;
                    this._id = value;
                    OnPropertyChanged(() => Id);
                    PropertyChangedCompleted(() => Id);
                }
            }
        }

        protected string _task;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Task</para>
        /// </summary>
        public string Task
        {
            get { return this._task; }
            set
            {
                if (this._task != value)
                {
                    this.IsDirty = true;
                    this._task = value;
                    OnPropertyChanged(() => Task);
                    PropertyChangedCompleted(() => Task);
                }
            }
        }

        protected string _note;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Note</para>
        /// </summary>
        public string Note
        {
            get { return this._note; }
            set
            {
                if (this._note != value)
                {
                    this.IsDirty = true;
                    this._note = value;
                    OnPropertyChanged(() => Note);
                    PropertyChangedCompleted(() => Note);
                }
            }
        }

        protected short _priority;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Priority</para>
        /// </summary>
        public short Priority
        {
            get { return this._priority; }
            set
            {
                if (this._priority != value)
                {
                    this.IsDirty = true;
                    this._priority = value;
                    OnPropertyChanged(() => Priority);
                    PropertyChangedCompleted(() => Priority);
                }
            }
        }

        protected short _category;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Category</para>
        /// </summary>
        public short Category
        {
            get { return this._category; }
            set
            {
                if (this._category != value)
                {
                    this.IsDirty = true;
                    this._category = value;
                    OnPropertyChanged(() => Category);
                    PropertyChangedCompleted(() => Category);
                }
            }
        }

        protected string _resourceAssigned;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the ResourceAssigned</para>
        /// </summary>
        public string ResourceAssigned
        {
            get { return this._resourceAssigned; }
            set
            {
                if (this._resourceAssigned != value)
                {
                    this.IsDirty = true;
                    this._resourceAssigned = value;
                    OnPropertyChanged(() => ResourceAssigned);
                    PropertyChangedCompleted(() => ResourceAssigned);
                }
            }
        }

        protected string _color;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Color</para>
        /// </summary>
        public string Color
        {
            get { return this._color; }
            set
            {
                if (this._color != value)
                {
                    this.IsDirty = true;
                    this._color = value;
                    OnPropertyChanged(() => Color);
                    PropertyChangedCompleted(() => Color);
                }
            }
        }

        protected System.DateTime _dueDate;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DueDate</para>
        /// </summary>
        public System.DateTime DueDate
        {
            get { return this._dueDate; }
            set
            {
                if (this._dueDate != value)
                {
                    this.IsDirty = true;
                    this._dueDate = value;
                    OnPropertyChanged(() => DueDate);
                    PropertyChangedCompleted(() => DueDate);
                }
            }
        }

        protected bool _isReminder;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsReminder</para>
        /// </summary>
        public bool IsReminder
        {
            get { return this._isReminder; }
            set
            {
                if (this._isReminder != value)
                {
                    this.IsDirty = true;
                    this._isReminder = value;
                    OnPropertyChanged(() => IsReminder);
                    PropertyChangedCompleted(() => IsReminder);
                }
            }
        }

        protected System.DateTime _time;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Time</para>
        /// </summary>
        public System.DateTime Time
        {
            get { return this._time; }
            set
            {
                if (this._time != value)
                {
                    this.IsDirty = true;
                    this._time = value;
                    OnPropertyChanged(() => Time);
                    PropertyChangedCompleted(() => Time);
                }
            }
        }

        protected short _repeat;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the Repeat</para>
        /// </summary>
        public short Repeat
        {
            get { return this._repeat; }
            set
            {
                if (this._repeat != value)
                {
                    this.IsDirty = true;
                    this._repeat = value;
                    OnPropertyChanged(() => Repeat);
                    PropertyChangedCompleted(() => Repeat);
                }
            }
        }

        protected bool _isCompleted;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsCompleted</para>
        /// </summary>
        public bool IsCompleted
        {
            get { return this._isCompleted; }
            set
            {
                if (this._isCompleted != value)
                {
                    this.IsDirty = true;
                    this._isCompleted = value;
                    OnPropertyChanged(() => IsCompleted);
                    PropertyChangedCompleted(() => IsCompleted);
                }
            }
        }

        protected string _userCreated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the UserCreated</para>
        /// </summary>
        public string UserCreated
        {
            get { return this._userCreated; }
            set
            {
                if (this._userCreated != value)
                {
                    this.IsDirty = true;
                    this._userCreated = value;
                    OnPropertyChanged(() => UserCreated);
                    PropertyChangedCompleted(() => UserCreated);
                }
            }
        }

        protected Nullable<System.DateTime> _dateCreated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DateCreated</para>
        /// </summary>
        public Nullable<System.DateTime> DateCreated
        {
            get { return this._dateCreated; }
            set
            {
                if (this._dateCreated != value)
                {
                    this.IsDirty = true;
                    this._dateCreated = value;
                    OnPropertyChanged(() => DateCreated);
                    PropertyChangedCompleted(() => DateCreated);
                }
            }
        }

        protected string _userUpdated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the UserUpdated</para>
        /// </summary>
        public string UserUpdated
        {
            get { return this._userUpdated; }
            set
            {
                if (this._userUpdated != value)
                {
                    this.IsDirty = true;
                    this._userUpdated = value;
                    OnPropertyChanged(() => UserUpdated);
                    PropertyChangedCompleted(() => UserUpdated);
                }
            }
        }

        protected Nullable<System.DateTime> _dateUpdated;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the DateUpdated</para>
        /// </summary>
        public Nullable<System.DateTime> DateUpdated
        {
            get { return this._dateUpdated; }
            set
            {
                if (this._dateUpdated != value)
                {
                    this.IsDirty = true;
                    this._dateUpdated = value;
                    OnPropertyChanged(() => DateUpdated);
                    PropertyChangedCompleted(() => DateUpdated);
                }
            }
        }

        protected bool _isActived;
        /// <summary>
        /// Property Model
        /// <para>Gets or sets the IsActived</para>
        /// </summary>
        public bool IsActived
        {
            get { return this._isActived; }
            set
            {
                if (this._isActived != value)
                {
                    this.IsDirty = true;
                    this._isActived = value;
                    OnPropertyChanged(() => IsActived);
                    PropertyChangedCompleted(() => IsActived);
                }
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// <para>Public Method</para>
        /// Method for set IsNew & IsDirty = false;
        /// </summary>
        public void EndUpdate()
        {
            this.IsNew = false;
            this.IsDirty = false;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set PropertyModel to Entity</para>
        /// </summary>
        public void ToEntity()
        {
            if (IsNew)
                this.base_Reminder.Id = this.Id;
            this.base_Reminder.Task = this.Task;
            this.base_Reminder.Note = this.Note;
            this.base_Reminder.Priority = this.Priority;
            this.base_Reminder.Category = this.Category;
            this.base_Reminder.ResourceAssigned = this.ResourceAssigned;
            this.base_Reminder.Color = this.Color;
            this.base_Reminder.DueDate = this.DueDate;
            this.base_Reminder.IsReminder = this.IsReminder;
            this.base_Reminder.Time = this.Time;
            this.base_Reminder.Repeat = this.Repeat;
            this.base_Reminder.IsCompleted = this.IsCompleted;
            this.base_Reminder.UserCreated = this.UserCreated;
            this.base_Reminder.DateCreated = this.DateCreated;
            this.base_Reminder.UserUpdated = this.UserUpdated;
            this.base_Reminder.DateUpdated = this.DateUpdated;
            this.base_Reminder.IsActived = this.IsActived;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModel()
        {
            this._id = this.base_Reminder.Id;
            this._task = this.base_Reminder.Task;
            this._note = this.base_Reminder.Note;
            this._priority = this.base_Reminder.Priority;
            this._category = this.base_Reminder.Category;
            this._resourceAssigned = this.base_Reminder.ResourceAssigned;
            this._color = this.base_Reminder.Color;
            this._dueDate = this.base_Reminder.DueDate;
            this._isReminder = this.base_Reminder.IsReminder;
            this._time = this.base_Reminder.Time;
            this._repeat = this.base_Reminder.Repeat;
            this._isCompleted = this.base_Reminder.IsCompleted;
            this._userCreated = this.base_Reminder.UserCreated;
            this._dateCreated = this.base_Reminder.DateCreated;
            this._userUpdated = this.base_Reminder.UserUpdated;
            this._dateUpdated = this.base_Reminder.DateUpdated;
            this._isActived = this.base_Reminder.IsActived;
        }

        /// <summary>
        /// Public Method
        /// <para>Method for set Entity to PropertyModel</para>
        /// </summary
        public void ToModelAndRaise()
        {
            this.Id = this.base_Reminder.Id;
            this.Task = this.base_Reminder.Task;
            this.Note = this.base_Reminder.Note;
            this.Priority = this.base_Reminder.Priority;
            this.Category = this.base_Reminder.Category;
            this.ResourceAssigned = this.base_Reminder.ResourceAssigned;
            this.Color = this.base_Reminder.Color;
            this.DueDate = this.base_Reminder.DueDate;
            this.IsReminder = this.base_Reminder.IsReminder;
            this.Time = this.base_Reminder.Time;
            this.Repeat = this.base_Reminder.Repeat;
            this.IsCompleted = this.base_Reminder.IsCompleted;
            this.UserCreated = this.base_Reminder.UserCreated;
            this.DateCreated = this.base_Reminder.DateCreated;
            this.UserUpdated = this.base_Reminder.UserUpdated;
            this.DateUpdated = this.base_Reminder.DateUpdated;
            this.IsActived = this.base_Reminder.IsActived;
        }

        #endregion

        #region Custom Code


        #endregion

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string message = string.Empty;

                switch (columnName)
                {
                    case "Id":
                        break;
                    case "Task":
                        break;
                    case "Note":
                        break;
                    case "Priority":
                        break;
                    case "Category":
                        break;
                    case "ResourceAssigned":
                        break;
                    case "Color":
                        break;
                    case "DueDate":
                        break;
                    case "IsReminder":
                        break;
                    case "Time":
                        break;
                    case "Repeat":
                        break;
                    case "IsCompleted":
                        break;
                    case "UserCreated":
                        break;
                    case "DateCreated":
                        break;
                    case "UserUpdated":
                        break;
                    case "DateUpdated":
                        break;
                }

                if (!string.IsNullOrWhiteSpace(message))
                    return message;
                return null;
            }
        }

        #endregion
    }
}

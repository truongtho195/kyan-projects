//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq;
using System.Linq.Expressions;
using CPC.TimeClock.Database;

namespace CPC.TimeClock.Repository
{
    /// <summary>
    /// Repository for table pga_job 
    /// </summary>
    public partial class pga_jobRepository
    {
        #region Auto Generate Code

        #region Constructors

        // Default constructor
        public pga_jobRepository()
        {
        }

        #endregion

        #region Basic C.R.U.D. Operations

        /// <summary>
        /// Add new pga_job.
        /// </summary>
        /// <param name="pga_job">pga_job to add.</param>
        /// <returns>pga_job have been added.</returns>
        public pga_job Add(pga_job pga_job)
        {
            UnitOfWork.Add<pga_job>(pga_job);
            return pga_job;
        }

        /// <summary>
        /// Adds a sequence of new pga_job.
        /// </summary>
        /// <param name="pga_job">Sequence of new pga_job to add.</param>
        /// <returns>Sequence of new pga_job have been added.</returns>
        public IEnumerable<pga_job> Add(IEnumerable<pga_job> pga_job)
        {
            UnitOfWork.Add<pga_job>(pga_job);
            return pga_job;
        }

        /// <summary>
        /// Delete a existed pga_job.
        /// </summary>
        /// <param name="pga_job">pga_job to delete.</param>
        public void Delete(pga_job pga_job)
        {
            Refresh(pga_job);
            if (pga_job.EntityState != System.Data.EntityState.Detached)
                UnitOfWork.Delete<pga_job>(pga_job);
        }

        /// <summary>
        /// Delete a sequence of existed pga_job.
        /// </summary>
        /// <param name="pga_job">Sequence of existed pga_job to delete.</param>
        public void Delete(IEnumerable<pga_job> pga_job)
        {
            int total = pga_job.Count();
            for (int i = total - 1; i >= 0; i--)
                Delete(pga_job.ElementAt(i));
        }

        /// <summary>
        /// Returns the first pga_job of a sequence that satisfies a specified condition or 
        /// a default value if no such pga_job is found.
        /// </summary>
        /// <param name="expression">A function to test each pga_job for a condition.</param>
        /// <returns>    
        /// Null if source is empty or if no pga_job passes the test specified by expression; 
        /// otherwise, the first pga_job in source that passes the test specified by expression.
        /// </returns>
        public pga_job Get(Expression<Func<pga_job, bool>> expression)
        {
            return UnitOfWork.Get<pga_job>(expression);
        }

        /// <summary>
        /// Get all pga_job.
        /// </summary>
        /// <returns>The new IList&lt;pga_job&gt; instance.</returns>
        public IList<pga_job> GetAll()
        {
            return UnitOfWork.GetAll<pga_job>();
        }

        /// <summary>
        /// Get all pga_job that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each pga_job for a condition.</param>
        /// <returns>The new IList&lt;pga_job&gt; instance.</returns>
        public IList<pga_job> GetAll(Expression<Func<pga_job, bool>> expression)
        {
            return UnitOfWork.GetAll<pga_job>(expression);
        }

        /// <summary>
        /// Get all pga_job.
        /// </summary>
        /// <returns>The new IEnumerable&lt;pga_job&gt; instance.</returns>
        public IEnumerable<pga_job> GetIEnumerable()
        {
            return UnitOfWork.GetIEnumerable<pga_job>();
        }

        /// <summary>
        /// Get all pga_job that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each pga_job for a condition.</param>
        /// <returns>The new IEnumerable&lt;pga_job&gt; instance.</returns>
        public IEnumerable<pga_job> GetIEnumerable(Expression<Func<pga_job, bool>> expression)
        {
            return UnitOfWork.GetIEnumerable<pga_job>(expression);
        }

        /// <summary>
        /// Get all pga_job.
        /// </summary>
        /// <returns>The new IQueryable&lt;pga_job&gt; instance.</returns>
        public IQueryable<pga_job> GetIQueryable()
        {
            return UnitOfWork.GetIQueryable<pga_job>();
        }

        /// <summary>
        /// Get all pga_job that satisfies a specified condition.
        /// </summary>
        /// <param name="expression">A function to test each pga_job for a condition.</param>
        /// <returns>The new IQueryable&lt;pga_job&gt; instance.</returns>
        public IQueryable<pga_job> GetIQueryable(Expression<Func<pga_job, bool>> expression)
        {
            return UnitOfWork.GetIQueryable<pga_job>(expression);
        }

        /// <summary>
        /// Take a few pga_job in a sequence was sorted on server.
        /// </summary>
        /// <param name="ignoreCount">Number of pga_job will ignore.</param>
        /// <param name="takeCount">Number of pga_job will take.</param>
        /// <param name="keys">The key columns by which to order the results.</param>
        /// <returns>The new IList&lt;pga_job&gt; instance.</returns>
        public IList<pga_job> GetRange(int ignoreCount, int takeCount, string keys)
        {
            return UnitOfWork.GetRange<pga_job>(ignoreCount, takeCount, keys);
        }

        /// <summary>
        /// Take a few pga_job in a sequence was sorted on server.
        /// </summary>
        /// <param name="ignoreCount">Number of pga_job will ignore.</param>
        /// <param name="takeCount">Number of pga_job will take.</param>
        /// <param name="keys">The key columns by which to order the results.</param>
        /// <param name="expression">A function to test each pga_job for a condition.</param>
        /// <returns>The new IList&lt;pga_job&gt; instance.</returns>
        public IList<pga_job> GetRange(int ignoreCount, int takeCount, string keys, Expression<Func<pga_job, bool>> expression)
        {
            return UnitOfWork.GetRange<pga_job>(ignoreCount, takeCount, keys, expression);
        }

        /// <summary>
        /// Take a few pga_job in sequence was sorted by descending on server.
        /// </summary>
        /// <typeparam name="TKey">Type of pga_job to sort</typeparam>
        /// <param name="ignoreCount">Number of pga_job will ignore.</param>
        /// <param name="takeCount">Number of pga_job will take.</param>
        /// <param name="keySelector">The key columns by which to order the results.</param>
        /// <returns>The new IList&lt;pga_job&gt; instance.</returns>
        public IList<pga_job> GetRangeDescending<TKey>(int ignoreCount, int takeCount, Expression<Func<pga_job, TKey>> keySelector)
        {
            return UnitOfWork.GetRangeDescending(ignoreCount, takeCount, keySelector);
        }

        /// <summary>
        /// Take a few pga_job in sequence was sorted by descending on server.
        /// </summary>
        /// <typeparam name="TKey">Type of pga_job to sort</typeparam>
        /// <param name="ignoreCount">Number of pga_job will ignore.</param>
        /// <param name="takeCount">Number of pga_job will take.</param>
        /// <param name="keySelector">The key columns by which to order the results.</param>
        /// <param name="expression">A function to test each object for a condition.</param>
        /// <returns>The new IList&lt;pga_job&gt; instance.</returns>
        public IList<pga_job> GetRangeDescending<TKey>(int ignoreCount, int takeCount, Expression<Func<pga_job, TKey>> keySelector, Expression<Func<pga_job, bool>> expression)
        {
            return UnitOfWork.GetRangeDescending(ignoreCount, takeCount, keySelector, expression);
        }

        /// <summary>
        /// Updates an pga_job in the object context with data from the data source.
        /// </summary>
        /// <param name="pga_job">The pga_job to be refreshed.</param>
        public pga_job Refresh(pga_job pga_job)
        {
            UnitOfWork.Refresh<pga_job>(pga_job);
            if (pga_job.EntityState != System.Data.EntityState.Detached)
                return pga_job;
            return null;
        }

        /// <summary>
        /// Updates a sequence of pga_job in the object context with data from the data source.
        /// </summary>
        /// <typeparam name="pga_job">Type of object in a sequence to refresh.</typeparam>
        /// <param name="pga_job">Object collection to be refreshed.</param>
        public void Refresh(IEnumerable<pga_job> pga_job)
        {
            UnitOfWork.Refresh<pga_job>(pga_job);
        }

        /// <summary>
        /// Updates a sequence of pga_job in the object context with data from the data source.
        /// </summary>
        public void Refresh()
        {
            UnitOfWork.Refresh<pga_job>();
        }

        /// <summary>
        /// Persists all updates to the data source and resets change tracking in the object context.
        /// </summary>
        public void Commit()
        {
            UnitOfWork.Commit();
        }

        /// <summary>
        /// Persists all updates to the data source with the specified System.Data.Objects.SaveOptions.
        /// </summary>
        /// <param name="options">A System.Data.Objects.SaveOptions value that determines the behavior of the operation.</param>
        public void Commit(SaveOptions options)
        {
            UnitOfWork.Commit(options);
        }

        /// <summary>
        /// Starts a database transaction.
        /// </summary>
        public void BeginTransaction()
        {
            UnitOfWork.BeginTransaction();
        }

        /// <summary>
        /// Commits the database transaction.
        /// </summary>
        public void CommitTransaction()
        {
            UnitOfWork.CommitTransaction();
        }

        /// <summary>
        /// Rolls back a transaction from a pending state.
        /// </summary>
        public void RollbackTransaction()
        {
            UnitOfWork.RollbackTransaction();
        }

        #endregion

        #endregion

        #region Custom Code


        #endregion
    }
}
